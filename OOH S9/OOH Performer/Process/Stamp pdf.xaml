<Activity mc:Ignorable="sap sap2010" x:Class="Stamp_pdf" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_trans" Type="InArgument(ui:QueueItem)" />
    <x:Property Name="out_stampfilepath" Type="InArgument(x:String)" />
    <x:Property Name="in_folderpath" Type="InArgument(x:String)" />
    <x:Property Name="in_DbConnection" Type="InArgument(ui:DatabaseConnection)" />
  </x:Members>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>1097,3367</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>Stamp_pdf_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="62">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Runtime.InteropServices</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Activities.DynamicUpdate</x:String>
      <x:String>UiPath.PDF.Activities</x:String>
      <x:String>UiPath.Database</x:String>
      <x:String>System.Security</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>UiPath.Database.Activities</x:String>
      <x:String>Microsoft.VisualBasic.CompilerServices</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="52">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>Microsoft.Bcl.AsyncInterfaces</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>UiPath.PDF.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Database</AssemblyReference>
      <AssemblyReference>UiPath.Database.Activities</AssemblyReference>
      <AssemblyReference>System.Memory.Data</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="Stamp_pdf" sap:VirtualizedContainerService.HintSize="839,3262" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:String" Name="var_pubcode" />
      <Variable x:TypeArguments="x:String" Name="var_compilefile" />
      <Variable x:TypeArguments="x:String" Name="var_repcode" />
      <Variable x:TypeArguments="x:String" Name="var_mcode" />
      <Variable x:TypeArguments="x:String" Name="var_e" />
      <Variable x:TypeArguments="x:String" Name="var_c" />
      <Variable x:TypeArguments="x:String" Name="varp" />
      <Variable x:TypeArguments="x:String" Name="var_filename" />
      <Variable x:TypeArguments="x:String" Name="currentdate" />
      <Variable x:TypeArguments="x:Boolean" Name="boolmanifestfolderexist" />
      <Variable x:TypeArguments="x:Boolean" Name="boolmagzinemanifestfolderexist" />
      <Variable x:TypeArguments="x:String" Name="stampcomment" />
      <Variable x:TypeArguments="x:Boolean" Name="failtostamp" />
      <Variable x:TypeArguments="x:String" Name="strop" />
      <Variable x:TypeArguments="x:String" Name="str_UpdateQuery" />
      <Variable x:TypeArguments="x:String" Name="str_Log_ID" />
      <Variable x:TypeArguments="x:String" Name="strComment" />
      <Variable x:TypeArguments="s:String[]" Name="arrStampComment" />
      <Variable x:TypeArguments="x:Int32" Name="intRowCount" />
      <Variable x:TypeArguments="x:String" Name="varException" />
      <Variable x:TypeArguments="x:String" Name="str_Fa_Action" />
      <Variable x:TypeArguments="x:String" Name="str_Split_S9_Comment" />
      <Variable x:TypeArguments="s:String[]" Name="arr_Split_S9_Comment" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <WriteLine DisplayName="Write Line" sap:VirtualizedContainerService.HintSize="797,61" sap2010:WorkflowViewState.IdRef="WriteLine_2" Text="Stamping the PDF" />
    <ui:MultipleAssign DisplayName="Multiple Assign" sap:VirtualizedContainerService.HintSize="797,317" sap2010:WorkflowViewState.IdRef="MultipleAssign_1">
      <ui:MultipleAssign.AssignOperations>
        <scg:List x:TypeArguments="ui:AssignOperation" Capacity="32">
          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_16">
            <ui:AssignOperation.To>
              <OutArgument x:TypeArguments="x:String">[var_compilefile]</OutArgument>
            </ui:AssignOperation.To>
            <ui:AssignOperation.Value>
              <InArgument x:TypeArguments="x:String">[in_trans.SpecificContent("COMPILEFILEPATH").ToString.Trim]</InArgument>
            </ui:AssignOperation.Value>
          </ui:AssignOperation>
          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_21">
            <ui:AssignOperation.To>
              <OutArgument x:TypeArguments="x:String">[var_filename]</OutArgument>
            </ui:AssignOperation.To>
            <ui:AssignOperation.Value>
              <InArgument x:TypeArguments="x:String">[in_trans.SpecificContent("FILENAME").ToString.Trim]</InArgument>
            </ui:AssignOperation.Value>
          </ui:AssignOperation>
          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_22">
            <ui:AssignOperation.To>
              <OutArgument x:TypeArguments="x:String">[currentdate]</OutArgument>
            </ui:AssignOperation.To>
            <ui:AssignOperation.Value>
              <InArgument x:TypeArguments="x:String">[System.DateTime.Now.ToString("yyyy-MM-dd")]</InArgument>
            </ui:AssignOperation.Value>
          </ui:AssignOperation>
          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_23">
            <ui:AssignOperation.To>
              <OutArgument x:TypeArguments="x:String">[stampcomment]</OutArgument>
            </ui:AssignOperation.To>
            <ui:AssignOperation.Value>
              <InArgument x:TypeArguments="x:String">[in_trans.SpecificContent("STAMP").ToString.Trim]</InArgument>
            </ui:AssignOperation.Value>
          </ui:AssignOperation>
          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_24">
            <ui:AssignOperation.To>
              <OutArgument x:TypeArguments="x:String">[str_Log_ID]</OutArgument>
            </ui:AssignOperation.To>
            <ui:AssignOperation.Value>
              <InArgument x:TypeArguments="x:String">[in_trans.SpecificContent("S9_LOG_ID").ToString]</InArgument>
            </ui:AssignOperation.Value>
          </ui:AssignOperation>
          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_25">
            <ui:AssignOperation.To>
              <OutArgument x:TypeArguments="x:String">[strComment]</OutArgument>
            </ui:AssignOperation.To>
            <ui:AssignOperation.Value>
              <InArgument x:TypeArguments="x:String">[in_trans.SpecificContent("STAMPCOMMENT").ToString.Trim]</InArgument>
            </ui:AssignOperation.Value>
          </ui:AssignOperation>
          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_26">
            <ui:AssignOperation.To>
              <OutArgument x:TypeArguments="x:String">[str_Fa_Action]</OutArgument>
            </ui:AssignOperation.To>
            <ui:AssignOperation.Value>
              <InArgument x:TypeArguments="x:String">[in_trans.SpecificContent("FA_ACTION").ToString.Trim]</InArgument>
            </ui:AssignOperation.Value>
          </ui:AssignOperation>
          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_27">
            <ui:AssignOperation.To>
              <OutArgument x:TypeArguments="x:String">[str_Split_S9_Comment]</OutArgument>
            </ui:AssignOperation.To>
            <ui:AssignOperation.Value>
              <InArgument x:TypeArguments="x:String">[in_trans.SpecificContent("SPLIT_S9_COMMENT").ToString.Trim.Replace("|",":")]</InArgument>
            </ui:AssignOperation.Value>
          </ui:AssignOperation>
        </scg:List>
      </ui:MultipleAssign.AssignOperations>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:MultipleAssign>
    <Assign sap:VirtualizedContainerService.HintSize="797,60" sap2010:WorkflowViewState.IdRef="Assign_6">
      <Assign.To>
        <OutArgument x:TypeArguments="s:String[]">[arr_Split_S9_Comment]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="s:String[]">[Split(str_Split_S9_Comment,"\n")]</InArgument>
      </Assign.Value>
    </Assign>
    <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="797,236" sap2010:WorkflowViewState.IdRef="CommentOut_6">
      <ui:CommentOut.Body>
        <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="242,158" sap2010:WorkflowViewState.IdRef="Sequence_16">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <Sequence sap:VirtualizedContainerService.HintSize="200,66" sap2010:WorkflowViewState.IdRef="Sequence_14">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <If Condition="[not string.IsNullOrEmpty(strComment)]" sap:VirtualizedContainerService.HintSize="484,400" sap2010:WorkflowViewState.IdRef="If_6">
              <If.Then>
                <Sequence sap:VirtualizedContainerService.HintSize="304,252" sap2010:WorkflowViewState.IdRef="Sequence_15">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <Assign sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_4">
                    <Assign.To>
                      <OutArgument x:TypeArguments="s:String[]">[arrStampComment]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="s:String[]">[strComment.Split(";".ToCharArray)]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <Assign sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_5">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:Int32">[intRowCount]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:Int32">[arrStampComment.Count]</InArgument>
                    </Assign.Value>
                  </Assign>
                </Sequence>
              </If.Then>
            </If>
          </Sequence>
        </Sequence>
      </ui:CommentOut.Body>
    </ui:CommentOut>
    <ui:PathExists DisplayName="Path Exists" Exists="[boolmanifestfolderexist]" sap:VirtualizedContainerService.HintSize="797,89" sap2010:WorkflowViewState.IdRef="PathExists_1" Path="[in_folderpath+&quot;\manifest\&quot;+currentdate+&quot;\POUT_BOT&quot;+System.DateTime.Now.ToString(&quot;yyyyMMdd&quot;)+&quot;\index.TXT\&quot;]" PathType="File" />
    <If Condition="[boolmanifestfolderexist]" sap:VirtualizedContainerService.HintSize="797,319" sap2010:WorkflowViewState.IdRef="If_1">
      <If.Then>
        <Sequence sap:VirtualizedContainerService.HintSize="200,83" sap2010:WorkflowViewState.IdRef="Sequence_2">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
        </Sequence>
      </If.Then>
      <If.Else>
        <Sequence sap:VirtualizedContainerService.HintSize="376,171" sap2010:WorkflowViewState.IdRef="Sequence_3">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:CreateDirectory ContinueOnError="{x:Null}" DisplayName="Create Folder" sap:VirtualizedContainerService.HintSize="334,79" sap2010:WorkflowViewState.IdRef="CreateDirectory_1" Path="[in_folderpath+&quot;\manifest\&quot;+currentdate+&quot;\POUT_BOT&quot;+System.DateTime.Now.ToString(&quot;yyyyMMdd&quot;)+&quot;\index.TXT\&quot;]" />
        </Sequence>
      </If.Else>
    </If>
    <WriteLine DisplayName="Write Line" sap:VirtualizedContainerService.HintSize="797,61" sap2010:WorkflowViewState.IdRef="WriteLine_3" Text="[&quot;Stamp file location is &quot;+in_folderpath+&quot;\manifest\&quot;+currentdate]" />
    <ui:ReadPDFText PreserveFormatting="{x:Null}" DisplayName="Read PDF Text" FileName="[var_compilefile]" sap:VirtualizedContainerService.HintSize="797,59" sap2010:WorkflowViewState.IdRef="ReadPDFText_1" Range="All" Text="[strop]" />
    <If Condition="[str_Fa_Action=&quot;SPLIT - S9&quot; or str_Fa_Action.Contains(&quot;SPLIT&quot;) or str_Fa_Action.Contains(&quot;split&quot;)]" sap:VirtualizedContainerService.HintSize="797,535" sap2010:WorkflowViewState.IdRef="If_7">
      <If.Then>
        <Sequence sap:VirtualizedContainerService.HintSize="376,387" sap2010:WorkflowViewState.IdRef="Sequence_17">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_1" Level="Info" Message="[&quot;FA Action : &quot; + str_Fa_Action]" />
          <ui:InvokeCode ContinueOnError="{x:Null}" Code="Try&#xA;Dim Destinationfolder As String = OutputPdfFilePath&#xA;Dim filename As String = InputPdfFilePath&#xA;Dim y_cor As Double&#xA;Dim counter As Integer = 0&#xA;Dim split_s9_comment_counter = 0&#xA;'Dim Top as Integer = 100&#xA;Dim stamp1 As String =Stamptext&#xA;'Dim watermarkC As String =WatermarkClientcode&#xA;'Dim watermarkP As String = Watermarkproductcode&#xA;'Dim watermarkE As String = WatermarkEST&#xA;'Dim watermarkM As String = WatermarkMediacode&#xA;'Dim watermarkpub As String = Watermarkpubcode&#xA;'Dim watermatkmos As String = Watermarkmos&#xA;Dim watermark As String = stamp1&#xA;Dim commentrowcount As Integer = introwcount&#xA;Dim arrMultiLineComment () As String = {MultiLineStampComment}&#xA;arrMultiLineComment=MultiLineStampComment.Split(New [Char]() { CChar(&quot;;&quot;) })&#xA;Dim emSize As Integer = 8&#xA;Dim newarr_Split_S9_Comment () As String &#xA;newarr_Split_S9_Comment= arr_Split_S9_Comment&#xA;Dim document As PdfSharp.Pdf.PdfDocument =  PdfSharp.Pdf.IO.PdfReader.Open(filename)&#xA;count=document.PageCount&#xA;Dim font As PdfSharp.Drawing.XFont = New PdfSharp.Drawing.XFont(&quot;Times New Roman&quot;, emSize, PdfSharp.Drawing.XFontStyle.Bold)&#xA;If document.Version &lt; 14 Then document.Version = 14&#xA;Dim page As PdfSharp.Pdf.PdfPage = document.Pages(0)&#xA;'page.TrimMargins.Top=20&#xA;Dim gfx As PdfSharp.Drawing.XGraphics = PdfSharp.Drawing.XGraphics.FromPdfPage(page,PdfSharp.Drawing.XGraphicsPdfPageOptions.Prepend)&#xA;Dim size As PdfSharp.Drawing.XSize = gfx.MeasureString(watermark, font)&#xA;Dim format As PdfSharp.Drawing.XStringFormat = New PdfSharp.Drawing.XStringFormat()&#xA;format.Alignment=PdfSharp.Drawing.XStringAlignment.Near&#xA;format.LineAlignment=PdfSharp.Drawing.XLineAlignment.Near&#xA;Dim pen As PdfSharp.Drawing.XPen= New PdfSharp.Drawing.XPen(PdfSharp.Drawing.XColors.Tomato)&#xA;Dim brush As PdfSharp.Drawing.XBrush= New PdfSharp.Drawing.XSolidBrush(PdfSharp.Drawing.XColor.FromArgb(255,255,0,0))&#xA;'gfx.DrawRoundedRectangle(PdfSharp.Drawing.XPens.Tomato, 226, 2, 305, 22, 20, 23)&#xA;&#x9;gfx.DrawString(stamp1,font,brush,New PdfSharp.Drawing.XPoint(170,1),format)&#xA;&#x9;If arrMultiLineComment.Count &gt; 0 Then&#xA;&#x9;&#x9;gfx.DrawString(&quot;SEE BACK PAGE&quot;,font,brush,New PdfSharp.Drawing.XPoint(170,10),format)&#xA;&#x9;&#x9;document.AddPage()&#xA;&#x9;&#x9;Dim lastpage As  PdfSharp.Pdf.PdfPage= document.Pages(count)&#xA;&#x9;&#x9;Dim emSize2 As Integer = 14&#xA;&#x9;&#x9;Dim font2 As PdfSharp.Drawing.XFont = New PdfSharp.Drawing.XFont(&quot;Times New Roman&quot;, emSize2, PdfSharp.Drawing.XFontStyle.Bold)&#xA;&#x9;&#x9;gfx  = PdfSharp.Drawing.XGraphics.FromPdfPage(lastpage,PdfSharp.Drawing.XGraphicsPdfPageOptions.Prepend)&#xA;&#x9;&#x9;gfx.DrawString(stamp1,font,brush,New PdfSharp.Drawing.XPoint(170,1),format)&#xA;&#x9;&#x9;For Each item As String In arrMultiLineComment:&#xA;&#x9;&#x9;&#x9;If (counter.Equals(0)) Then&#xA;&#x9;&#x9;&#x9;y_cor = 10&#xA;&#x9;&#x9;&#x9;gfx.DrawString(arrMultiLineComment(counter),font,brush,New PdfSharp.Drawing.XPoint(250,y_cor),format)&#xA;&#x9;&#x9;&#x9;Else&#xA;&#x9;&#x9;&#x9;y_cor = (counter * 10)+10&#xA;&#x9;&#x9;&#x9;gfx.DrawString(arrMultiLineComment(counter),font,brush,New PdfSharp.Drawing.XPoint(250,y_cor),format)&#xA;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;counter = counter+1&#xA;&#x9;&#x9;&#x9;Next&#xA;&#x9;End If&#xA;&#xA;For Each item As String In newarr_Split_S9_Comment:&#xA;&#x9;If (split_s9_comment_counter.Equals(0)) Then&#xA;&#x9;&#x9;&#x9;y_cor = y_cor+20&#xA;&#x9;&#x9;&#x9;gfx.DrawString(newarr_Split_S9_Comment(split_s9_comment_counter),font,brush,New PdfSharp.Drawing.XPoint(170,y_cor),format)&#xA;&#x9;&#x9;&#x9;Else&#xA;&#x9;&#x9;&#x9;y_cor = y_cor+20&#xA;&#x9;&#x9;&#x9;gfx.DrawString(newarr_Split_S9_Comment(split_s9_comment_counter),font,brush,New PdfSharp.Drawing.XPoint(170,y_cor),format)&#xA;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;split_s9_comment_counter = split_s9_comment_counter+1&#xA;Next&#xA;&#x9;&#xA;&#xA;&#xA;'gfx.DrawString(watermarkP,font,brush,New PdfSharp.Drawing.XPoint(200,3),format)&#xA;'gfx.DrawString(watermarkE,font,brush,New PdfSharp.Drawing.XPoint(240,3),format)&#xA;'gfx.DrawString(watermarkM,font,brush,New PdfSharp.Drawing.XPoint(280,3),format)&#xA;'gfx.DrawString(watermarkpub,font,brush,New PdfSharp.Drawing.XPoint(330,3),format)&#xA;'gfx.DrawString(Watermarkmos,font,brush,New PdfSharp.Drawing.XPoint(425,3),format)&#xA;Dim fs As System.IO.FileStream = New FileStream(filename, FileMode.OpenOrCreate, FileAccess.ReadWrite)&#xA;document.Save(Destinationfolder)&#xA;Catch e As IO.IOException&#xA;&#x9;arg_failtostamp = True&#xA;&#x9;strException = e.ToString&#xA;&#xA;'Dim strFile As String = &quot;C:\Users\skore\Desktop\Stamping\Exception log file\ErrorLog_&quot; &amp; DateTime.Today.ToString(&quot;yyyy-MM-dd&quot;) &amp; &quot;.txt&quot;&#xA;'Dim sw As StreamWriter&#xA;'Dim fs As FileStream = Nothing&#xA;&#xA;'If (Not File.Exists(strFile)) Then&#xA; '   Try&#xA;      ' fs = File.Create(strFile)&#xA;       'sw = File.AppendText(strFile)&#xA;       'sw.WriteLine(&quot;Start Error Log for today&quot;)&#xA;&#xA;    'Catch ex As Exception&#xA;     '   MsgBox(&quot;Error Creating Log File&quot;)&#xA;    'End Try&#xA;'Else&#xA;    'sw = File.AppendText(strFile)&#xA;'sw.WriteLine(Environment.NewLine)&#xA;    'sw.WriteLine(tempfaname &amp; &quot;;&quot; &amp; tempinvnum &amp; &quot;;&quot; &amp; tempamount &amp; &quot;;&quot; &amp; temppdfpath &amp; &quot;;&quot; &amp; DateTime.Now &amp; &quot;;&quot; &amp;&quot;Can not stamp the PDF&quot;)&#xA;&#xA;    'sw.Close()&#xA;'End If&#xA;End Try" DisplayName="Invoke code" sap:VirtualizedContainerService.HintSize="334,164" sap2010:WorkflowViewState.IdRef="InvokeCode_6">
            <ui:InvokeCode.Arguments>
              <InArgument x:TypeArguments="x:String" x:Key="OutputPdfFilePath">[in_folderpath+"\manifest\"+currentdate+"\POUT_BOT"+System.DateTime.Now.ToString("yyyyMMdd")+"\"+var_filename]</InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="InputPdfFilePath">[var_compilefile]</InArgument>
              <InOutArgument x:TypeArguments="x:Boolean" x:Key="arg_failtostamp">[failtostamp]</InOutArgument>
              <InArgument x:TypeArguments="x:Int32" x:Key="count" />
              <InArgument x:TypeArguments="x:String" x:Key="Stamptext">[stampcomment]</InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="MultiLineStampComment">[strComment]</InArgument>
              <InArgument x:TypeArguments="x:Int32" x:Key="introwcount">0</InArgument>
              <OutArgument x:TypeArguments="x:String" x:Key="strException">[varException]</OutArgument>
              <InArgument x:TypeArguments="s:String[]" x:Key="arr_Split_S9_Comment">[arr_Split_S9_Comment]</InArgument>
            </ui:InvokeCode.Arguments>
          </ui:InvokeCode>
        </Sequence>
      </If.Then>
      <If.Else>
        <Sequence sap:VirtualizedContainerService.HintSize="376,387" sap2010:WorkflowViewState.IdRef="Sequence_18">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_2" Level="Info" Message="[&quot;FA Action : &quot; + str_Fa_Action]" />
          <ui:InvokeCode ContinueOnError="{x:Null}" Code="Try&#xA;Dim Destinationfolder As String = OutputPdfFilePath&#xA;Dim filename As String = InputPdfFilePath&#xA;Dim y_cor As Double&#xA;Dim counter As Integer = 0&#xA;'Dim Top as Integer = 100&#xA;Dim stamp1 As String =Stamptext&#xA;'Dim watermarkC As String =WatermarkClientcode&#xA;'Dim watermarkP As String = Watermarkproductcode&#xA;'Dim watermarkE As String = WatermarkEST&#xA;'Dim watermarkM As String = WatermarkMediacode&#xA;'Dim watermarkpub As String = Watermarkpubcode&#xA;'Dim watermatkmos As String = Watermarkmos&#xA;Dim watermark As String = stamp1&#xA;Dim commentrowcount As Integer = introwcount&#xA;Dim arrMultiLineComment () As String = {MultiLineStampComment}&#xA;arrMultiLineComment=MultiLineStampComment.Split(New [Char]() { CChar(&quot;;&quot;) })&#xA;Dim emSize As Integer = 8&#xA;Dim document As PdfSharp.Pdf.PdfDocument =  PdfSharp.Pdf.IO.PdfReader.Open(filename)&#xA;count=document.PageCount&#xA;Dim font As PdfSharp.Drawing.XFont = New PdfSharp.Drawing.XFont(&quot;Times New Roman&quot;, emSize, PdfSharp.Drawing.XFontStyle.Bold)&#xA;If document.Version &lt; 14 Then document.Version = 14&#xA;Dim page As PdfSharp.Pdf.PdfPage = document.Pages(0)&#xA;'page.TrimMargins.Top=20&#xA;Dim gfx As PdfSharp.Drawing.XGraphics = PdfSharp.Drawing.XGraphics.FromPdfPage(page,PdfSharp.Drawing.XGraphicsPdfPageOptions.Prepend)&#xA;Dim size As PdfSharp.Drawing.XSize = gfx.MeasureString(watermark, font)&#xA;Dim format As PdfSharp.Drawing.XStringFormat = New PdfSharp.Drawing.XStringFormat()&#xA;format.Alignment=PdfSharp.Drawing.XStringAlignment.Near&#xA;format.LineAlignment=PdfSharp.Drawing.XLineAlignment.Near&#xA;Dim pen As PdfSharp.Drawing.XPen= New PdfSharp.Drawing.XPen(PdfSharp.Drawing.XColors.Tomato)&#xA;Dim brush As PdfSharp.Drawing.XBrush= New PdfSharp.Drawing.XSolidBrush(PdfSharp.Drawing.XColor.FromArgb(255,255,0,0))&#xA;'gfx.DrawRoundedRectangle(PdfSharp.Drawing.XPens.Tomato, 226, 2, 305, 22, 20, 23)&#xA;&#x9;gfx.DrawString(stamp1,font,brush,New PdfSharp.Drawing.XPoint(170,1),format)&#xA;&#x9;If arrMultiLineComment.Count &gt; 0 Then&#xA;&#x9;&#x9;gfx.DrawString(&quot;SEE BACK PAGE&quot;,font,brush,New PdfSharp.Drawing.XPoint(170,10),format)&#xA;&#x9;&#x9;document.AddPage()&#xA;&#x9;&#x9;Dim lastpage As  PdfSharp.Pdf.PdfPage= document.Pages(count)&#xA;&#x9;&#x9;Dim emSize2 As Integer = 14&#xA;&#x9;&#x9;Dim font2 As PdfSharp.Drawing.XFont = New PdfSharp.Drawing.XFont(&quot;Times New Roman&quot;, emSize2, PdfSharp.Drawing.XFontStyle.Bold)&#xA;&#x9;&#x9;gfx  = PdfSharp.Drawing.XGraphics.FromPdfPage(lastpage,PdfSharp.Drawing.XGraphicsPdfPageOptions.Prepend)&#xA;&#x9;&#x9;gfx.DrawString(stamp1,font,brush,New PdfSharp.Drawing.XPoint(170,1),format)&#xA;&#x9;&#x9;For Each item As String In arrMultiLineComment:&#xA;&#x9;&#x9;&#x9;If (counter.Equals(0)) Then&#xA;&#x9;&#x9;&#x9;y_cor = 10&#xA;&#x9;&#x9;&#x9;gfx.DrawString(arrMultiLineComment(counter),font,brush,New PdfSharp.Drawing.XPoint(250,y_cor),format)&#xA;&#x9;&#x9;&#x9;Else&#xA;&#x9;&#x9;&#x9;y_cor = (counter * 10)+10&#xA;&#x9;&#x9;&#x9;gfx.DrawString(arrMultiLineComment(counter),font,brush,New PdfSharp.Drawing.XPoint(250,y_cor),format)&#xA;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;counter = counter+1&#xA;&#x9;&#x9;&#x9;Next&#xA;&#x9;End If&#xA;&#x9;&#xA;&#xA;'gfx.DrawString(watermarkP,font,brush,New PdfSharp.Drawing.XPoint(200,3),format)&#xA;'gfx.DrawString(watermarkE,font,brush,New PdfSharp.Drawing.XPoint(240,3),format)&#xA;'gfx.DrawString(watermarkM,font,brush,New PdfSharp.Drawing.XPoint(280,3),format)&#xA;'gfx.DrawString(watermarkpub,font,brush,New PdfSharp.Drawing.XPoint(330,3),format)&#xA;'gfx.DrawString(Watermarkmos,font,brush,New PdfSharp.Drawing.XPoint(425,3),format)&#xA;Dim fs As System.IO.FileStream = New FileStream(filename, FileMode.OpenOrCreate, FileAccess.ReadWrite)&#xA;document.Save(Destinationfolder)&#xA;Catch e As IO.IOException&#xA;&#x9;arg_failtostamp = True&#xA;&#x9;strException = e.ToString&#xA;&#xA;'Dim strFile As String = &quot;C:\Users\skore\Desktop\Stamping\Exception log file\ErrorLog_&quot; &amp; DateTime.Today.ToString(&quot;yyyy-MM-dd&quot;) &amp; &quot;.txt&quot;&#xA;'Dim sw As StreamWriter&#xA;'Dim fs As FileStream = Nothing&#xA;&#xA;'If (Not File.Exists(strFile)) Then&#xA; '   Try&#xA;      ' fs = File.Create(strFile)&#xA;       'sw = File.AppendText(strFile)&#xA;       'sw.WriteLine(&quot;Start Error Log for today&quot;)&#xA;&#xA;    'Catch ex As Exception&#xA;     '   MsgBox(&quot;Error Creating Log File&quot;)&#xA;    'End Try&#xA;'Else&#xA;    'sw = File.AppendText(strFile)&#xA;'sw.WriteLine(Environment.NewLine)&#xA;    'sw.WriteLine(tempfaname &amp; &quot;;&quot; &amp; tempinvnum &amp; &quot;;&quot; &amp; tempamount &amp; &quot;;&quot; &amp; temppdfpath &amp; &quot;;&quot; &amp; DateTime.Now &amp; &quot;;&quot; &amp;&quot;Can not stamp the PDF&quot;)&#xA;&#xA;    'sw.Close()&#xA;'End If&#xA;End Try" DisplayName="Invoke code" sap:VirtualizedContainerService.HintSize="334,164" sap2010:WorkflowViewState.IdRef="InvokeCode_3">
            <ui:InvokeCode.Arguments>
              <InArgument x:TypeArguments="x:String" x:Key="OutputPdfFilePath">[in_folderpath+"\manifest\"+currentdate+"\POUT_BOT"+System.DateTime.Now.ToString("yyyyMMdd")+"\"+var_filename]</InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="InputPdfFilePath">[var_compilefile]</InArgument>
              <InOutArgument x:TypeArguments="x:Boolean" x:Key="arg_failtostamp">[failtostamp]</InOutArgument>
              <InArgument x:TypeArguments="x:Int32" x:Key="count" />
              <InArgument x:TypeArguments="x:String" x:Key="Stamptext">[stampcomment]</InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="MultiLineStampComment">[strComment]</InArgument>
              <InArgument x:TypeArguments="x:Int32" x:Key="introwcount">0</InArgument>
              <OutArgument x:TypeArguments="x:String" x:Key="strException">[varException]</OutArgument>
            </ui:InvokeCode.Arguments>
          </ui:InvokeCode>
        </Sequence>
      </If.Else>
    </If>
    <WriteLine DisplayName="Write Line" sap:VirtualizedContainerService.HintSize="797,61" sap2010:WorkflowViewState.IdRef="WriteLine_4" Text="[varException]" />
    <Sequence DisplayName="Sequence-Update ReProcess Status to &quot;S&quot;" sap:VirtualizedContainerService.HintSize="797,608" sap2010:WorkflowViewState.IdRef="Sequence_13">
      <Sequence.Variables>
        <Variable x:TypeArguments="x:String" Name="str_Query" />
        <Variable x:TypeArguments="x:String" Name="str_S9_ID" />
        <Variable x:TypeArguments="sd:DataTable" Name="dt_S9_ID" />
      </Sequence.Variables>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <Assign sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_2">
        <Assign.To>
          <OutArgument x:TypeArguments="x:String">[str_Query]</OutArgument>
        </Assign.To>
        <Assign.Value>
          <InArgument x:TypeArguments="x:String">["select S9_ID from OOH_S9_Txn where S9_Log_ID= '"+str_Log_ID+"' order by Log_S9_Run_Date desc"]</InArgument>
        </Assign.Value>
      </Assign>
      <ui:ExecuteQuery ContinueOnError="{x:Null}" TimeoutMS="{x:Null}" CommandType="Text" DataTable="[dt_S9_ID]" DisplayName="Execute Query" ExistingDbConnection="[in_DbConnection]" sap:VirtualizedContainerService.HintSize="334,88" sap2010:WorkflowViewState.IdRef="ExecuteQuery_1" Sql="[str_Query]">
        <ui:ExecuteQuery.Parameters>
          <scg:Dictionary x:TypeArguments="x:String, Argument" />
        </ui:ExecuteQuery.Parameters>
      </ui:ExecuteQuery>
      <Assign sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_3">
        <Assign.To>
          <OutArgument x:TypeArguments="x:String">[str_S9_ID]</OutArgument>
        </Assign.To>
        <Assign.Value>
          <InArgument x:TypeArguments="x:String">[dt_S9_ID.Rows(0).Item(0).ToString]</InArgument>
        </Assign.Value>
      </Assign>
      <Assign sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_1">
        <Assign.To>
          <OutArgument x:TypeArguments="x:String">[str_UpdateQuery]</OutArgument>
        </Assign.To>
        <Assign.Value>
          <InArgument x:TypeArguments="x:String">["Update OOH_S9_Txn Set Log_S9_Status = 'On Alex Server', Log_S9_ReProcessed='S',Log_S9_HasRun = 1 where S9_ID = '"+str_S9_ID+"'"]</InArgument>
        </Assign.Value>
      </Assign>
      <ui:ExecuteNonQuery AffectedRecords="{x:Null}" ContinueOnError="{x:Null}" TimeoutMS="{x:Null}" CommandType="Text" DisplayName="Execute Non Query" ExistingDbConnection="[in_DbConnection]" sap:VirtualizedContainerService.HintSize="334,88" sap2010:WorkflowViewState.IdRef="ExecuteNonQuery_1" Sql="[str_UpdateQuery]">
        <ui:ExecuteNonQuery.Parameters>
          <scg:Dictionary x:TypeArguments="x:String, Argument" />
        </ui:ExecuteNonQuery.Parameters>
      </ui:ExecuteNonQuery>
    </Sequence>
    <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="797,51" sap2010:WorkflowViewState.IdRef="CommentOut_4">
      <ui:CommentOut.Body>
        <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="376,256" sap2010:WorkflowViewState.IdRef="Sequence_11">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:InvokeCode ContinueOnError="{x:Null}" Code="Try&#xA;Dim Destinationfolder As String = OutputPdfFilePath&#xA;Dim filename As String = InputPdfFilePath&#xA;'Dim Top as Integer = 100&#xA;Dim stamp1 As String =Stamptext&#xA;'Dim watermarkC As String =WatermarkClientcode&#xA;'Dim watermarkP As String = Watermarkproductcode&#xA;'Dim watermarkE As String = WatermarkEST&#xA;'Dim watermarkM As String = WatermarkMediacode&#xA;'Dim watermarkpub As String = Watermarkpubcode&#xA;'Dim watermatkmos As String = Watermarkmos&#xA;Dim watermark As String = stamp1&#xA;Dim emSize As Integer = 8&#xA;Dim document As PdfSharp.Pdf.PdfDocument =  PdfSharp.Pdf.IO.PdfReader.Open(filename)&#xA;document.Flatten&#xA;count=document.PageCount&#xA;Dim font As PdfSharp.Drawing.XFont = New PdfSharp.Drawing.XFont(&quot;Times New Roman&quot;, emSize, PdfSharp.Drawing.XFontStyle.Bold)&#xA;If document.Version &lt; 14 Then document.Version = 14&#xA;Dim page As PdfSharp.Pdf.PdfPage = document.Pages(0)&#xA;'page.TrimMargins.Top=20&#xA;Dim gfx As PdfSharp.Drawing.XGraphics = PdfSharp.Drawing.XGraphics.FromPdfPage(page,PdfSharp.Drawing.XGraphicsPdfPageOptions.Prepend)&#xA;Dim size As PdfSharp.Drawing.XSize = gfx.MeasureString(watermark, font)&#xA;Dim format As PdfSharp.Drawing.XStringFormat = New PdfSharp.Drawing.XStringFormat()&#xA;format.Alignment=PdfSharp.Drawing.XStringAlignment.Near&#xA;format.LineAlignment=PdfSharp.Drawing.XLineAlignment.Near&#xA;Dim pen As PdfSharp.Drawing.XPen= New PdfSharp.Drawing.XPen(PdfSharp.Drawing.XColors.Tomato)&#xA;Dim brush As PdfSharp.Drawing.XBrush= New PdfSharp.Drawing.XSolidBrush(PdfSharp.Drawing.XColor.FromArgb(255,255,0,0))&#xA;'gfx.DrawRoundedRectangle(PdfSharp.Drawing.XPens.Tomato, 226, 2, 305, 22, 20, 23)&#xA;gfx.DrawString(stamp1,font,brush,New PdfSharp.Drawing.XPoint(170,1),format)&#xA;'gfx.DrawString(watermarkP,font,brush,New PdfSharp.Drawing.XPoint(200,3),format)&#xA;'gfx.DrawString(watermarkE,font,brush,New PdfSharp.Drawing.XPoint(240,3),format)&#xA;'gfx.DrawString(watermarkM,font,brush,New PdfSharp.Drawing.XPoint(280,3),format)&#xA;'gfx.DrawString(watermarkpub,font,brush,New PdfSharp.Drawing.XPoint(330,3),format)&#xA;'gfx.DrawString(Watermarkmos,font,brush,New PdfSharp.Drawing.XPoint(425,3),format)&#xA;Dim fs As System.IO.FileStream = New FileStream(filename, FileMode.OpenOrCreate, FileAccess.ReadWrite)&#xA;document.Save(Destinationfolder)&#xA;Catch&#xA;arg_failtostamp = True&#xA;'Dim strFile As String = &quot;C:\Users\skore\Desktop\Stamping\Exception log file\ErrorLog_&quot; &amp; DateTime.Today.ToString(&quot;yyyy-MM-dd&quot;) &amp; &quot;.txt&quot;&#xA;'Dim sw As StreamWriter&#xA;'Dim fs As FileStream = Nothing&#xA;&#xA;'If (Not File.Exists(strFile)) Then&#xA; '   Try&#xA;      ' fs = File.Create(strFile)&#xA;       'sw = File.AppendText(strFile)&#xA;       'sw.WriteLine(&quot;Start Error Log for today&quot;)&#xA;&#xA;    'Catch ex As Exception&#xA;     '   MsgBox(&quot;Error Creating Log File&quot;)&#xA;    'End Try&#xA;'Else&#xA;    'sw = File.AppendText(strFile)&#xA;'sw.WriteLine(Environment.NewLine)&#xA;    'sw.WriteLine(tempfaname &amp; &quot;;&quot; &amp; tempinvnum &amp; &quot;;&quot; &amp; tempamount &amp; &quot;;&quot; &amp; temppdfpath &amp; &quot;;&quot; &amp; DateTime.Now &amp; &quot;;&quot; &amp;&quot;Can not stamp the PDF&quot;)&#xA;&#xA;    'sw.Close()&#xA;'End If&#xA;End Try" DisplayName="Invoke code" sap:VirtualizedContainerService.HintSize="334,164" sap2010:WorkflowViewState.IdRef="InvokeCode_5">
            <ui:InvokeCode.Arguments>
              <InArgument x:TypeArguments="x:String" x:Key="OutputPdfFilePath">["C:\Users\NTMGRM.RPA1\Documents\UPProjects\OOH\Data\"+var_filename]</InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="InputPdfFilePath">C:\Users\NTMGRM.RPA1\Documents\UPProjects\OOH\Data\Compilefile\2022-09-09\Kinetic_Invoice_86667-I_27.pdf.pdf</InArgument>
              <InOutArgument x:TypeArguments="x:Boolean" x:Key="arg_failtostamp">[failtostamp]</InOutArgument>
              <InArgument x:TypeArguments="x:Int32" x:Key="count" />
              <InArgument x:TypeArguments="x:String" x:Key="Stamptext">[stampcomment]</InArgument>
            </ui:InvokeCode.Arguments>
          </ui:InvokeCode>
        </Sequence>
      </ui:CommentOut.Body>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:CommentOut>
    <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="797,51" sap2010:WorkflowViewState.IdRef="CommentOut_5">
      <ui:CommentOut.Body>
        <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="526,351" sap2010:WorkflowViewState.IdRef="Sequence_12">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <If Condition="[strop.Length&lt;40]" sap:VirtualizedContainerService.HintSize="484,259" sap2010:WorkflowViewState.IdRef="If_5">
            <If.Then>
              <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke stamp scanned pdf workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_1" UnSafe="False" WorkflowFileName="Process\stamp scanned pdf.xaml">
                <ui:InvokeWorkflowFile.Arguments>
                  <InArgument x:TypeArguments="x:String" x:Key="in_pdfpath">[in_folderpath+"\manifest\"+currentdate+"\POUT_BOT"+System.DateTime.Now.ToString("yyyyMMdd")+"\"+var_filename]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="in_stampcomment">[stampcomment]</InArgument>
                </ui:InvokeWorkflowFile.Arguments>
              </ui:InvokeWorkflowFile>
            </If.Then>
          </If>
        </Sequence>
      </ui:CommentOut.Body>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:CommentOut>
    <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="797,51" sap2010:WorkflowViewState.IdRef="CommentOut_2">
      <ui:CommentOut.Body>
        <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="376,256" sap2010:WorkflowViewState.IdRef="Sequence_9">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:InvokeCode ContinueOnError="{x:Null}" Code="Try&#xA;Dim Destinationfolder As String = OutputPdfFilePath&#xA;Dim filename As String = InputPdfFilePath&#xA;'Dim Top as Integer = 100&#xA;Dim stamp1 As String =Stamptext&#xA;'Dim watermarkC As String =WatermarkClientcode&#xA;'Dim watermarkP As String = Watermarkproductcode&#xA;'Dim watermarkE As String = WatermarkEST&#xA;'Dim watermarkM As String = WatermarkMediacode&#xA;'Dim watermarkpub As String = Watermarkpubcode&#xA;'Dim watermatkmos As String = Watermarkmos&#xA;'Dim watermark As String = watermarkC+watermarkP+watermarkE+watermarkM&#xA;'Dim emSize As Integer = 8&#xA;Dim document As PdfSharp.Pdf.PdfDocument =  PdfSharp.Pdf.IO.PdfReader.Open(filename)&#xA;count=document.PageCount&#xA;Dim font As PdfSharp.Drawing.XFont = New PdfSharp.Drawing.XFont(&quot;Times New Roman&quot;, emSize, PdfSharp.Drawing.XFontStyle.Bold)&#xA;If document.Version &lt; 14 Then document.Version = 14&#xA;Dim page As PdfSharp.Pdf.PdfPage = document.Pages(0)&#xA;'page.TrimMargins.Top=20&#xA;Dim gfx As PdfSharp.Drawing.XGraphics = PdfSharp.Drawing.XGraphics.FromPdfPage(page,PdfSharp.Drawing.XGraphicsPdfPageOptions.Prepend)&#xA;Dim size As PdfSharp.Drawing.XSize = gfx.MeasureString(watermark, font)&#xA;Dim format As PdfSharp.Drawing.XStringFormat = New PdfSharp.Drawing.XStringFormat()&#xA;format.Alignment=PdfSharp.Drawing.XStringAlignment.Near&#xA;format.LineAlignment=PdfSharp.Drawing.XLineAlignment.Near&#xA;Dim pen As PdfSharp.Drawing.XPen= New PdfSharp.Drawing.XPen(PdfSharp.Drawing.XColors.Tomato)&#xA;Dim brush As PdfSharp.Drawing.XBrush= New PdfSharp.Drawing.XSolidBrush(PdfSharp.Drawing.XColor.FromArgb(255,255,0,0))&#xA;'gfx.DrawRoundedRectangle(PdfSharp.Drawing.XPens.Tomato, 226, 2, 305, 22, 20, 23)&#xA;gfx.DrawString(stamp1,font,brush,New PdfSharp.Drawing.XPoint(170,3),format)&#xA;'gfx.DrawString(watermarkP,font,brush,New PdfSharp.Drawing.XPoint(200,3),format)&#xA;'gfx.DrawString(watermarkE,font,brush,New PdfSharp.Drawing.XPoint(240,3),format)&#xA;'gfx.DrawString(watermarkM,font,brush,New PdfSharp.Drawing.XPoint(280,3),format)&#xA;'gfx.DrawString(watermarkpub,font,brush,New PdfSharp.Drawing.XPoint(330,3),format)&#xA;'gfx.DrawString(Watermarkmos,font,brush,New PdfSharp.Drawing.XPoint(425,3),format)&#xA;Dim fs As System.IO.FileStream = New FileStream(filename, FileMode.OpenOrCreate, FileAccess.ReadWrite)&#xA;document.Save(Destinationfolder)&#xA;Catch&#xA;arg_failtostamp = True&#xA;'Dim strFile As String = &quot;C:\Users\skore\Desktop\Stamping\Exception log file\ErrorLog_&quot; &amp; DateTime.Today.ToString(&quot;yyyy-MM-dd&quot;) &amp; &quot;.txt&quot;&#xA;'Dim sw As StreamWriter&#xA;'Dim fs As FileStream = Nothing&#xA;&#xA;'If (Not File.Exists(strFile)) Then&#xA; '   Try&#xA;      ' fs = File.Create(strFile)&#xA;       'sw = File.AppendText(strFile)&#xA;       'sw.WriteLine(&quot;Start Error Log for today&quot;)&#xA;&#xA;    'Catch ex As Exception&#xA;     '   MsgBox(&quot;Error Creating Log File&quot;)&#xA;    'End Try&#xA;'Else&#xA;    'sw = File.AppendText(strFile)&#xA;'sw.WriteLine(Environment.NewLine)&#xA;    'sw.WriteLine(tempfaname &amp; &quot;;&quot; &amp; tempinvnum &amp; &quot;;&quot; &amp; tempamount &amp; &quot;;&quot; &amp; temppdfpath &amp; &quot;;&quot; &amp; DateTime.Now &amp; &quot;;&quot; &amp;&quot;Can not stamp the PDF&quot;)&#xA;&#xA;    'sw.Close()&#xA;'End If&#xA;End Try" DisplayName="Invoke code" sap:VirtualizedContainerService.HintSize="334,164" sap2010:WorkflowViewState.IdRef="InvokeCode_4">
            <ui:InvokeCode.Arguments>
              <InArgument x:TypeArguments="x:String" x:Key="OutputPdfFilePath">[in_folderpath+"newspapermanifest\"+currentdate+"\"+var_filename]</InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="InputPdfFilePath">[var_compilefile]</InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="WatermarkClientcode">["C: "+var_c]</InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="Watermarkproductcode">["P: "+varp]</InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="WatermarkEST">["E: "+var_e]</InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="WatermarkMediacode">["M: "+var_mcode]</InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="Watermarkpubcode">["Pub: "+var_pubcode]</InArgument>
              <InOutArgument x:TypeArguments="x:Boolean" x:Key="arg_failtostamp" />
              <InArgument x:TypeArguments="x:Int32" x:Key="count" />
              <InArgument x:TypeArguments="x:String" x:Key="Watermarkmos">["Rep Code: "+var_repcode]</InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="Stamptext">[stampcomment]</InArgument>
            </ui:InvokeCode.Arguments>
          </ui:InvokeCode>
        </Sequence>
      </ui:CommentOut.Body>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:CommentOut>
    <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="797,51" sap2010:WorkflowViewState.IdRef="CommentOut_1">
      <ui:CommentOut.Body>
        <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="376,636" sap2010:WorkflowViewState.IdRef="Sequence_8">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:PathExists DisplayName="Path Exists" Exists="[boolmagzinemanifestfolderexist]" sap:VirtualizedContainerService.HintSize="334,89" sap2010:WorkflowViewState.IdRef="PathExists_2" Path="[in_folderpath+&quot;\magzinemanifest\&quot;+currentdate]" PathType="File" />
          <WriteLine DisplayName="Write Line" sap:VirtualizedContainerService.HintSize="334,61" sap2010:WorkflowViewState.IdRef="WriteLine_1" Text="[in_folderpath]" />
          <If Condition="[boolmagzinemanifestfolderexist]" sap:VirtualizedContainerService.HintSize="334,51" sap2010:WorkflowViewState.IdRef="If_3">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <If.Then>
              <Sequence sap:VirtualizedContainerService.HintSize="200,83" sap2010:WorkflowViewState.IdRef="Sequence_6">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
              </Sequence>
            </If.Then>
            <If.Else>
              <Sequence sap:VirtualizedContainerService.HintSize="376,171" sap2010:WorkflowViewState.IdRef="Sequence_7">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <ui:CreateDirectory ContinueOnError="{x:Null}" DisplayName="Create Folder" sap:VirtualizedContainerService.HintSize="334,79" sap2010:WorkflowViewState.IdRef="CreateDirectory_2" Path="[in_folderpath+&quot;\magzinemanifest\&quot;+currentdate]" />
              </Sequence>
            </If.Else>
          </If>
          <If Condition="[var_mcode.ToLower.Contains(&quot;n&quot;)]" sap:VirtualizedContainerService.HintSize="334,51" sap2010:WorkflowViewState.IdRef="If_2">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <If.Then>
              <Sequence sap:VirtualizedContainerService.HintSize="376,256" sap2010:WorkflowViewState.IdRef="Sequence_4">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <ui:InvokeCode ContinueOnError="{x:Null}" Code="Try&#xA;Dim Destinationfolder As String = OutputPdfFilePath&#xA;Dim filename As String = InputPdfFilePath&#xA;'Dim Top as Integer = 100&#xA;Dim watermarkC As String =Watermarkclientcode&#xA;Dim watermarkP As String = Watermarkproductcode&#xA;Dim watermarkE As String = WatermarkEST&#xA;Dim watermarkM As String = WatermarkMediacode&#xA;Dim watermarkpub As String = Watermarkpubcode&#xA;Dim watermatkmos As String = Watermarkmos&#xA;Dim watermark As String = watermarkC+watermarkP+watermarkE+watermarkM&#xA;Dim emSize As Integer = 8&#xA;Dim document As PdfSharp.Pdf.PdfDocument =  PdfSharp.Pdf.IO.PdfReader.Open(filename)&#xA;count=document.PageCount&#xA;Dim font As PdfSharp.Drawing.XFont = New PdfSharp.Drawing.XFont(&quot;Times New Roman&quot;, emSize, PdfSharp.Drawing.XFontStyle.Bold)&#xA;If document.Version &lt; 14 Then document.Version = 14&#xA;Dim page As PdfSharp.Pdf.PdfPage = document.Pages(0)&#xA;'page.TrimMargins.Top=20&#xA;Dim gfx As PdfSharp.Drawing.XGraphics = PdfSharp.Drawing.XGraphics.FromPdfPage(page,PdfSharp.Drawing.XGraphicsPdfPageOptions.Prepend)&#xA;Dim size As PdfSharp.Drawing.XSize = gfx.MeasureString(watermark, font)&#xA;Dim format As PdfSharp.Drawing.XStringFormat = New PdfSharp.Drawing.XStringFormat()&#xA;format.Alignment=PdfSharp.Drawing.XStringAlignment.Near&#xA;format.LineAlignment=PdfSharp.Drawing.XLineAlignment.Near&#xA;Dim pen As PdfSharp.Drawing.XPen= New PdfSharp.Drawing.XPen(PdfSharp.Drawing.XColors.Tomato)&#xA;Dim brush As PdfSharp.Drawing.XBrush= New PdfSharp.Drawing.XSolidBrush(PdfSharp.Drawing.XColor.FromArgb(255,255,0,0))&#xA;'gfx.DrawRoundedRectangle(PdfSharp.Drawing.XPens.Tomato, 226, 2, 305, 22, 20, 23)&#xA;gfx.DrawString(watermarkC,font,brush,New PdfSharp.Drawing.XPoint(170,3),format)&#xA;gfx.DrawString(watermarkP,font,brush,New PdfSharp.Drawing.XPoint(200,3),format)&#xA;gfx.DrawString(watermarkE,font,brush,New PdfSharp.Drawing.XPoint(240,3),format)&#xA;gfx.DrawString(watermarkM,font,brush,New PdfSharp.Drawing.XPoint(280,3),format)&#xA;gfx.DrawString(watermarkpub,font,brush,New PdfSharp.Drawing.XPoint(330,3),format)&#xA;gfx.DrawString(Watermarkmos,font,brush,New PdfSharp.Drawing.XPoint(425,3),format)&#xA;Dim fs As System.IO.FileStream = New FileStream(filename, FileMode.OpenOrCreate, FileAccess.ReadWrite)&#xA;document.Save(Destinationfolder)&#xA;Catch&#xA;arg_failtostamp = True&#xA;'Dim strFile As String = &quot;C:\Users\skore\Desktop\Stamping\Exception log file\ErrorLog_&quot; &amp; DateTime.Today.ToString(&quot;yyyy-MM-dd&quot;) &amp; &quot;.txt&quot;&#xA;'Dim sw As StreamWriter&#xA;'Dim fs As FileStream = Nothing&#xA;&#xA;'If (Not File.Exists(strFile)) Then&#xA; '   Try&#xA;      ' fs = File.Create(strFile)&#xA;       'sw = File.AppendText(strFile)&#xA;       'sw.WriteLine(&quot;Start Error Log for today&quot;)&#xA;&#xA;    'Catch ex As Exception&#xA;     '   MsgBox(&quot;Error Creating Log File&quot;)&#xA;    'End Try&#xA;'Else&#xA;    'sw = File.AppendText(strFile)&#xA;'sw.WriteLine(Environment.NewLine)&#xA;    'sw.WriteLine(tempfaname &amp; &quot;;&quot; &amp; tempinvnum &amp; &quot;;&quot; &amp; tempamount &amp; &quot;;&quot; &amp; temppdfpath &amp; &quot;;&quot; &amp; DateTime.Now &amp; &quot;;&quot; &amp;&quot;Can not stamp the PDF&quot;)&#xA;&#xA;    'sw.Close()&#xA;'End If&#xA;End Try" DisplayName="Invoke code" sap:VirtualizedContainerService.HintSize="334,164" sap2010:WorkflowViewState.IdRef="InvokeCode_1">
                  <ui:InvokeCode.Arguments>
                    <InArgument x:TypeArguments="x:String" x:Key="OutputPdfFilePath">[in_folderpath+"newspapermanifest\"+currentdate+"\"+var_filename]</InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="InputPdfFilePath">[var_compilefile]</InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="WatermarkClientcode">["C: "+var_c]</InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="Watermarkproductcode">["P: "+varp]</InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="WatermarkEST">["E: "+var_e]</InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="WatermarkMediacode">["M: "+var_mcode]</InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="Watermarkpubcode">["Pub: "+var_pubcode]</InArgument>
                    <InOutArgument x:TypeArguments="x:Boolean" x:Key="arg_failtostamp" />
                    <InArgument x:TypeArguments="x:Int32" x:Key="count" />
                    <InArgument x:TypeArguments="x:String" x:Key="Watermarkmos">["Rep Code: "+var_repcode]</InArgument>
                  </ui:InvokeCode.Arguments>
                </ui:InvokeCode>
              </Sequence>
            </If.Then>
            <If.Else>
              <Sequence sap:VirtualizedContainerService.HintSize="376,256" sap2010:WorkflowViewState.IdRef="Sequence_5">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <ui:InvokeCode ContinueOnError="{x:Null}" Code="Try&#xA;Dim Destinationfolder As String = OutputPdfFilePath&#xA;Dim filename As String = InputPdfFilePath&#xA;'Dim Top as Integer = 100&#xA;Dim watermarkC As String =Watermarkclientcode&#xA;Dim watermarkP As String = Watermarkproductcode&#xA;Dim watermarkE As String = WatermarkEST&#xA;Dim watermarkM As String = WatermarkMediacode&#xA;Dim watermarkpub As String = Watermarkpubcode&#xA;Dim watermatkmos As String = Watermarkmos&#xA;Dim watermark As String = watermarkC+watermarkP+watermarkE+watermarkM&#xA;Dim emSize As Integer = 8&#xA;Dim document As PdfSharp.Pdf.PdfDocument =  PdfSharp.Pdf.IO.PdfReader.Open(filename)&#xA;count=document.PageCount&#xA;Dim font As PdfSharp.Drawing.XFont = New PdfSharp.Drawing.XFont(&quot;Times New Roman&quot;, emSize, PdfSharp.Drawing.XFontStyle.Bold)&#xA;If document.Version &lt; 14 Then document.Version = 14&#xA;Dim page As PdfSharp.Pdf.PdfPage = document.Pages(0)&#xA;'page.TrimMargins.Top=20&#xA;Dim gfx As PdfSharp.Drawing.XGraphics = PdfSharp.Drawing.XGraphics.FromPdfPage(page,PdfSharp.Drawing.XGraphicsPdfPageOptions.Prepend)&#xA;Dim size As PdfSharp.Drawing.XSize = gfx.MeasureString(watermark, font)&#xA;Dim format As PdfSharp.Drawing.XStringFormat = New PdfSharp.Drawing.XStringFormat()&#xA;format.Alignment=PdfSharp.Drawing.XStringAlignment.Near&#xA;format.LineAlignment=PdfSharp.Drawing.XLineAlignment.Near&#xA;Dim pen As PdfSharp.Drawing.XPen= New PdfSharp.Drawing.XPen(PdfSharp.Drawing.XColors.Tomato)&#xA;Dim brush As PdfSharp.Drawing.XBrush= New PdfSharp.Drawing.XSolidBrush(PdfSharp.Drawing.XColor.FromArgb(255,255,0,0))&#xA;'gfx.DrawRoundedRectangle(PdfSharp.Drawing.XPens.Tomato, 226, 2, 305, 22, 20, 23)&#xA;gfx.DrawString(watermarkC,font,brush,New PdfSharp.Drawing.XPoint(170,3),format)&#xA;gfx.DrawString(watermarkP,font,brush,New PdfSharp.Drawing.XPoint(200,3),format)&#xA;gfx.DrawString(watermarkE,font,brush,New PdfSharp.Drawing.XPoint(240,3),format)&#xA;gfx.DrawString(watermarkM,font,brush,New PdfSharp.Drawing.XPoint(280,3),format)&#xA;gfx.DrawString(watermarkpub,font,brush,New PdfSharp.Drawing.XPoint(330,3),format)&#xA;gfx.DrawString(Watermarkmos,font,brush,New PdfSharp.Drawing.XPoint(425,3),format)&#xA;Dim fs As System.IO.FileStream = New FileStream(filename, FileMode.OpenOrCreate, FileAccess.ReadWrite)&#xA;document.Save(Destinationfolder)&#xA;Catch&#xA;arg_failtostamp = True&#xA;'Dim strFile As String = &quot;C:\Users\skore\Desktop\Stamping\Exception log file\ErrorLog_&quot; &amp; DateTime.Today.ToString(&quot;yyyy-MM-dd&quot;) &amp; &quot;.txt&quot;&#xA;'Dim sw As StreamWriter&#xA;'Dim fs As FileStream = Nothing&#xA;&#xA;'If (Not File.Exists(strFile)) Then&#xA; '   Try&#xA;      ' fs = File.Create(strFile)&#xA;       'sw = File.AppendText(strFile)&#xA;       'sw.WriteLine(&quot;Start Error Log for today&quot;)&#xA;&#xA;    'Catch ex As Exception&#xA;     '   MsgBox(&quot;Error Creating Log File&quot;)&#xA;    'End Try&#xA;'Else&#xA;    'sw = File.AppendText(strFile)&#xA;'sw.WriteLine(Environment.NewLine)&#xA;    'sw.WriteLine(tempfaname &amp; &quot;;&quot; &amp; tempinvnum &amp; &quot;;&quot; &amp; tempamount &amp; &quot;;&quot; &amp; temppdfpath &amp; &quot;;&quot; &amp; DateTime.Now &amp; &quot;;&quot; &amp;&quot;Can not stamp the PDF&quot;)&#xA;&#xA;    'sw.Close()&#xA;'End If&#xA;End Try" DisplayName="Invoke code" sap:VirtualizedContainerService.HintSize="334,164" sap2010:WorkflowViewState.IdRef="InvokeCode_2">
                  <ui:InvokeCode.Arguments>
                    <InArgument x:TypeArguments="x:String" x:Key="OutputPdfFilePath">[in_folderpath+"magzinemanifest\"+currentdate+"\"+var_filename]</InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="InputPdfFilePath">[var_compilefile]</InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="WatermarkClientcode">["C: "+var_c]</InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="Watermarkproductcode">["P: "+varp]</InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="WatermarkEST">["E: "+var_e]</InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="WatermarkMediacode">["M: "+var_mcode]</InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="Watermarkpubcode">["Pub: "+var_pubcode]</InArgument>
                    <InOutArgument x:TypeArguments="x:Boolean" x:Key="arg_failtostamp" />
                    <InArgument x:TypeArguments="x:Int32" x:Key="count" />
                    <InArgument x:TypeArguments="x:String" x:Key="Watermarkmos">["Rep Code: "+var_repcode]</InArgument>
                  </ui:InvokeCode.Arguments>
                </ui:InvokeCode>
              </Sequence>
            </If.Else>
          </If>
          <ui:AppendLine DisplayName="Append Line" FileName="C:\Users\NTMGRM.RPA1\Desktop\Performer data.txt" sap:VirtualizedContainerService.HintSize="334,132" sap2010:WorkflowViewState.IdRef="AppendLine_1" Text="[in_folderpath+&quot;newspapermanifest\&quot;+currentdate+&quot;\&quot;+var_filename+&quot;,&quot;+var_filename+Environment.NewLine]" UseDefaultEncoding="False" />
        </Sequence>
      </ui:CommentOut.Body>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:CommentOut>
  </Sequence>
</Activity>