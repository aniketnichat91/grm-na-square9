<Activity mc:Ignorable="sap sap2010" x:Class="teamp_Stamp_PDF_Reusable" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_transitem" Type="InArgument(ui:QueueItem)" />
    <x:Property Name="var_failtostamp" Type="OutArgument(x:Boolean)" />
    <x:Property Name="in_FordPendingpdffilepath" Type="InArgument(x:String)" />
    <x:Property Name="in_FordPaidpdffilepath" Type="InArgument(x:String)" />
    <x:Property Name="in_OutputPendingPdfFilePath" Type="InArgument(x:String)" />
    <x:Property Name="in_OutputPaidPdfFilePath" Type="InArgument(x:String)" />
    <x:Property Name="in_dbexistigconnnection" Type="InArgument(ui:DatabaseConnection)" />
    <x:Property Name="in_SPPass" Type="InArgument(x:String)" />
    <x:Property Name="in_SPUser" Type="InArgument(x:String)" />
    <x:Property Name="in_tablename" Type="InArgument(x:String)" />
  </x:Members>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>6861,4834</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>teamp_Stamp_PDF_Reusable_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="66">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Activities.DynamicUpdate</x:String>
      <x:String>UiPath.Database</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>System.Runtime.InteropServices</x:String>
      <x:String>UiPath.Database.Activities</x:String>
      <x:String>Microsoft.Exchange.WebServices.Data</x:String>
      <x:String>UiPath.Mail</x:String>
      <x:String>System.Security</x:String>
      <x:String>UiPath.Mail.Exchange.Activities</x:String>
      <x:String>System.Reflection</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="66">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>Microsoft.Bcl.AsyncInterfaces</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>UiPath.Mail</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationCore</AssemblyReference>
      <AssemblyReference>UiPath.Database</AssemblyReference>
      <AssemblyReference>UiPath.Database.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.Exchange.WebServices</AssemblyReference>
      <AssemblyReference>UiPath.Mail.Activities</AssemblyReference>
      <AssemblyReference>UiPathTeam.SharePoint</AssemblyReference>
      <AssemblyReference>OfficeDevPnP.Core</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="Stamp_PDF" sap:VirtualizedContainerService.HintSize="6871,4729" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:Int32" Name="var_pagecount" />
      <Variable x:TypeArguments="x:String" Name="varException" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="6829,91" sap2010:WorkflowViewState.IdRef="LogMessage_1" Level="Info" Message="[&quot;Stamping the PDF&quot;]" />
    <Sequence sap:VirtualizedContainerService.HintSize="6829,4506" sap2010:WorkflowViewState.IdRef="Sequence_2">
      <Sequence.Variables>
        <Variable x:TypeArguments="x:String" Name="var_Status" />
        <Variable x:TypeArguments="x:String" Name="var_MediaLookUp" />
        <Variable x:TypeArguments="x:String" Name="var_C" />
        <Variable x:TypeArguments="x:String" Name="var_P" />
        <Variable x:TypeArguments="x:String" Name="var_E" />
        <Variable x:TypeArguments="x:String" Name="var_PUBLICATON_CODE" />
        <Variable x:TypeArguments="x:String" Name="var_pdfname" />
        <Variable x:TypeArguments="x:String" Name="var_MOS" />
        <Variable x:TypeArguments="x:String" Name="varagency" />
        <Variable x:TypeArguments="x:String" Name="var_pdffilepath" />
        <Variable x:TypeArguments="x:String" Name="var_fastatus" />
        <Variable x:TypeArguments="x:String" Name="var_isnra" />
        <Variable x:TypeArguments="x:String" Name="var_PDF_Invoice_Date" />
        <Variable x:TypeArguments="x:String" Name="var_Invoice_Num" />
        <Variable x:TypeArguments="x:String" Name="currentdate" />
        <Variable x:TypeArguments="x:String" Name="var_" />
        <Variable x:TypeArguments="x:String" Name="var_Doc_Link" />
        <Variable x:TypeArguments="x:String" Name="var_Buy_Status" />
        <Variable x:TypeArguments="x:String" Name="var_inv_comment" />
        <Variable x:TypeArguments="x:String" Name="var_Comment_S9" />
        <Variable x:TypeArguments="s:String[]" Name="arrCommentS9" />
        <Variable x:TypeArguments="x:Int32" Name="var_comment_line" />
      </Sequence.Variables>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <ui:MultipleAssign DisplayName="Get data from Queue" sap:VirtualizedContainerService.HintSize="6787,780" sap2010:WorkflowViewState.IdRef="MultipleAssign_2">
        <ui:MultipleAssign.AssignOperations>
          <scg:List x:TypeArguments="ui:AssignOperation" Capacity="32">
            <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_19">
              <ui:AssignOperation.To>
                <OutArgument x:TypeArguments="x:String">[var_Status]</OutArgument>
              </ui:AssignOperation.To>
              <ui:AssignOperation.Value>
                <InArgument x:TypeArguments="x:String">[in_transitem.SpecificContent("Status").ToString.Trim]</InArgument>
              </ui:AssignOperation.Value>
            </ui:AssignOperation>
            <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_20">
              <ui:AssignOperation.To>
                <OutArgument x:TypeArguments="x:String">[var_MediaLookUp]</OutArgument>
              </ui:AssignOperation.To>
              <ui:AssignOperation.Value>
                <InArgument x:TypeArguments="x:String">[in_transitem.SpecificContent("MediaLookup").ToString.Trim]</InArgument>
              </ui:AssignOperation.Value>
            </ui:AssignOperation>
            <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_21">
              <ui:AssignOperation.To>
                <OutArgument x:TypeArguments="x:String">[var_C]</OutArgument>
              </ui:AssignOperation.To>
              <ui:AssignOperation.Value>
                <InArgument x:TypeArguments="x:String">[in_transitem.SpecificContent("C").ToString]</InArgument>
              </ui:AssignOperation.Value>
            </ui:AssignOperation>
            <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_22">
              <ui:AssignOperation.To>
                <OutArgument x:TypeArguments="x:String">[var_P]</OutArgument>
              </ui:AssignOperation.To>
              <ui:AssignOperation.Value>
                <InArgument x:TypeArguments="x:String">[in_transitem.SpecificContent("P").ToString]</InArgument>
              </ui:AssignOperation.Value>
            </ui:AssignOperation>
            <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_23">
              <ui:AssignOperation.To>
                <OutArgument x:TypeArguments="x:String">[var_E]</OutArgument>
              </ui:AssignOperation.To>
              <ui:AssignOperation.Value>
                <InArgument x:TypeArguments="x:String">[in_transitem.SpecificContent("E").ToString]</InArgument>
              </ui:AssignOperation.Value>
            </ui:AssignOperation>
            <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_24">
              <ui:AssignOperation.To>
                <OutArgument x:TypeArguments="x:String">[var_PUBLICATON_CODE]</OutArgument>
              </ui:AssignOperation.To>
              <ui:AssignOperation.Value>
                <InArgument x:TypeArguments="x:String">[in_transitem.SpecificContent("PUBLICATION_CODE").ToString]</InArgument>
              </ui:AssignOperation.Value>
            </ui:AssignOperation>
            <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_25">
              <ui:AssignOperation.To>
                <OutArgument x:TypeArguments="x:String">[var_pdfname]</OutArgument>
              </ui:AssignOperation.To>
              <ui:AssignOperation.Value>
                <InArgument x:TypeArguments="x:String">[in_transitem.SpecificContent("Invoice_Name_Link").ToString]</InArgument>
              </ui:AssignOperation.Value>
            </ui:AssignOperation>
            <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_26">
              <ui:AssignOperation.To>
                <OutArgument x:TypeArguments="x:String">[var_MOS]</OutArgument>
              </ui:AssignOperation.To>
              <ui:AssignOperation.Value>
                <InArgument x:TypeArguments="x:String">[in_transitem.SpecificContent("PDF_MOS").ToString]</InArgument>
              </ui:AssignOperation.Value>
            </ui:AssignOperation>
            <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_27">
              <ui:AssignOperation.To>
                <OutArgument x:TypeArguments="x:String">[varagency]</OutArgument>
              </ui:AssignOperation.To>
              <ui:AssignOperation.Value>
                <InArgument x:TypeArguments="x:String">[in_transitem.SpecificContent("Agency").ToString.Trim]</InArgument>
              </ui:AssignOperation.Value>
            </ui:AssignOperation>
            <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_28">
              <ui:AssignOperation.To>
                <OutArgument x:TypeArguments="x:String">[var_pdffilepath]</OutArgument>
              </ui:AssignOperation.To>
              <ui:AssignOperation.Value>
                <InArgument x:TypeArguments="x:String">[in_transitem.SpecificContent("Local_File_Path").ToString.Trim]</InArgument>
              </ui:AssignOperation.Value>
            </ui:AssignOperation>
            <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_29">
              <ui:AssignOperation.To>
                <OutArgument x:TypeArguments="x:String">[var_fastatus]</OutArgument>
              </ui:AssignOperation.To>
              <ui:AssignOperation.Value>
                <InArgument x:TypeArguments="x:String">[in_transitem.SpecificContent("FA Status").ToString.Trim]</InArgument>
              </ui:AssignOperation.Value>
            </ui:AssignOperation>
            <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_30">
              <ui:AssignOperation.To>
                <OutArgument x:TypeArguments="x:String">[var_isnra]</OutArgument>
              </ui:AssignOperation.To>
              <ui:AssignOperation.Value>
                <InArgument x:TypeArguments="x:String">[in_transitem.SpecificContent("IS_NRA").ToString.Trim]</InArgument>
              </ui:AssignOperation.Value>
            </ui:AssignOperation>
            <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_31">
              <ui:AssignOperation.To>
                <OutArgument x:TypeArguments="x:String">[var_PDF_Invoice_Date]</OutArgument>
              </ui:AssignOperation.To>
              <ui:AssignOperation.Value>
                <InArgument x:TypeArguments="x:String">[in_transitem.SpecificContent("PDF_Invoice_Date").ToString.Trim]</InArgument>
              </ui:AssignOperation.Value>
            </ui:AssignOperation>
            <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_32">
              <ui:AssignOperation.To>
                <OutArgument x:TypeArguments="x:String">[var_PDF_Invoice_Date]</OutArgument>
              </ui:AssignOperation.To>
              <ui:AssignOperation.Value>
                <InArgument x:TypeArguments="x:String">[var_PDF_Invoice_Date.Replace(" 00:00:00","")]</InArgument>
              </ui:AssignOperation.Value>
            </ui:AssignOperation>
            <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_33">
              <ui:AssignOperation.To>
                <OutArgument x:TypeArguments="x:String">[var_Invoice_Num]</OutArgument>
              </ui:AssignOperation.To>
              <ui:AssignOperation.Value>
                <InArgument x:TypeArguments="x:String">[in_transitem.SpecificContent("Invoice_Num").ToString.Trim]</InArgument>
              </ui:AssignOperation.Value>
            </ui:AssignOperation>
            <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_34">
              <ui:AssignOperation.To>
                <OutArgument x:TypeArguments="x:String">[var_Doc_Link]</OutArgument>
              </ui:AssignOperation.To>
              <ui:AssignOperation.Value>
                <InArgument x:TypeArguments="x:String">[in_transitem.SpecificContent("Doc_Link").ToString.Trim]</InArgument>
              </ui:AssignOperation.Value>
            </ui:AssignOperation>
            <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_35">
              <ui:AssignOperation.To>
                <OutArgument x:TypeArguments="x:String">[var_Buy_Status]</OutArgument>
              </ui:AssignOperation.To>
              <ui:AssignOperation.Value>
                <InArgument x:TypeArguments="x:String">[in_transitem.SpecificContent("Buy_Status").ToString.Trim]</InArgument>
              </ui:AssignOperation.Value>
            </ui:AssignOperation>
            <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_36">
              <ui:AssignOperation.To>
                <OutArgument x:TypeArguments="x:String">[var_inv_comment]</OutArgument>
              </ui:AssignOperation.To>
              <ui:AssignOperation.Value>
                <InArgument x:TypeArguments="x:String">[in_transitem.SpecificContent("Inv_Comment").ToString.Trim]</InArgument>
              </ui:AssignOperation.Value>
            </ui:AssignOperation>
            <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_37">
              <ui:AssignOperation.To>
                <OutArgument x:TypeArguments="x:String">[var_Comment_S9]</OutArgument>
              </ui:AssignOperation.To>
              <ui:AssignOperation.Value>
                <InArgument x:TypeArguments="x:String">[in_transitem.SpecificContent("Split_S9").ToString.Trim]</InArgument>
              </ui:AssignOperation.Value>
            </ui:AssignOperation>
            <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_38">
              <ui:AssignOperation.To>
                <OutArgument x:TypeArguments="x:String">[var_Comment_S9]</OutArgument>
              </ui:AssignOperation.To>
              <ui:AssignOperation.Value>
                <InArgument x:TypeArguments="x:String">[var_Comment_S9.Replace("\n","\*")]</InArgument>
              </ui:AssignOperation.Value>
            </ui:AssignOperation>
            <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_39">
              <ui:AssignOperation.To>
                <OutArgument x:TypeArguments="s:String[]">[arrCommentS9]</OutArgument>
              </ui:AssignOperation.To>
              <ui:AssignOperation.Value>
                <InArgument x:TypeArguments="s:String[]">[var_Comment_S9.Split("\*".ToCharArray)]</InArgument>
              </ui:AssignOperation.Value>
            </ui:AssignOperation>
            <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_40">
              <ui:AssignOperation.To>
                <OutArgument x:TypeArguments="s:String[]">[arrCommentS9]</OutArgument>
              </ui:AssignOperation.To>
              <ui:AssignOperation.Value>
                <InArgument x:TypeArguments="s:String[]">[arrCommentS9.Where(Function(x) Not String.IsNullOrWhiteSpace(x)).ToArray]</InArgument>
              </ui:AssignOperation.Value>
            </ui:AssignOperation>
            <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_41">
              <ui:AssignOperation.To>
                <OutArgument x:TypeArguments="x:Int32">[var_comment_line]</OutArgument>
              </ui:AssignOperation.To>
              <ui:AssignOperation.Value>
                <InArgument x:TypeArguments="x:Int32">[arrCommentS9.Count]</InArgument>
              </ui:AssignOperation.Value>
            </ui:AssignOperation>
          </scg:List>
        </ui:MultipleAssign.AssignOperations>
      </ui:MultipleAssign>
      <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="6787,221" sap2010:WorkflowViewState.IdRef="CommentOut_1">
        <ui:CommentOut.Body>
          <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="242,143" sap2010:WorkflowViewState.IdRef="Sequence_18">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:MultipleAssign DisplayName="Get data from Queue" sap:VirtualizedContainerService.HintSize="200,51" sap2010:WorkflowViewState.IdRef="MultipleAssign_1">
              <ui:MultipleAssign.AssignOperations>
                <scg:List x:TypeArguments="ui:AssignOperation" Capacity="32">
                  <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_1">
                    <ui:AssignOperation.To>
                      <OutArgument x:TypeArguments="x:String">[var_Status]</OutArgument>
                    </ui:AssignOperation.To>
                    <ui:AssignOperation.Value>
                      <InArgument x:TypeArguments="x:String">[in_transitem.SpecificContent("Status").ToString.Trim]</InArgument>
                    </ui:AssignOperation.Value>
                  </ui:AssignOperation>
                  <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_2">
                    <ui:AssignOperation.To>
                      <OutArgument x:TypeArguments="x:String">[var_MediaLookUp]</OutArgument>
                    </ui:AssignOperation.To>
                    <ui:AssignOperation.Value>
                      <InArgument x:TypeArguments="x:String">[in_transitem.SpecificContent("MediaLookup").ToString.Trim]</InArgument>
                    </ui:AssignOperation.Value>
                  </ui:AssignOperation>
                  <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_3">
                    <ui:AssignOperation.To>
                      <OutArgument x:TypeArguments="x:String">[var_C]</OutArgument>
                    </ui:AssignOperation.To>
                    <ui:AssignOperation.Value>
                      <InArgument x:TypeArguments="x:String">[in_transitem.SpecificContent("C").ToString]</InArgument>
                    </ui:AssignOperation.Value>
                  </ui:AssignOperation>
                  <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_4">
                    <ui:AssignOperation.To>
                      <OutArgument x:TypeArguments="x:String">[var_P]</OutArgument>
                    </ui:AssignOperation.To>
                    <ui:AssignOperation.Value>
                      <InArgument x:TypeArguments="x:String">[in_transitem.SpecificContent("P").ToString]</InArgument>
                    </ui:AssignOperation.Value>
                  </ui:AssignOperation>
                  <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_5">
                    <ui:AssignOperation.To>
                      <OutArgument x:TypeArguments="x:String">[var_E]</OutArgument>
                    </ui:AssignOperation.To>
                    <ui:AssignOperation.Value>
                      <InArgument x:TypeArguments="x:String">[in_transitem.SpecificContent("E").ToString]</InArgument>
                    </ui:AssignOperation.Value>
                  </ui:AssignOperation>
                  <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_6">
                    <ui:AssignOperation.To>
                      <OutArgument x:TypeArguments="x:String">[var_PUBLICATON_CODE]</OutArgument>
                    </ui:AssignOperation.To>
                    <ui:AssignOperation.Value>
                      <InArgument x:TypeArguments="x:String">[in_transitem.SpecificContent("PUBLICATION_CODE").ToString]</InArgument>
                    </ui:AssignOperation.Value>
                  </ui:AssignOperation>
                  <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_7">
                    <ui:AssignOperation.To>
                      <OutArgument x:TypeArguments="x:String">[var_pdfname]</OutArgument>
                    </ui:AssignOperation.To>
                    <ui:AssignOperation.Value>
                      <InArgument x:TypeArguments="x:String">[in_transitem.SpecificContent("Invoice_Name_Link").ToString]</InArgument>
                    </ui:AssignOperation.Value>
                  </ui:AssignOperation>
                  <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_8">
                    <ui:AssignOperation.To>
                      <OutArgument x:TypeArguments="x:String">[var_MOS]</OutArgument>
                    </ui:AssignOperation.To>
                    <ui:AssignOperation.Value>
                      <InArgument x:TypeArguments="x:String">[in_transitem.SpecificContent("PDF_MOS").ToString]</InArgument>
                    </ui:AssignOperation.Value>
                  </ui:AssignOperation>
                  <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_9">
                    <ui:AssignOperation.To>
                      <OutArgument x:TypeArguments="x:String">[varagency]</OutArgument>
                    </ui:AssignOperation.To>
                    <ui:AssignOperation.Value>
                      <InArgument x:TypeArguments="x:String">[in_transitem.SpecificContent("Agency").ToString.Trim]</InArgument>
                    </ui:AssignOperation.Value>
                  </ui:AssignOperation>
                  <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_10">
                    <ui:AssignOperation.To>
                      <OutArgument x:TypeArguments="x:String">[var_pdffilepath]</OutArgument>
                    </ui:AssignOperation.To>
                    <ui:AssignOperation.Value>
                      <InArgument x:TypeArguments="x:String">[in_transitem.SpecificContent("Local_File_Path").ToString.Trim]</InArgument>
                    </ui:AssignOperation.Value>
                  </ui:AssignOperation>
                  <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_11">
                    <ui:AssignOperation.To>
                      <OutArgument x:TypeArguments="x:String">[var_fastatus]</OutArgument>
                    </ui:AssignOperation.To>
                    <ui:AssignOperation.Value>
                      <InArgument x:TypeArguments="x:String">[in_transitem.SpecificContent("FA Status").ToString.Trim]</InArgument>
                    </ui:AssignOperation.Value>
                  </ui:AssignOperation>
                  <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_12">
                    <ui:AssignOperation.To>
                      <OutArgument x:TypeArguments="x:String">[var_isnra]</OutArgument>
                    </ui:AssignOperation.To>
                    <ui:AssignOperation.Value>
                      <InArgument x:TypeArguments="x:String">[in_transitem.SpecificContent("IS_NRA").ToString.Trim]</InArgument>
                    </ui:AssignOperation.Value>
                  </ui:AssignOperation>
                  <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_13">
                    <ui:AssignOperation.To>
                      <OutArgument x:TypeArguments="x:String">[var_PDF_Invoice_Date]</OutArgument>
                    </ui:AssignOperation.To>
                    <ui:AssignOperation.Value>
                      <InArgument x:TypeArguments="x:String">[in_transitem.SpecificContent("PDF_Invoice_Date").ToString.Trim]</InArgument>
                    </ui:AssignOperation.Value>
                  </ui:AssignOperation>
                  <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_14">
                    <ui:AssignOperation.To>
                      <OutArgument x:TypeArguments="x:String">[var_PDF_Invoice_Date]</OutArgument>
                    </ui:AssignOperation.To>
                    <ui:AssignOperation.Value>
                      <InArgument x:TypeArguments="x:String">[var_PDF_Invoice_Date.Replace(" 00:00:00","")]</InArgument>
                    </ui:AssignOperation.Value>
                  </ui:AssignOperation>
                  <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_15">
                    <ui:AssignOperation.To>
                      <OutArgument x:TypeArguments="x:String">[var_Invoice_Num]</OutArgument>
                    </ui:AssignOperation.To>
                    <ui:AssignOperation.Value>
                      <InArgument x:TypeArguments="x:String">[in_transitem.SpecificContent("Invoice_Num").ToString.Trim]</InArgument>
                    </ui:AssignOperation.Value>
                  </ui:AssignOperation>
                  <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_16">
                    <ui:AssignOperation.To>
                      <OutArgument x:TypeArguments="x:String">[var_Doc_Link]</OutArgument>
                    </ui:AssignOperation.To>
                    <ui:AssignOperation.Value>
                      <InArgument x:TypeArguments="x:String">[in_transitem.SpecificContent("Doc_Link").ToString.Trim]</InArgument>
                    </ui:AssignOperation.Value>
                  </ui:AssignOperation>
                  <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_17">
                    <ui:AssignOperation.To>
                      <OutArgument x:TypeArguments="x:String">[var_Buy_Status]</OutArgument>
                    </ui:AssignOperation.To>
                    <ui:AssignOperation.Value>
                      <InArgument x:TypeArguments="x:String">[in_transitem.SpecificContent("Buy_Status").ToString.Trim]</InArgument>
                    </ui:AssignOperation.Value>
                  </ui:AssignOperation>
                  <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_18">
                    <ui:AssignOperation.To>
                      <OutArgument x:TypeArguments="x:String">[var_inv_comment]</OutArgument>
                    </ui:AssignOperation.To>
                    <ui:AssignOperation.Value>
                      <InArgument x:TypeArguments="x:String">[in_transitem.SpecificContent("Inv_Comment").ToString.Trim]</InArgument>
                    </ui:AssignOperation.Value>
                  </ui:AssignOperation>
                </scg:List>
              </ui:MultipleAssign.AssignOperations>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </ui:MultipleAssign>
          </Sequence>
        </ui:CommentOut.Body>
      </ui:CommentOut>
      <Assign sap:VirtualizedContainerService.HintSize="6787,60" sap2010:WorkflowViewState.IdRef="Assign_5">
        <Assign.To>
          <OutArgument x:TypeArguments="x:String">[currentdate]</OutArgument>
        </Assign.To>
        <Assign.Value>
          <InArgument x:TypeArguments="x:String">[system.DateTime.Now.ToString("yyyy-MM-dd")]</InArgument>
        </Assign.Value>
      </Assign>
      <Sequence DisplayName="Stamp PDF" sap:VirtualizedContainerService.HintSize="6787,2295" sap2010:WorkflowViewState.IdRef="Sequence_13">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
        <If Condition="[varagency.Contains(&quot;Ford&quot;) or varagency.Contains(&quot;FORD&quot;)  or varagency.Contains(&quot;FM&quot;) or varagency.Contains(&quot;fm&quot;) or varagency.tolower.Contains(&quot;fd&quot;)]" sap:VirtualizedContainerService.HintSize="6745,2203" sap2010:WorkflowViewState.IdRef="If_11">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <If.Then>
            <Sequence sap:VirtualizedContainerService.HintSize="3308,2055" sap2010:WorkflowViewState.IdRef="Sequence_11">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <If Condition="[var_fastatus.Contains(&quot;NR&quot;)]" sap:VirtualizedContainerService.HintSize="3266,1963" sap2010:WorkflowViewState.IdRef="If_10">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <If.Then>
                  <Sequence sap:VirtualizedContainerService.HintSize="200,66" sap2010:WorkflowViewState.IdRef="Sequence_7">
                    <Sequence.Variables>
                      <Variable x:TypeArguments="x:Boolean" Name="boolfordpendingdatefolderexist" />
                    </Sequence.Variables>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <ui:PathExists DisplayName="Path Exists" Exists="[boolfordpendingdatefolderexist]" sap:VirtualizedContainerService.HintSize="579,89" sap2010:WorkflowViewState.IdRef="PathExists_1" Path="[in_FordPendingpdffilepath+currentdate+&quot;\for Ford\PENDING\&quot;]" PathType="Folder" />
                    <If Condition="[boolfordpendingdatefolderexist]" sap:VirtualizedContainerService.HintSize="579,227" sap2010:WorkflowViewState.IdRef="If_13">
                      <If.Else>
                        <ui:CreateDirectory ContinueOnError="{x:Null}" DisplayName="Create Folder" sap:VirtualizedContainerService.HintSize="334,79" sap2010:WorkflowViewState.IdRef="CreateDirectory_1" Path="[in_FordPendingpdffilepath+currentdate+&quot;\for Ford\PENDING\&quot;]" />
                      </If.Else>
                    </If>
                    <If Condition="[var_isnra.Equals(&quot;1&quot;)]" sap:VirtualizedContainerService.HintSize="579,208" sap2010:WorkflowViewState.IdRef="If_7">
                      <If.Then>
                        <Assign sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_3">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:String">[var_E]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:String">NRA</InArgument>
                          </Assign.Value>
                        </Assign>
                      </If.Then>
                      <If.Else>
                        <Assign sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_4">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:String">[var_E]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:String">NR</InArgument>
                          </Assign.Value>
                        </Assign>
                      </If.Else>
                    </If>
                    <If Condition="[var_PUBLICATON_CODE.Equals(&quot;106063&quot;) or var_PUBLICATON_CODE.Equals(&quot;105355&quot;) or var_PUBLICATON_CODE.Equals(&quot;101443&quot;)]" sap:VirtualizedContainerService.HintSize="579,384" sap2010:WorkflowViewState.IdRef="If_8">
                      <If.Then>
                        <ui:InvokeCode ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="VB.net Code to add Text Watermark to PDF Document&#xA;&#xA;Packages Used :  Syncfusion.Pdf.Net.Core and UiPath.System.Activities" Code="Try&#xA;Dim Destinationfolder As String = OutputPdfFilePath&#xA;Dim filename As String = InputPdfFilePath&#xA;'Dim Top as Integer = 100&#xA;Dim watermarkC As String =Watermarkclientcode&#xA;Dim watermarkP As String = Watermarkproductcode&#xA;Dim watermarkE As String = WatermarkEST&#xA;Dim watermarkM As String = WatermarkMediacode&#xA;Dim watermarkpub As String = Watermarkpubcode&#xA;Dim watermatkmos As String = Watermarkmos&#xA;Dim watermark As String = watermarkC+watermarkP+watermarkE+watermarkM+watermarkpub&#xA;Dim emSize As Integer = 8&#xA;Dim document As PdfSharp.Pdf.PdfDocument =  PdfSharp.Pdf.IO.PdfReader.Open(filename)&#xA;count=document.PageCount&#xA;Dim font As PdfSharp.Drawing.XFont = New PdfSharp.Drawing.XFont(&quot;Times New Roman&quot;, emSize, PdfSharp.Drawing.XFontStyle.Bold)&#xA;If document.Version &lt; 14 Then document.Version = 14&#xA;Dim page As PdfSharp.Pdf.PdfPage = document.Pages(0)&#xA;'page.TrimMargins.Top=20&#xA;Dim gfx As PdfSharp.Drawing.XGraphics = PdfSharp.Drawing.XGraphics.FromPdfPage(page,PdfSharp.Drawing.XGraphicsPdfPageOptions.Prepend)&#xA;Dim size As PdfSharp.Drawing.XSize = gfx.MeasureString(watermark, font)&#xA;Dim format As PdfSharp.Drawing.XStringFormat = New PdfSharp.Drawing.XStringFormat()&#xA;format.Alignment=PdfSharp.Drawing.XStringAlignment.Near&#xA;format.LineAlignment=PdfSharp.Drawing.XLineAlignment.Near&#xA;Dim pen As PdfSharp.Drawing.XPen= New PdfSharp.Drawing.XPen(PdfSharp.Drawing.XColors.Tomato)&#xA;Dim brush As PdfSharp.Drawing.XBrush= New PdfSharp.Drawing.XSolidBrush(PdfSharp.Drawing.XColor.FromArgb(255,255,0,0))&#xA;gfx.DrawRoundedRectangle(PdfSharp.Drawing.XPens.Tomato, 226, 826, 305, 22, 20, 23)&#xA;gfx.DrawString(watermarkC,font,brush,New PdfSharp.Drawing.XPoint(231,827),format)&#xA;gfx.DrawString(watermarkP,font,brush,New PdfSharp.Drawing.XPoint(266,827),format)&#xA;gfx.DrawString(watermarkE,font,brush,New PdfSharp.Drawing.XPoint(302,827),format)&#xA;gfx.DrawString(watermarkM,font,brush,New PdfSharp.Drawing.XPoint(340,827),format)&#xA;gfx.DrawString(watermarkpub,font,brush,New PdfSharp.Drawing.XPoint(410,827),format)&#xA;gfx.DrawString(Watermarkmos,font,brush,New PdfSharp.Drawing.XPoint(480,827),format)&#xA;Dim fs As System.IO.FileStream = New FileStream(filename, FileMode.OpenOrCreate, FileAccess.ReadWrite)&#xA;document.Save(Destinationfolder)&#xA;Catch&#xA;&#x9;arg_failtostamp = True&#xA;&#x9;'Dim strFile As String = &quot;C:\Users\skore\Desktop\Stamping\Exception log file\ErrorLog_&quot; &amp; DateTime.Today.ToString(&quot;yyyy-MM-dd&quot;) &amp; &quot;.txt&quot;&#xA;&#x9;'Dim sw As StreamWriter&#xA;&#x9;'Dim fs As FileStream = Nothing&#xA;&#xA;'If (Not File.Exists(strFile)) Then&#xA; '   Try&#xA;      ' fs = File.Create(strFile)&#xA;       'sw = File.AppendText(strFile)&#xA;       'sw.WriteLine(&quot;Start Error Log for today&quot;)&#xA;&#xA;    'Catch ex As Exception&#xA;     '   MsgBox(&quot;Error Creating Log File&quot;)&#xA;    'End Try&#xA;'Else&#xA;    'sw = File.AppendText(strFile)&#xA;&#x9;'sw.WriteLine(Environment.NewLine)&#xA;    'sw.WriteLine(tempfaname &amp; &quot;;&quot; &amp; tempinvnum &amp; &quot;;&quot; &amp; tempamount &amp; &quot;;&quot; &amp; temppdfpath &amp; &quot;;&quot; &amp; DateTime.Now &amp; &quot;;&quot; &amp;&quot;Can not stamp the PDF&quot;)&#xA;&#xA;    'sw.Close()&#xA;'End If&#xA;End Try" DisplayName="Invoke code - Add Text Watermark to PDF" sap:VirtualizedContainerService.HintSize="200,153" sap2010:WorkflowViewState.IdRef="InvokeCode_6">
                          <ui:InvokeCode.Arguments>
                            <InArgument x:TypeArguments="x:String" x:Key="InputPdfFilePath">[var_pdffilepath]</InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="OutputPdfFilePath">[in_FordPendingpdffilepath+currentdate+"\for Ford\PENDING\"+var_pdfname]</InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="Watermarkclientcode">["C: "+var_C]</InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="Watermarkproductcode" xml:space="preserve">P: </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="WatermarkEST">["E: "+var_E]</InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="WatermarkMediacode">["M: "+var_MediaLookUp]</InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="Watermarkpubcode">["Pub Code: "+var_PUBLICATON_CODE]</InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="Watermarkmos">["MOS: "+var_MOS]</InArgument>
                            <InOutArgument x:TypeArguments="x:Boolean" x:Key="arg_failtostamp">[var_failtostamp]</InOutArgument>
                            <InOutArgument x:TypeArguments="x:Int32" x:Key="count">[var_pagecount]</InOutArgument>
                          </ui:InvokeCode.Arguments>
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                        </ui:InvokeCode>
                      </If.Then>
                      <If.Else>
                        <ui:InvokeCode ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="VB.net Code to add Text Watermark to PDF Document&#xA;&#xA;Packages Used :  Syncfusion.Pdf.Net.Core and UiPath.System.Activities" Code="Try&#xA;Dim Destinationfolder As String = OutputPdfFilePath&#xA;Dim filename As String = InputPdfFilePath&#xA;'Dim Top as Integer = 100&#xA;Dim watermarkC As String =Watermarkclientcode&#xA;Dim watermarkP As String = Watermarkproductcode&#xA;Dim watermarkE As String = WatermarkEST&#xA;Dim watermarkM As String = WatermarkMediacode&#xA;Dim watermarkpub As String = Watermarkpubcode&#xA;Dim watermatkmos As String = Watermarkmos&#xA;Dim watermark As String = watermarkC+watermarkP+watermarkE+watermarkM+watermarkpub&#xA;Dim emSize As Integer = 8&#xA;Dim document As PdfSharp.Pdf.PdfDocument =  PdfSharp.Pdf.IO.PdfReader.Open(filename)&#xA;count = document.PageCount&#xA;Dim font As PdfSharp.Drawing.XFont = New PdfSharp.Drawing.XFont(&quot;Times New Roman&quot;, emSize, PdfSharp.Drawing.XFontStyle.Bold)&#xA;If document.Version &lt; 14 Then document.Version = 14&#xA;Dim page As PdfSharp.Pdf.PdfPage = document.Pages(0)&#xA;'page.TrimMargins.Top=20&#xA;Dim gfx As PdfSharp.Drawing.XGraphics = PdfSharp.Drawing.XGraphics.FromPdfPage(page,PdfSharp.Drawing.XGraphicsPdfPageOptions.Prepend)&#xA;Dim size As PdfSharp.Drawing.XSize = gfx.MeasureString(watermark, font)&#xA;Dim format As PdfSharp.Drawing.XStringFormat = New PdfSharp.Drawing.XStringFormat()&#xA;format.Alignment=PdfSharp.Drawing.XStringAlignment.Near&#xA;format.LineAlignment=PdfSharp.Drawing.XLineAlignment.Near&#xA;Dim pen As PdfSharp.Drawing.XPen= New PdfSharp.Drawing.XPen(PdfSharp.Drawing.XColors.Tomato)&#xA;Dim brush As PdfSharp.Drawing.XBrush= New PdfSharp.Drawing.XSolidBrush(PdfSharp.Drawing.XColor.FromArgb(255,255,0,0))&#xA;gfx.DrawRoundedRectangle(PdfSharp.Drawing.XPens.Tomato, 226, 2, 305, 22, 20, 23)&#xA;gfx.DrawString(watermarkC,font,brush,New PdfSharp.Drawing.XPoint(231,3),format)&#xA;gfx.DrawString(watermarkP,font,brush,New PdfSharp.Drawing.XPoint(266,3),format)&#xA;gfx.DrawString(watermarkE,font,brush,New PdfSharp.Drawing.XPoint(302,3),format)&#xA;gfx.DrawString(watermarkM,font,brush,New PdfSharp.Drawing.XPoint(340,3),format)&#xA;gfx.DrawString(watermarkpub,font,brush,New PdfSharp.Drawing.XPoint(410,3),format)&#xA;gfx.DrawString(Watermarkmos,font,brush,New PdfSharp.Drawing.XPoint(480,3),format)&#xA;Dim fs As System.IO.FileStream = New FileStream(filename, FileMode.OpenOrCreate, FileAccess.ReadWrite)&#xA;document.Save(Destinationfolder)&#xA;Catch&#xA;&#x9;arg_failtostamp = True&#xA;&#x9;'Dim strFile As String = &quot;C:\Users\skore\Desktop\Stamping\Exception log file\ErrorLog_&quot; &amp; DateTime.Today.ToString(&quot;yyyy-MM-dd&quot;) &amp; &quot;.txt&quot;&#xA;&#x9;'Dim sw As StreamWriter&#xA;&#x9;'Dim fs As FileStream = Nothing&#xA;&#xA;'If (Not File.Exists(strFile)) Then&#xA; '   Try&#xA;      ' fs = File.Create(strFile)&#xA;       'sw = File.AppendText(strFile)&#xA;       'sw.WriteLine(&quot;Start Error Log for today&quot;)&#xA;&#xA;    'Catch ex As Exception&#xA;     '   MsgBox(&quot;Error Creating Log File&quot;)&#xA;    'End Try&#xA;'Else&#xA;    'sw = File.AppendText(strFile)&#xA;&#x9;'sw.WriteLine(Environment.NewLine)&#xA;    'sw.WriteLine(tempfaname &amp; &quot;;&quot; &amp; tempinvnum &amp; &quot;;&quot; &amp; tempamount &amp; &quot;;&quot; &amp; temppdfpath &amp; &quot;;&quot; &amp; DateTime.Now &amp; &quot;;&quot; &amp;&quot;Can not stamp the PDF&quot;)&#xA;&#xA;    'sw.Close()&#xA;'End If&#xA;End Try" DisplayName="Invoke code - Add Text Watermark to PDF" sap:VirtualizedContainerService.HintSize="334,236" sap2010:WorkflowViewState.IdRef="InvokeCode_7">
                          <ui:InvokeCode.Arguments>
                            <InArgument x:TypeArguments="x:String" x:Key="InputPdfFilePath">[var_pdffilepath]</InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="OutputPdfFilePath">[in_FordPendingpdffilepath+currentdate+"\for Ford\PENDING\"+var_pdfname]</InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="Watermarkclientcode">["C: "+var_C]</InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="Watermarkproductcode" xml:space="preserve">P: </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="WatermarkEST">["E: "+var_E]</InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="WatermarkMediacode">["M: "+var_MediaLookUp]</InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="Watermarkpubcode">["Pub Code: "+var_PUBLICATON_CODE]</InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="Watermarkmos">["MOS: "+var_MOS]</InArgument>
                            <InOutArgument x:TypeArguments="x:Boolean" x:Key="arg_failtostamp">[var_failtostamp]</InOutArgument>
                            <InOutArgument x:TypeArguments="x:Int32" x:Key="count">[var_pagecount]</InOutArgument>
                          </ui:InvokeCode.Arguments>
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                        </ui:InvokeCode>
                      </If.Else>
                    </If>
                  </Sequence>
                </If.Then>
                <If.Else>
                  <Sequence sap:VirtualizedContainerService.HintSize="3021,1815" sap2010:WorkflowViewState.IdRef="Sequence_9">
                    <Sequence.Variables>
                      <Variable x:TypeArguments="x:Boolean" Name="boolfordpaiddatefolderexist" />
                    </Sequence.Variables>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <ui:PathExists DisplayName="Path Exists" Exists="[boolfordpaiddatefolderexist]" sap:VirtualizedContainerService.HintSize="2979,89" sap2010:WorkflowViewState.IdRef="PathExists_2" Path="[in_FordPaidpdffilepath+currentdate+&quot;\for Ford\PAID\&quot;]" PathType="Folder" />
                    <If Condition="[boolfordpaiddatefolderexist]" sap:VirtualizedContainerService.HintSize="2979,227" sap2010:WorkflowViewState.IdRef="If_14">
                      <If.Else>
                        <ui:CreateDirectory ContinueOnError="{x:Null}" DisplayName="Create Folder" sap:VirtualizedContainerService.HintSize="334,79" sap2010:WorkflowViewState.IdRef="CreateDirectory_2" Path="[in_FordPaidpdffilepath+currentdate+&quot;\for Ford\PAID\&quot;]" />
                      </If.Else>
                    </If>
                    <If Condition="[var_Buy_Status.Equals(&quot;Yes&quot;)]" sap:VirtualizedContainerService.HintSize="2979,1236" sap2010:WorkflowViewState.IdRef="If_28">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <If.Then>
                        <If Condition="[var_PUBLICATON_CODE.Equals(&quot;106063&quot;) or var_PUBLICATON_CODE.Equals(&quot;105355&quot;) or var_PUBLICATON_CODE.Equals(&quot;101443&quot;)]" sap:VirtualizedContainerService.HintSize="963,1088" sap2010:WorkflowViewState.IdRef="If_24">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <If.Then>
                            <TryCatch DisplayName="Try Catch" sap:VirtualizedContainerService.HintSize="438,380" sap2010:WorkflowViewState.IdRef="TryCatch_1">
                              <TryCatch.Try>
                                <ui:InvokeCode ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="VB.net Code to add Text Watermark to PDF Document&#xA;&#xA;Packages Used :  Syncfusion.Pdf.Net.Core and UiPath.System.Activities" Code="Try&#xA;Dim Destinationfolder As String = OutputPdfFilePath&#xA;Dim filename As String = InputPdfFilePath&#xA;'Dim Top as Integer = 100&#xA;Dim watermarkC As String =Watermarkclientcode&#xA;Dim watermarkP As String = Watermarkproductcode&#xA;Dim watermarkE As String = WatermarkEST&#xA;Dim watermarkM As String = WatermarkMediacode&#xA;Dim watermarkpub As String = Watermarkpubcode&#xA;Dim watermatkmos As String = Watermarkmos&#xA;Dim watermarkinvcomment As String = WatermarkInv_Comment&#xA;Dim watermark As String = watermarkC+watermarkP+watermarkE+watermarkM+watermarkpub&#xA;Dim emSize As Integer = 8&#xA;Dim document As PdfSharp.Pdf.PdfDocument =  PdfSharp.Pdf.IO.PdfReader.Open(filename)&#xA;count=document.PageCount&#xA;Dim font As PdfSharp.Drawing.XFont = New PdfSharp.Drawing.XFont(&quot;Times New Roman&quot;, emSize, PdfSharp.Drawing.XFontStyle.Bold)&#xA;If document.Version &lt; 14 Then document.Version = 14&#xA;Dim page As PdfSharp.Pdf.PdfPage = document.Pages(0)&#xA;'page.TrimMargins.Top=20&#xA;Dim gfx As PdfSharp.Drawing.XGraphics = PdfSharp.Drawing.XGraphics.FromPdfPage(page,PdfSharp.Drawing.XGraphicsPdfPageOptions.Prepend)&#xA;Dim size As PdfSharp.Drawing.XSize = gfx.MeasureString(watermark, font)&#xA;Dim format As PdfSharp.Drawing.XStringFormat = New PdfSharp.Drawing.XStringFormat()&#xA;format.Alignment=PdfSharp.Drawing.XStringAlignment.Near&#xA;format.LineAlignment=PdfSharp.Drawing.XLineAlignment.Near&#xA;Dim pen As PdfSharp.Drawing.XPen= New PdfSharp.Drawing.XPen(PdfSharp.Drawing.XColors.Tomato)&#xA;Dim brush As PdfSharp.Drawing.XBrush= New PdfSharp.Drawing.XSolidBrush(PdfSharp.Drawing.XColor.FromArgb(255,255,0,0))&#xA;'gfx.DrawRoundedRectangle(PdfSharp.Drawing.XPens.Tomato, 226, 826, 305, 22, 20, 23)&#xA;gfx.DrawString(watermarkC,font,brush,New PdfSharp.Drawing.XPoint(231,824),format)&#xA;gfx.DrawString(watermarkP,font,brush,New PdfSharp.Drawing.XPoint(266,824),format)&#xA;gfx.DrawString(watermarkE,font,brush,New PdfSharp.Drawing.XPoint(302,824),format)&#xA;gfx.DrawString(watermarkM,font,brush,New PdfSharp.Drawing.XPoint(340,824),format)&#xA;gfx.DrawString(watermarkpub,font,brush,New PdfSharp.Drawing.XPoint(410,824),format)&#xA;gfx.DrawString(Watermarkmos,font,brush,New PdfSharp.Drawing.XPoint(480,824),format)&#xA;gfx.DrawString(watermarkinvcomment,font,brush,New PdfSharp.Drawing.XPoint(231,833),format)&#xA;Dim fs As System.IO.FileStream = New FileStream(filename, FileMode.OpenOrCreate, FileAccess.ReadWrite)&#xA;document.Save(Destinationfolder)&#xA;Catch&#xA;&#x9;arg_failtostamp = True&#xA;&#x9;'Dim strFile As String = &quot;C:\Users\skore\Desktop\Stamping\Exception log file\ErrorLog_&quot; &amp; DateTime.Today.ToString(&quot;yyyy-MM-dd&quot;) &amp; &quot;.txt&quot;&#xA;&#x9;'Dim sw As StreamWriter&#xA;&#x9;'Dim fs As FileStream = Nothing&#xA;&#xA;'If (Not File.Exists(strFile)) Then&#xA; '   Try&#xA;      ' fs = File.Create(strFile)&#xA;       'sw = File.AppendText(strFile)&#xA;       'sw.WriteLine(&quot;Start Error Log for today&quot;)&#xA;&#xA;    'Catch ex As Exception&#xA;     '   MsgBox(&quot;Error Creating Log File&quot;)&#xA;    'End Try&#xA;'Else&#xA;    'sw = File.AppendText(strFile)&#xA;&#x9;'sw.WriteLine(Environment.NewLine)&#xA;    'sw.WriteLine(tempfaname &amp; &quot;;&quot; &amp; tempinvnum &amp; &quot;;&quot; &amp; tempamount &amp; &quot;;&quot; &amp; temppdfpath &amp; &quot;;&quot; &amp; DateTime.Now &amp; &quot;;&quot; &amp;&quot;Can not stamp the PDF&quot;)&#xA;&#xA;    'sw.Close()&#xA;'End If&#xA;End Try" DisplayName="Invoke code - Add Text Watermark to PDF" sap:VirtualizedContainerService.HintSize="200,153" sap2010:WorkflowViewState.IdRef="InvokeCode_17">
                                  <ui:InvokeCode.Arguments>
                                    <InArgument x:TypeArguments="x:String" x:Key="InputPdfFilePath">[var_pdffilepath]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="OutputPdfFilePath">[in_OutputPaidPdfFilePath+currentdate+"\for Ford\PAID\"+var_pdfname]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="Watermarkclientcode">["C: "+var_C]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="Watermarkproductcode">["P: "+var_P]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="WatermarkEST">["E: "+var_E]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="WatermarkMediacode">["M: "+var_MediaLookUp]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="Watermarkpubcode">["Pub_Code: "+var_PUBLICATON_CODE]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="Watermarkmos">["MOS: "+var_MOS]</InArgument>
                                    <InOutArgument x:TypeArguments="x:Boolean" x:Key="arg_failtostamp">[var_failtostamp]</InOutArgument>
                                    <InOutArgument x:TypeArguments="x:Int32" x:Key="count">[var_pagecount]</InOutArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="WatermarkInv_Comment">[var_inv_comment]</InArgument>
                                  </ui:InvokeCode.Arguments>
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                      <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                </ui:InvokeCode>
                              </TryCatch.Try>
                              <TryCatch.Catches>
                                <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="404,21" sap2010:WorkflowViewState.IdRef="Catch`1_1">
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                  <ActivityAction x:TypeArguments="s:Exception">
                                    <ActivityAction.Argument>
                                      <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                                    </ActivityAction.Argument>
                                    <ui:CopyFile ContinueOnError="{x:Null}" Destination="[in_OutputPaidPdfFilePath+currentdate+&quot;\for Ford\PAID\&quot;+var_pdfname]" DisplayName="Copy File" sap:VirtualizedContainerService.HintSize="434,157" sap2010:WorkflowViewState.IdRef="CopyFile_1" Overwrite="False" Path="[var_pdffilepath]" />
                                  </ActivityAction>
                                </Catch>
                              </TryCatch.Catches>
                            </TryCatch>
                          </If.Then>
                          <If.Else>
                            <Sequence sap:VirtualizedContainerService.HintSize="480,940" sap2010:WorkflowViewState.IdRef="Sequence_24">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <WriteLine DisplayName="Write Line" sap:VirtualizedContainerService.HintSize="438,61" sap2010:WorkflowViewState.IdRef="WriteLine_5" Text="[var_inv_comment]" />
                              <TryCatch DisplayName="Try Catch" sap:VirtualizedContainerService.HintSize="438,646" sap2010:WorkflowViewState.IdRef="TryCatch_2">
                                <TryCatch.Try>
                                  <Sequence sap:VirtualizedContainerService.HintSize="376,419" sap2010:WorkflowViewState.IdRef="Sequence_32">
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                    <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="334,51" sap2010:WorkflowViewState.IdRef="CommentOut_5">
                                      <ui:CommentOut.Body>
                                        <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="376,328" sap2010:WorkflowViewState.IdRef="Sequence_31">
                                          <sap:WorkflowViewStateService.ViewState>
                                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                            </scg:Dictionary>
                                          </sap:WorkflowViewStateService.ViewState>
                                          <ui:InvokeCode ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="VB.net Code to add Text Watermark to PDF Document&#xA;&#xA;Packages Used :  Syncfusion.Pdf.Net.Core and UiPath.System.Activities" Code="Try&#xA;Dim Destinationfolder As String = OutputPdfFilePath&#xA;Dim filename As String = InputPdfFilePath&#xA;Dim y_cor As Double&#xA;'Dim Top as Integer = 100&#xA;Dim watermarkC As String =Watermarkclientcode&#xA;Dim watermarkP As String = Watermarkproductcode&#xA;Dim watermarkE As String = WatermarkEST&#xA;Dim watermarkM As String = WatermarkMediacode&#xA;Dim watermarkpub As String = Watermarkpubcode&#xA;Dim watermatkmos As String = Watermarkmos&#xA;Dim watermarkinvcomment As String  = Watermark_InvComment&#xA;Dim arrwatermarkc () As  String={Watermark_InvComment}&#xA;arrwatermarkc=Watermark_InvComment.Split(New [Char]() { CChar(&quot;;&quot;) })&#xA;Dim counter As Integer= 0&#xA;Dim watermark As String = watermarkC+watermarkP+watermarkE+watermarkM+watermarkpub&#xA;Dim emSize As Integer = 8&#xA;Dim document As PdfSharp.Pdf.PdfDocument =  PdfSharp.Pdf.IO.PdfReader.Open(filename)&#xA;count=document.PageCount&#xA;Dim font As PdfSharp.Drawing.XFont = New PdfSharp.Drawing.XFont(&quot;Times New Roman&quot;, emSize, PdfSharp.Drawing.XFontStyle.Bold)&#xA;If document.Version &lt; 14 Then document.Version = 14&#xA;Dim page As PdfSharp.Pdf.PdfPage = document.Pages(0)&#xA;'page.TrimMargins.Top=20&#xA;Dim gfx As PdfSharp.Drawing.XGraphics = PdfSharp.Drawing.XGraphics.FromPdfPage(page,PdfSharp.Drawing.XGraphicsPdfPageOptions.Prepend)&#xA;Dim size As PdfSharp.Drawing.XSize = gfx.MeasureString(watermark, font)&#xA;Dim format As PdfSharp.Drawing.XStringFormat = New PdfSharp.Drawing.XStringFormat()&#xA;format.Alignment=PdfSharp.Drawing.XStringAlignment.Near&#xA;format.LineAlignment=PdfSharp.Drawing.XLineAlignment.Near&#xA;Dim pen As PdfSharp.Drawing.XPen= New PdfSharp.Drawing.XPen(PdfSharp.Drawing.XColors.Tomato)&#xA;Dim brush As PdfSharp.Drawing.XBrush= New PdfSharp.Drawing.XSolidBrush(PdfSharp.Drawing.XColor.FromArgb(255,255,0,0))&#xA;'gfx.DrawRoundedRectangle(PdfSharp.Drawing.XPens.Tomato, 226, 2, 305, 22, 20, 23)&#xA;gfx.DrawString(watermarkC,font,brush,New PdfSharp.Drawing.XPoint(231,3),format)&#xA;gfx.DrawString(watermarkP,font,brush,New PdfSharp.Drawing.XPoint(266,3),format)&#xA;gfx.DrawString(watermarkE,font,brush,New PdfSharp.Drawing.XPoint(302,3),format)&#xA;gfx.DrawString(watermarkM,font,brush,New PdfSharp.Drawing.XPoint(340,3),format)&#xA;gfx.DrawString(watermarkpub,font,brush,New PdfSharp.Drawing.XPoint(410,3),format)&#xA;gfx.DrawString(Watermarkmos,font,brush,New PdfSharp.Drawing.XPoint(480,3),format)&#xA;If arrwatermarkc.Count&gt;0 Then&#xA;For Each item As String In arrwatermarkc&#xA;If (counter.Equals(0)) Then&#xA;y_cor = 12&#xA;gfx.DrawString(arrwatermarkc(counter),font,brush,New PdfSharp.Drawing.XPoint(261,y_cor),format)&#xA;Else&#xA;y_cor = (counter * 10)+9&#xA;gfx.DrawString(arrwatermarkc(counter),font,brush,New PdfSharp.Drawing.XPoint(261,y_cor),format)&#xA;End If&#xA;counter = counter+1&#xA;Next&#xA;End If&#xA;'gfx.DrawString(watermarkinvcomment,font,brush,New PdfSharp.Drawing.XPoint(231,14),format)&#xA;Dim fs As System.IO.FileStream = New FileStream(filename, FileMode.OpenOrCreate, FileAccess.ReadWrite)&#xA;document.Save(Destinationfolder)&#xA;Catch e as IO.IOException&#xA;&#x9;arg_failtostamp = True&#xA;&#x9;strException = e.ToString&#xA;&#x9;'Dim strFile As String = &quot;C:\Users\skore\Desktop\Stamping\Exception log file\ErrorLog_&quot; &amp; DateTime.Today.ToString(&quot;yyyy-MM-dd&quot;) &amp; &quot;.txt&quot;&#xA;&#x9;'Dim sw As StreamWriter&#xA;&#x9;'Dim fs As FileStream = Nothing&#xA;&#xA;'If (Not File.Exists(strFile)) Then&#xA; '   Try&#xA;      ' fs = File.Create(strFile)&#xA;       'sw = File.AppendText(strFile)&#xA;       'sw.WriteLine(&quot;Start Error Log for today&quot;)&#xA;&#xA;    'Catch ex As Exception&#xA;     '   MsgBox(&quot;Error Creating Log File&quot;)&#xA;    'End Try&#xA;'Else&#xA;    'sw = File.AppendText(strFile)&#xA;&#x9;'sw.WriteLine(Environment.NewLine)&#xA;    'sw.WriteLine(tempfaname &amp; &quot;;&quot; &amp; tempinvnum &amp; &quot;;&quot; &amp; tempamount &amp; &quot;;&quot; &amp; temppdfpath &amp; &quot;;&quot; &amp; DateTime.Now &amp; &quot;;&quot; &amp;&quot;Can not stamp the PDF&quot;)&#xA;&#xA;    'sw.Close()&#xA;'End If&#xA;End Try" DisplayName="Invoke code - Add Text Watermark to PDF" sap:VirtualizedContainerService.HintSize="334,236" sap2010:WorkflowViewState.IdRef="InvokeCode_18">
                                            <ui:InvokeCode.Arguments>
                                              <InArgument x:TypeArguments="x:String" x:Key="InputPdfFilePath">[var_pdffilepath]</InArgument>
                                              <InArgument x:TypeArguments="x:String" x:Key="OutputPdfFilePath">[in_OutputPaidPdfFilePath+currentdate+"\for Ford\PAID\"+var_pdfname]</InArgument>
                                              <InArgument x:TypeArguments="x:String" x:Key="Watermarkclientcode">["C: "+var_C]</InArgument>
                                              <InArgument x:TypeArguments="x:String" x:Key="Watermarkproductcode">["P: "+var_P]</InArgument>
                                              <InArgument x:TypeArguments="x:String" x:Key="WatermarkEST">["E: "+var_E]</InArgument>
                                              <InArgument x:TypeArguments="x:String" x:Key="WatermarkMediacode">["M: "+var_MediaLookUp]</InArgument>
                                              <InArgument x:TypeArguments="x:String" x:Key="Watermarkpubcode">["Pub_Code: "+var_PUBLICATON_CODE]</InArgument>
                                              <InArgument x:TypeArguments="x:String" x:Key="Watermarkmos">["MOS: "+var_MOS]</InArgument>
                                              <InOutArgument x:TypeArguments="x:Boolean" x:Key="arg_failtostamp">[var_failtostamp]</InOutArgument>
                                              <InOutArgument x:TypeArguments="x:Int32" x:Key="count">[var_pagecount]</InOutArgument>
                                              <InArgument x:TypeArguments="x:String" x:Key="Watermark_InvComment">[var_inv_comment]</InArgument>
                                              <OutArgument x:TypeArguments="x:String" x:Key="strException">[varException]</OutArgument>
                                            </ui:InvokeCode.Arguments>
                                            <sap:WorkflowViewStateService.ViewState>
                                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                              </scg:Dictionary>
                                            </sap:WorkflowViewStateService.ViewState>
                                          </ui:InvokeCode>
                                        </Sequence>
                                      </ui:CommentOut.Body>
                                      <sap:WorkflowViewStateService.ViewState>
                                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                        </scg:Dictionary>
                                      </sap:WorkflowViewStateService.ViewState>
                                    </ui:CommentOut>
                                    <ui:InvokeCode ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="VB.net Code to add Text Watermark to PDF Document&#xA;&#xA;Packages Used :  Syncfusion.Pdf.Net.Core and UiPath.System.Activities" Code="Try&#xA;Dim Destinationfolder As String = OutputPdfFilePath&#xA;Dim filename As String = InputPdfFilePath&#xA;Dim y_cor As Double&#xA;'Dim Top as Integer = 100&#xA;Dim watermarkC As String =Watermarkclientcode&#xA;Dim watermarkP As String = Watermarkproductcode&#xA;Dim watermarkE As String = WatermarkEST&#xA;Dim watermarkM As String = WatermarkMediacode&#xA;Dim watermarkpub As String = Watermarkpubcode&#xA;Dim watermatkmos As String = Watermarkmos&#xA;Dim watermarkinvcomment As String  = Watermark_InvComment&#xA;Dim arrwatermarkc () As  String={Watermark_InvComment}&#xA;arrwatermarkc=Watermark_InvComment.Split(New [Char]() { CChar(&quot;;&quot;) })&#xA;Dim counter As Integer= 0&#xA;Dim watermark As String = watermarkC+watermarkP+watermarkE+watermarkM+watermarkpub&#xA;Dim emSize As Integer = 8&#xA;Dim document As PdfSharp.Pdf.PdfDocument =  PdfSharp.Pdf.IO.PdfReader.Open(filename)&#xA;count=document.PageCount&#xA;Dim font As PdfSharp.Drawing.XFont = New PdfSharp.Drawing.XFont(&quot;Times New Roman&quot;, emSize, PdfSharp.Drawing.XFontStyle.Bold)&#xA;If document.Version &lt; 14 Then document.Version = 14&#xA;Dim page As PdfSharp.Pdf.PdfPage = document.Pages(0)&#xA;'page.TrimMargins.Top=20&#xA;Dim gfx As PdfSharp.Drawing.XGraphics = PdfSharp.Drawing.XGraphics.FromPdfPage(page,PdfSharp.Drawing.XGraphicsPdfPageOptions.Prepend)&#xA;Dim size As PdfSharp.Drawing.XSize = gfx.MeasureString(watermark, font)&#xA;Dim format As PdfSharp.Drawing.XStringFormat = New PdfSharp.Drawing.XStringFormat()&#xA;format.Alignment=PdfSharp.Drawing.XStringAlignment.Near&#xA;format.LineAlignment=PdfSharp.Drawing.XLineAlignment.Near&#xA;Dim pen As PdfSharp.Drawing.XPen= New PdfSharp.Drawing.XPen(PdfSharp.Drawing.XColors.Tomato)&#xA;Dim brush As PdfSharp.Drawing.XBrush= New PdfSharp.Drawing.XSolidBrush(PdfSharp.Drawing.XColor.FromArgb(255,255,0,0))&#xA;'gfx.DrawRoundedRectangle(PdfSharp.Drawing.XPens.Tomato, 226, 2, 305, 22, 20, 23)&#xA;gfx.DrawString(watermarkC,font,brush,New PdfSharp.Drawing.XPoint(231,3),format)&#xA;gfx.DrawString(watermarkP,font,brush,New PdfSharp.Drawing.XPoint(266,3),format)&#xA;gfx.DrawString(watermarkE,font,brush,New PdfSharp.Drawing.XPoint(302,3),format)&#xA;gfx.DrawString(watermarkM,font,brush,New PdfSharp.Drawing.XPoint(340,3),format)&#xA;gfx.DrawString(watermarkpub,font,brush,New PdfSharp.Drawing.XPoint(410,3),format)&#xA;gfx.DrawString(Watermarkmos,font,brush,New PdfSharp.Drawing.XPoint(480,3),format)&#xA;If arrwatermarkc.Count&gt;0 And arrwatermarkc.Count &lt; 5 Then&#xA;&#x9;For Each item As String In arrwatermarkc&#xA;&#x9;If (counter.Equals(0)) Then&#xA;&#x9;y_cor = 12&#xA;&#x9;gfx.DrawString(arrwatermarkc(counter),font,brush,New PdfSharp.Drawing.XPoint(261,y_cor),format)&#xA;&#x9;Else&#xA;&#x9;y_cor = (counter * 10)+9&#xA;&#x9;gfx.DrawString(arrwatermarkc(counter),font,brush,New PdfSharp.Drawing.XPoint(261,y_cor),format)&#xA;&#x9;End If&#xA;&#x9;counter = counter+1&#xA;&#x9;Next&#xA;Else&#xA;&#x9;gfx.DrawString(&quot;SEE BACK PAGE&quot;,font,brush,New PdfSharp.Drawing.XPoint(268,29),format)&#xA;&#x9;document.AddPage()&#xA;&#x9;Dim lastpage As  PdfSharp.Pdf.PdfPage= document.Pages(count)&#xA;&#x9;Dim emSize2 As Integer = 14&#xA;&#x9;Dim font2 As PdfSharp.Drawing.XFont = New PdfSharp.Drawing.XFont(&quot;Times New Roman&quot;, emSize2, PdfSharp.Drawing.XFontStyle.Bold)&#xA;&#x9;gfx  = PdfSharp.Drawing.XGraphics.FromPdfPage(lastpage,PdfSharp.Drawing.XGraphicsPdfPageOptions.Prepend)&#xA;&#x9;gfx.DrawString(watermarkC,font,brush,New PdfSharp.Drawing.XPoint(231,3),format)&#xA;&#x9;gfx.DrawString(watermarkP,font,brush,New PdfSharp.Drawing.XPoint(266,3),format)&#xA;&#x9;gfx.DrawString(watermarkE,font,brush,New PdfSharp.Drawing.XPoint(302,3),format)&#xA;&#x9;gfx.DrawString(watermarkM,font,brush,New PdfSharp.Drawing.XPoint(340,3),format)&#xA;&#x9;gfx.DrawString(watermarkpub,font,brush,New PdfSharp.Drawing.XPoint(410,3),format)&#xA;&#x9;gfx.DrawString(Watermarkmos,font,brush,New PdfSharp.Drawing.XPoint(480,3),format)&#xA;&#x9;For Each item As String In arrwatermarkc&#xA;&#x9;If (counter.Equals(0)) Then&#xA;&#x9;y_cor = 12&#xA;&#x9;gfx.DrawString(arrwatermarkc(counter),font,brush,New PdfSharp.Drawing.XPoint(261,y_cor),format)&#xA;&#x9;Else&#xA;&#x9;y_cor = (counter * 10)+9&#xA;&#x9;gfx.DrawString(arrwatermarkc(counter),font,brush,New PdfSharp.Drawing.XPoint(261,y_cor),format)&#xA;&#x9;End If&#xA;&#x9;counter = counter+1&#xA;&#x9;Next&#xA;End If&#xA;'gfx.DrawString(watermarkinvcomment,font,brush,New PdfSharp.Drawing.XPoint(231,14),format)&#xA;Dim fs As System.IO.FileStream = New FileStream(filename, FileMode.OpenOrCreate, FileAccess.ReadWrite)&#xA;document.Save(Destinationfolder)&#xA;Catch e as IO.IOException&#xA;&#x9;arg_failtostamp = True&#xA;&#x9;strException = e.ToString&#xA;&#x9;'Dim strFile As String = &quot;C:\Users\skore\Desktop\Stamping\Exception log file\ErrorLog_&quot; &amp; DateTime.Today.ToString(&quot;yyyy-MM-dd&quot;) &amp; &quot;.txt&quot;&#xA;&#x9;'Dim sw As StreamWriter&#xA;&#x9;'Dim fs As FileStream = Nothing&#xA;&#xA;'If (Not File.Exists(strFile)) Then&#xA; '   Try&#xA;      ' fs = File.Create(strFile)&#xA;       'sw = File.AppendText(strFile)&#xA;       'sw.WriteLine(&quot;Start Error Log for today&quot;)&#xA;&#xA;    'Catch ex As Exception&#xA;     '   MsgBox(&quot;Error Creating Log File&quot;)&#xA;    'End Try&#xA;'Else&#xA;    'sw = File.AppendText(strFile)&#xA;&#x9;'sw.WriteLine(Environment.NewLine)&#xA;    'sw.WriteLine(tempfaname &amp; &quot;;&quot; &amp; tempinvnum &amp; &quot;;&quot; &amp; tempamount &amp; &quot;;&quot; &amp; temppdfpath &amp; &quot;;&quot; &amp; DateTime.Now &amp; &quot;;&quot; &amp;&quot;Can not stamp the PDF&quot;)&#xA;&#xA;    'sw.Close()&#xA;'End If&#xA;End Try" DisplayName="Invoke code - Add Text Watermark to PDF" sap:VirtualizedContainerService.HintSize="334,236" sap2010:WorkflowViewState.IdRef="InvokeCode_23">
                                      <ui:InvokeCode.Arguments>
                                        <InArgument x:TypeArguments="x:String" x:Key="InputPdfFilePath">[var_pdffilepath]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="OutputPdfFilePath">[in_OutputPaidPdfFilePath+currentdate+"\for Ford\PAID\"+var_pdfname]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="Watermarkclientcode">["C: "+var_C]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="Watermarkproductcode">["P: "+var_P]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="WatermarkEST">["E: "+var_E]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="WatermarkMediacode">["M: "+var_MediaLookUp]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="Watermarkpubcode">["Pub_Code: "+var_PUBLICATON_CODE]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="Watermarkmos">["MOS: "+var_MOS]</InArgument>
                                        <InOutArgument x:TypeArguments="x:Boolean" x:Key="arg_failtostamp">[var_failtostamp]</InOutArgument>
                                        <InOutArgument x:TypeArguments="x:Int32" x:Key="count">[var_pagecount]</InOutArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="Watermark_InvComment">[var_inv_comment]</InArgument>
                                        <OutArgument x:TypeArguments="x:String" x:Key="strException">[varException]</OutArgument>
                                      </ui:InvokeCode.Arguments>
                                      <sap:WorkflowViewStateService.ViewState>
                                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                        </scg:Dictionary>
                                      </sap:WorkflowViewStateService.ViewState>
                                    </ui:InvokeCode>
                                  </Sequence>
                                </TryCatch.Try>
                                <TryCatch.Catches>
                                  <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="404,21" sap2010:WorkflowViewState.IdRef="Catch`1_2">
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                    <ActivityAction x:TypeArguments="s:Exception">
                                      <ActivityAction.Argument>
                                        <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                                      </ActivityAction.Argument>
                                      <ui:CopyFile ContinueOnError="{x:Null}" Destination="[in_OutputPaidPdfFilePath+currentdate+&quot;\for Ford\PAID\&quot;+var_pdfname]" DisplayName="Copy File" sap:VirtualizedContainerService.HintSize="434,157" sap2010:WorkflowViewState.IdRef="CopyFile_2" Overwrite="False" Path="[var_pdffilepath]" />
                                    </ActivityAction>
                                  </Catch>
                                </TryCatch.Catches>
                              </TryCatch>
                              <WriteLine DisplayName="Write Line" sap:VirtualizedContainerService.HintSize="438,61" sap2010:WorkflowViewState.IdRef="WriteLine_7" Text="[varException]" />
                            </Sequence>
                          </If.Else>
                        </If>
                      </If.Then>
                      <If.Else>
                        <Sequence DisplayName="Sequence - If - When FA_Status = SPLIT-S9 then Stamp with comment also" sap:VirtualizedContainerService.HintSize="1971,1044" sap2010:WorkflowViewState.IdRef="Sequence_26">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <If Condition="[var_fastatus.tolower.Contains(&quot;split - s9&quot;) or var_fastatus.tolower.Contains(&quot;attach-s9&quot;) or var_fastatus.tolower.Contains(&quot;append-s9&quot;) or var_fastatus.tolower.Contains(&quot;restamp-s9&quot;) or var_fastatus.tolower.Contains(&quot;tag-segment&quot;)]" sap:VirtualizedContainerService.HintSize="1929,952" sap2010:WorkflowViewState.IdRef="If_27">
                            <If.Then>
                              <If Condition="[var_PUBLICATON_CODE.Equals(&quot;106063&quot;) or var_PUBLICATON_CODE.Equals(&quot;105355&quot;) or var_PUBLICATON_CODE.Equals(&quot;101443&quot;)]" DisplayName="If " sap:VirtualizedContainerService.HintSize="963,804" sap2010:WorkflowViewState.IdRef="If_25">
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                                <If.Then>
                                  <TryCatch DisplayName="Try Catch" sap:VirtualizedContainerService.HintSize="438,380" sap2010:WorkflowViewState.IdRef="TryCatch_3">
                                    <TryCatch.Try>
                                      <ui:InvokeCode ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="VB.net Code to add Text Watermark to PDF Document&#xA;&#xA;Packages Used :  Syncfusion.Pdf.Net.Core and UiPath.System.Activities" Code="Try&#xA;Dim Destinationfolder As String = OutputPdfFilePath&#xA;Dim filename As String = InputPdfFilePath&#xA;'Dim Top as Integer = 100&#xA;Dim i As Integer = -1&#xA;Dim watermarkC As String =Watermarkclientcode&#xA;Dim watermarkP As String = Watermarkproductcode&#xA;Dim watermarkE As String = WatermarkEST&#xA;Dim watermarkM As String = WatermarkMediacode&#xA;Dim watermarkpub As String = Watermarkpubcode&#xA;Dim watermatkmos As String = Watermarkmos&#xA;Dim watermarkcomment As String = WatermarkCommentS9&#xA;&#xA;Dim watermarkcommentline As Integer = arg_comment_lines&#xA;Dim watermarkcommentarray( ) As String = WatermarkCommentS9array&#xA;ReDim Preserve watermarkcommentarray(watermarkcommentline-1)&#xA;&#xA;Dim watermark As String = watermarkC+watermarkP+watermarkE+watermarkM+watermarkpub+ watermarkcomments9&#xA;Dim emSize As Integer = 8&#xA;Dim document As PdfSharp.Pdf.PdfDocument =  PdfSharp.Pdf.IO.PdfReader.Open(filename)&#xA;count=document.PageCount&#xA;Dim font As PdfSharp.Drawing.XFont = New PdfSharp.Drawing.XFont(&quot;Times New Roman&quot;, emSize, PdfSharp.Drawing.XFontStyle.Bold)&#xA;If document.Version &lt; 14 Then document.Version = 14&#xA;Dim page As PdfSharp.Pdf.PdfPage = document.Pages(0)&#xA;'page.TrimMargins.Top=20&#xA;Dim gfx As PdfSharp.Drawing.XGraphics = PdfSharp.Drawing.XGraphics.FromPdfPage(page,PdfSharp.Drawing.XGraphicsPdfPageOptions.Prepend)&#xA;Dim size As PdfSharp.Drawing.XSize = gfx.MeasureString(watermark, font)&#xA;Dim format As PdfSharp.Drawing.XStringFormat = New PdfSharp.Drawing.XStringFormat()&#xA;format.Alignment=PdfSharp.Drawing.XStringAlignment.Near&#xA;format.LineAlignment=PdfSharp.Drawing.XLineAlignment.Near&#xA;Dim pen As PdfSharp.Drawing.XPen= New PdfSharp.Drawing.XPen(PdfSharp.Drawing.XColors.Tomato)&#xA;Dim brush As PdfSharp.Drawing.XBrush= New PdfSharp.Drawing.XSolidBrush(PdfSharp.Drawing.XColor.FromArgb(255,255,0,0))&#xA;'gfx.DrawRoundedRectangle(PdfSharp.Drawing.XPens.Tomato, 226, 826, 305, 22, 20, 23)&#xA;gfx.DrawString(watermarkC,font,brush,New PdfSharp.Drawing.XPoint(231,827),format)&#xA;gfx.DrawString(watermarkP,font,brush,New PdfSharp.Drawing.XPoint(266,827),format)&#xA;gfx.DrawString(watermarkE,font,brush,New PdfSharp.Drawing.XPoint(302,827),format)&#xA;gfx.DrawString(watermarkM,font,brush,New PdfSharp.Drawing.XPoint(340,827),format)&#xA;gfx.DrawString(watermarkpub,font,brush,New PdfSharp.Drawing.XPoint(410,827),format)&#xA;gfx.DrawString(Watermarkmos,font,brush,New PdfSharp.Drawing.XPoint(480,827),format)&#xA;'&#xA;If watermarkcommentline &lt; 3&#xA;&#x9;For Each comment As String In watermarkcommentarray&#xA;&#x9;i=i+1&#xA;&#x9;gfx.DrawString(comment,font,brush,New PdfSharp.Drawing.XPoint(231,827+(9*i)),format)&#xA;Next &#xA;Else&#xA;&#x9;gfx.DrawString(watermarkcommentarray(0),font,brush,New PdfSharp.Drawing.XPoint(231,836),format)&#xA;&#x9;gfx.DrawString(&quot;See Back Page&quot;,font,brush,New PdfSharp.Drawing.XPoint(231,845),format)&#xA;document.AddPage()&#xA;Dim lastpage As  PdfSharp.Pdf.PdfPage= document.Pages(count)&#xA;Dim emSize2 As Integer = 14&#xA;Dim font2 As PdfSharp.Drawing.XFont = New PdfSharp.Drawing.XFont(&quot;Times New Roman&quot;, emSize2, PdfSharp.Drawing.XFontStyle.Bold)&#xA;gfx  = PdfSharp.Drawing.XGraphics.FromPdfPage(lastpage,PdfSharp.Drawing.XGraphicsPdfPageOptions.Prepend)&#xA;gfx.DrawString(watermarkC,font,brush,New PdfSharp.Drawing.XPoint(150,3),format)&#xA;gfx.DrawString(watermarkP,font,brush,New PdfSharp.Drawing.XPoint(210,3),format)&#xA;gfx.DrawString(watermarkE,font,brush,New PdfSharp.Drawing.XPoint(245,3),format)&#xA;gfx.DrawString(watermarkM,font,brush,New PdfSharp.Drawing.XPoint(320,3),format)&#xA;gfx.DrawString(watermarkpub,font,brush,New PdfSharp.Drawing.XPoint(400,3),format)&#xA;gfx.DrawString(Watermarkmos,font,brush,New PdfSharp.Drawing.XPoint(480,3),format)&#xA;&#xA;For Each comment As String In watermarkcommentarray&#xA;&#x9;i=i+1&#xA;&#x9;gfx.DrawString(comment,font,brush,New PdfSharp.Drawing.XPoint(300,12+(10*i)),format)&#xA;Next &#xA;End If&#xA;'&#xA;&#xA;Dim fs As System.IO.FileStream = New FileStream(filename, FileMode.OpenOrCreate, FileAccess.ReadWrite)&#xA;document.Save(Destinationfolder)&#xA;Catch&#xA;&#x9;arg_failtostamp = True&#xA;&#x9;'Dim strFile As String = &quot;C:\Users\skore\Desktop\Stamping\Exception log file\ErrorLog_&quot; &amp; DateTime.Today.ToString(&quot;yyyy-MM-dd&quot;) &amp; &quot;.txt&quot;&#xA;&#x9;'Dim sw As StreamWriter&#xA;&#x9;'Dim fs As FileStream = Nothing&#xA;&#xA;'If (Not File.Exists(strFile)) Then&#xA; '   Try&#xA;      ' fs = File.Create(strFile)&#xA;       'sw = File.AppendText(strFile)&#xA;       'sw.WriteLine(&quot;Start Error Log for today&quot;)&#xA;&#xA;    'Catch ex As Exception&#xA;     '   MsgBox(&quot;Error Creating Log File&quot;)&#xA;    'End Try&#xA;'Else&#xA;    'sw = File.AppendText(strFile)&#xA;&#x9;'sw.WriteLine(Environment.NewLine)&#xA;    'sw.WriteLine(tempfaname &amp; &quot;;&quot; &amp; tempinvnum &amp; &quot;;&quot; &amp; tempamount &amp; &quot;;&quot; &amp; temppdfpath &amp; &quot;;&quot; &amp; DateTime.Now &amp; &quot;;&quot; &amp;&quot;Can not stamp the PDF&quot;)&#xA;&#xA;    'sw.Close()&#xA;'End If&#xA;End Try" DisplayName="Invoke code - Add Text Watermark to PDF" sap:VirtualizedContainerService.HintSize="200,153" sap2010:WorkflowViewState.IdRef="InvokeCode_19">
                                        <ui:InvokeCode.Arguments>
                                          <InArgument x:TypeArguments="x:String" x:Key="InputPdfFilePath">[var_pdffilepath]</InArgument>
                                          <InArgument x:TypeArguments="x:String" x:Key="OutputPdfFilePath">[in_OutputPaidPdfFilePath+currentdate+"\for Ford\PAID\"+var_pdfname]</InArgument>
                                          <InArgument x:TypeArguments="x:String" x:Key="Watermarkclientcode">["C: "+var_C]</InArgument>
                                          <InArgument x:TypeArguments="x:String" x:Key="Watermarkproductcode">["P: "+var_P]</InArgument>
                                          <InArgument x:TypeArguments="x:String" x:Key="WatermarkEST">["E: "+var_E]</InArgument>
                                          <InArgument x:TypeArguments="x:String" x:Key="WatermarkMediacode">["M: "+var_MediaLookUp]</InArgument>
                                          <InArgument x:TypeArguments="x:String" x:Key="Watermarkpubcode">["Pub_Code: "+var_PUBLICATON_CODE]</InArgument>
                                          <InArgument x:TypeArguments="x:String" x:Key="Watermarkmos">["MOS: "+var_MOS]</InArgument>
                                          <InOutArgument x:TypeArguments="x:Boolean" x:Key="arg_failtostamp">[var_failtostamp]</InOutArgument>
                                          <InOutArgument x:TypeArguments="x:Int32" x:Key="count">[var_pagecount]</InOutArgument>
                                          <InArgument x:TypeArguments="x:String" x:Key="WatermarkCommentS9">["Comment: "+var_Comment_S9]</InArgument>
                                          <InArgument x:TypeArguments="s:String[]" x:Key="WatermarkCommentS9array  ">[arrCommentS9]</InArgument>
                                          <InArgument x:TypeArguments="x:Int32" x:Key="arg_comment_lines ">[var_comment_line]</InArgument>
                                        </ui:InvokeCode.Arguments>
                                        <sap:WorkflowViewStateService.ViewState>
                                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                          </scg:Dictionary>
                                        </sap:WorkflowViewStateService.ViewState>
                                      </ui:InvokeCode>
                                    </TryCatch.Try>
                                    <TryCatch.Catches>
                                      <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="404,21" sap2010:WorkflowViewState.IdRef="Catch`1_3">
                                        <sap:WorkflowViewStateService.ViewState>
                                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                          </scg:Dictionary>
                                        </sap:WorkflowViewStateService.ViewState>
                                        <ActivityAction x:TypeArguments="s:Exception">
                                          <ActivityAction.Argument>
                                            <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                                          </ActivityAction.Argument>
                                          <ui:CopyFile ContinueOnError="{x:Null}" Destination="[in_OutputPaidPdfFilePath+currentdate+&quot;\for Ford\PAID\&quot;+var_pdfname]" DisplayName="Copy File" sap:VirtualizedContainerService.HintSize="434,157" sap2010:WorkflowViewState.IdRef="CopyFile_3" Overwrite="False" Path="[var_pdffilepath]" />
                                        </ActivityAction>
                                      </Catch>
                                    </TryCatch.Catches>
                                  </TryCatch>
                                </If.Then>
                                <If.Else>
                                  <Sequence sap:VirtualizedContainerService.HintSize="480,656" sap2010:WorkflowViewState.IdRef="Sequence_25">
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                    <TryCatch DisplayName="Try Catch" sap:VirtualizedContainerService.HintSize="438,463" sap2010:WorkflowViewState.IdRef="TryCatch_4">
                                      <TryCatch.Try>
                                        <ui:InvokeCode ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="VB.net Code to add Text Watermark to PDF Document&#xA;&#xA;Packages Used :  Syncfusion.Pdf.Net.Core and UiPath.System.Activities" Code="Try&#xA;Dim Destinationfolder As String = OutputPdfFilePath&#xA;Dim filename As String = InputPdfFilePath&#xA;'Dim Top as Integer = 100&#xA;Dim i As Integer = -1&#xA;Dim watermarkC As String =Watermarkclientcode&#xA;Dim watermarkP As String = Watermarkproductcode&#xA;Dim watermarkE As String = WatermarkEST&#xA;Dim watermarkM As String = WatermarkMediacode&#xA;Dim watermarkpub As String = Watermarkpubcode&#xA;Dim watermatkmos As String = Watermarkmos&#xA;Dim watermarkcomment As String = WatermarkCommentS9&#xA;&#xA;Dim watermarkcommentline As Integer = arg_comment_lines&#xA;Dim watermarkcommentarray( ) As String = WatermarkCommentS9array&#xA;ReDim Preserve watermarkcommentarray(watermarkcommentline-1)&#xA;&#xA;Dim watermark As String = watermarkC+watermarkP+watermarkE+watermarkM+watermarkpub + watermarkcomment&#xA;Dim emSize As Integer = 8&#xA;Dim document As PdfSharp.Pdf.PdfDocument =  PdfSharp.Pdf.IO.PdfReader.Open(filename)&#xA;count=document.PageCount&#xA;Dim font As PdfSharp.Drawing.XFont = New PdfSharp.Drawing.XFont(&quot;Times New Roman&quot;, emSize, PdfSharp.Drawing.XFontStyle.Bold)&#xA;If document.Version &lt; 14 Then document.Version = 14&#xA;Dim page As PdfSharp.Pdf.PdfPage = document.Pages(0)&#xA;'page.TrimMargins.Top=20&#xA;Dim gfx As PdfSharp.Drawing.XGraphics = PdfSharp.Drawing.XGraphics.FromPdfPage(page,PdfSharp.Drawing.XGraphicsPdfPageOptions.Prepend)&#xA;Dim size As PdfSharp.Drawing.XSize = gfx.MeasureString(watermark, font)&#xA;Dim format As PdfSharp.Drawing.XStringFormat = New PdfSharp.Drawing.XStringFormat()&#xA;format.Alignment=PdfSharp.Drawing.XStringAlignment.Near&#xA;format.LineAlignment=PdfSharp.Drawing.XLineAlignment.Near&#xA;Dim pen As PdfSharp.Drawing.XPen= New PdfSharp.Drawing.XPen(PdfSharp.Drawing.XColors.Tomato)&#xA;Dim brush As PdfSharp.Drawing.XBrush= New PdfSharp.Drawing.XSolidBrush(PdfSharp.Drawing.XColor.FromArgb(255,255,0,0))&#xA;'gfx.DrawRoundedRectangle(PdfSharp.Drawing.XPens.Tomato, 226, 2, 305, 22, 20, 23)&#xA;gfx.DrawString(watermarkC,font,brush,New PdfSharp.Drawing.XPoint(231,3),format)&#xA;gfx.DrawString(watermarkP,font,brush,New PdfSharp.Drawing.XPoint(266,3),format)&#xA;gfx.DrawString(watermarkE,font,brush,New PdfSharp.Drawing.XPoint(302,3),format)&#xA;gfx.DrawString(watermarkM,font,brush,New PdfSharp.Drawing.XPoint(340,3),format)&#xA;gfx.DrawString(watermarkpub,font,brush,New PdfSharp.Drawing.XPoint(410,3),format)&#xA;gfx.DrawString(Watermarkmos,font,brush,New PdfSharp.Drawing.XPoint(480,3),format)&#xA;'&#xA;If watermarkcommentline &lt; 3&#xA;&#x9;For Each comment As String In watermarkcommentarray&#xA;&#x9;i=i+1&#xA;&#x9;gfx.DrawString(comment,font,brush,New PdfSharp.Drawing.XPoint(231,12+(9*i)),format)&#xA;Next &#xA;Else&#xA;&#x9;gfx.DrawString(watermarkcommentarray(0),font,brush,New PdfSharp.Drawing.XPoint(231,12),format)&#xA;&#x9;gfx.DrawString(&quot;See Back Page&quot;,font,brush,New PdfSharp.Drawing.XPoint(231,21),format)&#xA;document.AddPage()&#xA;Dim lastpage As  PdfSharp.Pdf.PdfPage= document.Pages(count)&#xA;Dim emSize2 As Integer = 14&#xA;Dim font2 As PdfSharp.Drawing.XFont = New PdfSharp.Drawing.XFont(&quot;Times New Roman&quot;, emSize2, PdfSharp.Drawing.XFontStyle.Bold)&#xA;gfx  = PdfSharp.Drawing.XGraphics.FromPdfPage(lastpage,PdfSharp.Drawing.XGraphicsPdfPageOptions.Prepend)&#xA;gfx.DrawString(watermarkC,font,brush,New PdfSharp.Drawing.XPoint(150,3),format)&#xA;gfx.DrawString(watermarkP,font,brush,New PdfSharp.Drawing.XPoint(210,3),format)&#xA;gfx.DrawString(watermarkE,font,brush,New PdfSharp.Drawing.XPoint(245,3),format)&#xA;gfx.DrawString(watermarkM,font,brush,New PdfSharp.Drawing.XPoint(320,3),format)&#xA;gfx.DrawString(watermarkpub,font,brush,New PdfSharp.Drawing.XPoint(400,3),format)&#xA;gfx.DrawString(Watermarkmos,font,brush,New PdfSharp.Drawing.XPoint(480,3),format)&#xA;&#xA;For Each comment As String In watermarkcommentarray&#xA;&#x9;i=i+1&#xA;&#x9;gfx.DrawString(comment,font,brush,New PdfSharp.Drawing.XPoint(300,12+(10*i)),format)&#xA;Next &#xA;End If&#xA;'&#xA;Dim fs As System.IO.FileStream = New FileStream(filename, FileMode.OpenOrCreate, FileAccess.ReadWrite)&#xA;document.Save(Destinationfolder)&#xA;Catch e As IO.IOException&#xA;&#x9;arg_failtostamp = True&#xA;&#x9;strException = e.ToString&#xA;&#xA;&#x9;'Dim strFile As String = &quot;C:\Users\skore\Desktop\Stamping\Exception log file\ErrorLog_&quot; &amp; DateTime.Today.ToString(&quot;yyyy-MM-dd&quot;) &amp; &quot;.txt&quot;&#xA;&#x9;'Dim sw As StreamWriter&#xA;&#x9;'Dim fs As FileStream = Nothing&#xA;&#xA;'If (Not File.Exists(strFile)) Then&#xA; '   Try&#xA;      ' fs = File.Create(strFile)&#xA;       'sw = File.AppendText(strFile)&#xA;       'sw.WriteLine(&quot;Start Error Log for today&quot;)&#xA;&#xA;    'Catch ex As Exception&#xA;     '   MsgBox(&quot;Error Creating Log File&quot;)&#xA;    'End Try&#xA;'Else&#xA;    'sw = File.AppendText(strFile)&#xA;&#x9;'sw.WriteLine(Environment.NewLine)&#xA;    'sw.WriteLine(tempfaname &amp; &quot;;&quot; &amp; tempinvnum &amp; &quot;;&quot; &amp; tempamount &amp; &quot;;&quot; &amp; temppdfpath &amp; &quot;;&quot; &amp; DateTime.Now &amp; &quot;;&quot; &amp;&quot;Can not stamp the PDF&quot;)&#xA;&#xA;    'sw.Close()&#xA;'End If&#xA;End Try" DisplayName="Invoke code - Add Text Watermark to PDF" sap:VirtualizedContainerService.HintSize="334,236" sap2010:WorkflowViewState.IdRef="InvokeCode_20">
                                          <ui:InvokeCode.Arguments>
                                            <InArgument x:TypeArguments="x:String" x:Key="InputPdfFilePath">[var_pdffilepath]</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="OutputPdfFilePath">[in_OutputPaidPdfFilePath+currentdate+"\for Ford\PAID\"+var_pdfname]</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="Watermarkclientcode">["C: "+var_C]</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="Watermarkproductcode">["P: "+var_P]</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="WatermarkEST">["E: "+var_E]</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="WatermarkMediacode">["M: "+var_MediaLookUp]</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="Watermarkpubcode">["Pub_Code: "+var_PUBLICATON_CODE]</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="Watermarkmos">["MOS: "+var_MOS]</InArgument>
                                            <InOutArgument x:TypeArguments="x:Boolean" x:Key="arg_failtostamp">[var_failtostamp]</InOutArgument>
                                            <InOutArgument x:TypeArguments="x:Int32" x:Key="count">[var_pagecount]</InOutArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="WatermarkCommentS9">["Comment: "+var_Comment_S9]</InArgument>
                                            <InArgument x:TypeArguments="s:String[]" x:Key="WatermarkCommentS9array">[arrCommentS9]</InArgument>
                                            <InArgument x:TypeArguments="x:Int32" x:Key="arg_comment_lines">[var_comment_line]</InArgument>
                                            <OutArgument x:TypeArguments="x:String" x:Key="strException">[varException]</OutArgument>
                                          </ui:InvokeCode.Arguments>
                                          <sap:WorkflowViewStateService.ViewState>
                                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                            </scg:Dictionary>
                                          </sap:WorkflowViewStateService.ViewState>
                                        </ui:InvokeCode>
                                      </TryCatch.Try>
                                      <TryCatch.Catches>
                                        <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="404,21" sap2010:WorkflowViewState.IdRef="Catch`1_4">
                                          <sap:WorkflowViewStateService.ViewState>
                                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                            </scg:Dictionary>
                                          </sap:WorkflowViewStateService.ViewState>
                                          <ActivityAction x:TypeArguments="s:Exception">
                                            <ActivityAction.Argument>
                                              <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                                            </ActivityAction.Argument>
                                            <ui:CopyFile ContinueOnError="{x:Null}" Destination="[in_OutputPaidPdfFilePath+currentdate+&quot;\for Ford\PAID\&quot;+var_pdfname]" DisplayName="Copy File" sap:VirtualizedContainerService.HintSize="434,157" sap2010:WorkflowViewState.IdRef="CopyFile_4" Overwrite="False" Path="[var_pdffilepath]" />
                                          </ActivityAction>
                                        </Catch>
                                      </TryCatch.Catches>
                                    </TryCatch>
                                    <WriteLine DisplayName="Write Line" sap:VirtualizedContainerService.HintSize="438,61" sap2010:WorkflowViewState.IdRef="WriteLine_6" Text="[varException]" />
                                  </Sequence>
                                </If.Else>
                              </If>
                            </If.Then>
                            <If.Else>
                              <If Condition="[var_PUBLICATON_CODE.Equals(&quot;106063&quot;) or var_PUBLICATON_CODE.Equals(&quot;105355&quot;) or var_PUBLICATON_CODE.Equals(&quot;101443&quot;)]" sap:VirtualizedContainerService.HintSize="921,611" sap2010:WorkflowViewState.IdRef="If_26">
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                                <If.Then>
                                  <TryCatch DisplayName="Try Catch" sap:VirtualizedContainerService.HintSize="438,380" sap2010:WorkflowViewState.IdRef="TryCatch_5">
                                    <TryCatch.Try>
                                      <ui:InvokeCode ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="VB.net Code to add Text Watermark to PDF Document&#xA;&#xA;Packages Used :  Syncfusion.Pdf.Net.Core and UiPath.System.Activities" Code="Try&#xA;Dim Destinationfolder As String = OutputPdfFilePath&#xA;Dim filename As String = InputPdfFilePath&#xA;'Dim Top as Integer = 100&#xA;Dim watermarkC As String =Watermarkclientcode&#xA;Dim watermarkP As String = Watermarkproductcode&#xA;Dim watermarkE As String = WatermarkEST&#xA;Dim watermarkM As String = WatermarkMediacode&#xA;Dim watermarkpub As String = Watermarkpubcode&#xA;Dim watermatkmos As String = Watermarkmos&#xA;Dim watermark As String = watermarkC+watermarkP+watermarkE+watermarkM+watermarkpub&#xA;Dim emSize As Integer = 8&#xA;Dim document As PdfSharp.Pdf.PdfDocument =  PdfSharp.Pdf.IO.PdfReader.Open(filename)&#xA;count=document.PageCount&#xA;Dim font As PdfSharp.Drawing.XFont = New PdfSharp.Drawing.XFont(&quot;Times New Roman&quot;, emSize, PdfSharp.Drawing.XFontStyle.Bold)&#xA;If document.Version &lt; 14 Then document.Version = 14&#xA;Dim page As PdfSharp.Pdf.PdfPage = document.Pages(0)&#xA;'page.TrimMargins.Top=20&#xA;Dim gfx As PdfSharp.Drawing.XGraphics = PdfSharp.Drawing.XGraphics.FromPdfPage(page,PdfSharp.Drawing.XGraphicsPdfPageOptions.Prepend)&#xA;Dim size As PdfSharp.Drawing.XSize = gfx.MeasureString(watermark, font)&#xA;Dim format As PdfSharp.Drawing.XStringFormat = New PdfSharp.Drawing.XStringFormat()&#xA;format.Alignment=PdfSharp.Drawing.XStringAlignment.Near&#xA;format.LineAlignment=PdfSharp.Drawing.XLineAlignment.Near&#xA;Dim pen As PdfSharp.Drawing.XPen= New PdfSharp.Drawing.XPen(PdfSharp.Drawing.XColors.Tomato)&#xA;Dim brush As PdfSharp.Drawing.XBrush= New PdfSharp.Drawing.XSolidBrush(PdfSharp.Drawing.XColor.FromArgb(255,255,0,0))&#xA;gfx.DrawRoundedRectangle(PdfSharp.Drawing.XPens.Tomato, 226, 826, 305, 22, 20, 23)&#xA;gfx.DrawString(watermarkC,font,brush,New PdfSharp.Drawing.XPoint(231,827),format)&#xA;gfx.DrawString(watermarkP,font,brush,New PdfSharp.Drawing.XPoint(266,827),format)&#xA;gfx.DrawString(watermarkE,font,brush,New PdfSharp.Drawing.XPoint(302,827),format)&#xA;gfx.DrawString(watermarkM,font,brush,New PdfSharp.Drawing.XPoint(340,827),format)&#xA;gfx.DrawString(watermarkpub,font,brush,New PdfSharp.Drawing.XPoint(410,827),format)&#xA;gfx.DrawString(Watermarkmos,font,brush,New PdfSharp.Drawing.XPoint(480,827),format)&#xA;Dim fs As System.IO.FileStream = New FileStream(filename, FileMode.OpenOrCreate, FileAccess.ReadWrite)&#xA;document.Save(Destinationfolder)&#xA;Catch&#xA;&#x9;arg_failtostamp = True&#xA;&#x9;'Dim strFile As String = &quot;C:\Users\skore\Desktop\Stamping\Exception log file\ErrorLog_&quot; &amp; DateTime.Today.ToString(&quot;yyyy-MM-dd&quot;) &amp; &quot;.txt&quot;&#xA;&#x9;'Dim sw As StreamWriter&#xA;&#x9;'Dim fs As FileStream = Nothing&#xA;&#xA;'If (Not File.Exists(strFile)) Then&#xA; '   Try&#xA;      ' fs = File.Create(strFile)&#xA;       'sw = File.AppendText(strFile)&#xA;       'sw.WriteLine(&quot;Start Error Log for today&quot;)&#xA;&#xA;    'Catch ex As Exception&#xA;     '   MsgBox(&quot;Error Creating Log File&quot;)&#xA;    'End Try&#xA;'Else&#xA;    'sw = File.AppendText(strFile)&#xA;&#x9;'sw.WriteLine(Environment.NewLine)&#xA;    'sw.WriteLine(tempfaname &amp; &quot;;&quot; &amp; tempinvnum &amp; &quot;;&quot; &amp; tempamount &amp; &quot;;&quot; &amp; temppdfpath &amp; &quot;;&quot; &amp; DateTime.Now &amp; &quot;;&quot; &amp;&quot;Can not stamp the PDF&quot;)&#xA;&#xA;    'sw.Close()&#xA;'End If&#xA;End Try" DisplayName="Invoke code - Add Text Watermark to PDF" sap:VirtualizedContainerService.HintSize="200,153" sap2010:WorkflowViewState.IdRef="InvokeCode_21">
                                        <ui:InvokeCode.Arguments>
                                          <InArgument x:TypeArguments="x:String" x:Key="InputPdfFilePath">[var_pdffilepath]</InArgument>
                                          <InArgument x:TypeArguments="x:String" x:Key="OutputPdfFilePath">[in_OutputPaidPdfFilePath+currentdate+"\for Ford\PAID\"+var_pdfname]</InArgument>
                                          <InArgument x:TypeArguments="x:String" x:Key="Watermarkclientcode">["C: "+var_C]</InArgument>
                                          <InArgument x:TypeArguments="x:String" x:Key="Watermarkproductcode">["P: "+var_P]</InArgument>
                                          <InArgument x:TypeArguments="x:String" x:Key="WatermarkEST">["E: "+var_E]</InArgument>
                                          <InArgument x:TypeArguments="x:String" x:Key="WatermarkMediacode">["M: "+var_MediaLookUp]</InArgument>
                                          <InArgument x:TypeArguments="x:String" x:Key="Watermarkpubcode">["Pub_Code: "+var_PUBLICATON_CODE]</InArgument>
                                          <InArgument x:TypeArguments="x:String" x:Key="Watermarkmos">["MOS: "+var_MOS]</InArgument>
                                          <InOutArgument x:TypeArguments="x:Boolean" x:Key="arg_failtostamp">[var_failtostamp]</InOutArgument>
                                          <InOutArgument x:TypeArguments="x:Int32" x:Key="count">[var_pagecount]</InOutArgument>
                                        </ui:InvokeCode.Arguments>
                                        <sap:WorkflowViewStateService.ViewState>
                                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                          </scg:Dictionary>
                                        </sap:WorkflowViewStateService.ViewState>
                                      </ui:InvokeCode>
                                    </TryCatch.Try>
                                    <TryCatch.Catches>
                                      <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="404,21" sap2010:WorkflowViewState.IdRef="Catch`1_5">
                                        <sap:WorkflowViewStateService.ViewState>
                                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                          </scg:Dictionary>
                                        </sap:WorkflowViewStateService.ViewState>
                                        <ActivityAction x:TypeArguments="s:Exception">
                                          <ActivityAction.Argument>
                                            <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                                          </ActivityAction.Argument>
                                          <ui:CopyFile ContinueOnError="{x:Null}" Destination="[in_OutputPaidPdfFilePath+currentdate+&quot;\for Ford\PAID\&quot;+var_pdfname]" DisplayName="Copy File" sap:VirtualizedContainerService.HintSize="434,157" sap2010:WorkflowViewState.IdRef="CopyFile_5" Overwrite="False" Path="[var_pdffilepath]" />
                                        </ActivityAction>
                                      </Catch>
                                    </TryCatch.Catches>
                                  </TryCatch>
                                </If.Then>
                                <If.Else>
                                  <TryCatch DisplayName="Try Catch" sap:VirtualizedContainerService.HintSize="438,463" sap2010:WorkflowViewState.IdRef="TryCatch_6">
                                    <TryCatch.Try>
                                      <ui:InvokeCode ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="VB.net Code to add Text Watermark to PDF Document&#xA;&#xA;Packages Used :  Syncfusion.Pdf.Net.Core and UiPath.System.Activities" Code="Try&#xA;Dim Destinationfolder As String = OutputPdfFilePath&#xA;Dim filename As String = InputPdfFilePath&#xA;'Dim Top as Integer = 100&#xA;Dim watermarkC As String =Watermarkclientcode&#xA;Dim watermarkP As String = Watermarkproductcode&#xA;Dim watermarkE As String = WatermarkEST&#xA;Dim watermarkM As String = WatermarkMediacode&#xA;Dim watermarkpub As String = Watermarkpubcode&#xA;Dim watermatkmos As String = Watermarkmos&#xA;Dim watermark As String = watermarkC+watermarkP+watermarkE+watermarkM+watermarkpub&#xA;Dim emSize As Integer = 8&#xA;Dim document As PdfSharp.Pdf.PdfDocument =  PdfSharp.Pdf.IO.PdfReader.Open(filename)&#xA;count=document.PageCount&#xA;Dim font As PdfSharp.Drawing.XFont = New PdfSharp.Drawing.XFont(&quot;Times New Roman&quot;, emSize, PdfSharp.Drawing.XFontStyle.Bold)&#xA;If document.Version &lt; 14 Then document.Version = 14&#xA;Dim page As PdfSharp.Pdf.PdfPage = document.Pages(0)&#xA;'page.TrimMargins.Top=20&#xA;Dim gfx As PdfSharp.Drawing.XGraphics = PdfSharp.Drawing.XGraphics.FromPdfPage(page,PdfSharp.Drawing.XGraphicsPdfPageOptions.Prepend)&#xA;Dim size As PdfSharp.Drawing.XSize = gfx.MeasureString(watermark, font)&#xA;Dim format As PdfSharp.Drawing.XStringFormat = New PdfSharp.Drawing.XStringFormat()&#xA;format.Alignment=PdfSharp.Drawing.XStringAlignment.Near&#xA;format.LineAlignment=PdfSharp.Drawing.XLineAlignment.Near&#xA;Dim pen As PdfSharp.Drawing.XPen= New PdfSharp.Drawing.XPen(PdfSharp.Drawing.XColors.Tomato)&#xA;Dim brush As PdfSharp.Drawing.XBrush= New PdfSharp.Drawing.XSolidBrush(PdfSharp.Drawing.XColor.FromArgb(255,255,0,0))&#xA;gfx.DrawRoundedRectangle(PdfSharp.Drawing.XPens.Tomato, 226, 2, 305, 22, 20, 23)&#xA;gfx.DrawString(watermarkC,font,brush,New PdfSharp.Drawing.XPoint(231,3),format)&#xA;gfx.DrawString(watermarkP,font,brush,New PdfSharp.Drawing.XPoint(266,3),format)&#xA;gfx.DrawString(watermarkE,font,brush,New PdfSharp.Drawing.XPoint(302,3),format)&#xA;gfx.DrawString(watermarkM,font,brush,New PdfSharp.Drawing.XPoint(340,3),format)&#xA;gfx.DrawString(watermarkpub,font,brush,New PdfSharp.Drawing.XPoint(410,3),format)&#xA;gfx.DrawString(Watermarkmos,font,brush,New PdfSharp.Drawing.XPoint(480,3),format)&#xA;Dim fs As System.IO.FileStream = New FileStream(filename, FileMode.OpenOrCreate, FileAccess.ReadWrite)&#xA;document.Save(Destinationfolder)&#xA;Catch&#xA;&#x9;arg_failtostamp = True&#xA;&#x9;'Dim strFile As String = &quot;C:\Users\skore\Desktop\Stamping\Exception log file\ErrorLog_&quot; &amp; DateTime.Today.ToString(&quot;yyyy-MM-dd&quot;) &amp; &quot;.txt&quot;&#xA;&#x9;'Dim sw As StreamWriter&#xA;&#x9;'Dim fs As FileStream = Nothing&#xA;&#xA;'If (Not File.Exists(strFile)) Then&#xA; '   Try&#xA;      ' fs = File.Create(strFile)&#xA;       'sw = File.AppendText(strFile)&#xA;       'sw.WriteLine(&quot;Start Error Log for today&quot;)&#xA;&#xA;    'Catch ex As Exception&#xA;     '   MsgBox(&quot;Error Creating Log File&quot;)&#xA;    'End Try&#xA;'Else&#xA;    'sw = File.AppendText(strFile)&#xA;&#x9;'sw.WriteLine(Environment.NewLine)&#xA;    'sw.WriteLine(tempfaname &amp; &quot;;&quot; &amp; tempinvnum &amp; &quot;;&quot; &amp; tempamount &amp; &quot;;&quot; &amp; temppdfpath &amp; &quot;;&quot; &amp; DateTime.Now &amp; &quot;;&quot; &amp;&quot;Can not stamp the PDF&quot;)&#xA;&#xA;    'sw.Close()&#xA;'End If&#xA;End Try" DisplayName="Invoke code - Add Text Watermark to PDF" sap:VirtualizedContainerService.HintSize="334,236" sap2010:WorkflowViewState.IdRef="InvokeCode_22">
                                        <ui:InvokeCode.Arguments>
                                          <InArgument x:TypeArguments="x:String" x:Key="InputPdfFilePath">[var_pdffilepath]</InArgument>
                                          <InArgument x:TypeArguments="x:String" x:Key="OutputPdfFilePath">[in_OutputPaidPdfFilePath+currentdate+"\for Ford\PAID\"+var_pdfname]</InArgument>
                                          <InArgument x:TypeArguments="x:String" x:Key="Watermarkclientcode">["C: "+var_C]</InArgument>
                                          <InArgument x:TypeArguments="x:String" x:Key="Watermarkproductcode">["P: "+var_P]</InArgument>
                                          <InArgument x:TypeArguments="x:String" x:Key="WatermarkEST">["E: "+var_E]</InArgument>
                                          <InArgument x:TypeArguments="x:String" x:Key="WatermarkMediacode">["M: "+var_MediaLookUp]</InArgument>
                                          <InArgument x:TypeArguments="x:String" x:Key="Watermarkpubcode">["Pub_Code: "+var_PUBLICATON_CODE]</InArgument>
                                          <InArgument x:TypeArguments="x:String" x:Key="Watermarkmos">["MOS: "+var_MOS]</InArgument>
                                          <InOutArgument x:TypeArguments="x:Boolean" x:Key="arg_failtostamp">[var_failtostamp]</InOutArgument>
                                          <InOutArgument x:TypeArguments="x:Int32" x:Key="count">[var_pagecount]</InOutArgument>
                                        </ui:InvokeCode.Arguments>
                                        <sap:WorkflowViewStateService.ViewState>
                                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                          </scg:Dictionary>
                                        </sap:WorkflowViewStateService.ViewState>
                                      </ui:InvokeCode>
                                    </TryCatch.Try>
                                    <TryCatch.Catches>
                                      <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="404,21" sap2010:WorkflowViewState.IdRef="Catch`1_6">
                                        <sap:WorkflowViewStateService.ViewState>
                                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                          </scg:Dictionary>
                                        </sap:WorkflowViewStateService.ViewState>
                                        <ActivityAction x:TypeArguments="s:Exception">
                                          <ActivityAction.Argument>
                                            <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                                          </ActivityAction.Argument>
                                          <ui:CopyFile ContinueOnError="{x:Null}" Destination="[in_OutputPaidPdfFilePath+currentdate+&quot;\for Ford\PAID\&quot;+var_pdfname]" DisplayName="Copy File" sap:VirtualizedContainerService.HintSize="434,157" sap2010:WorkflowViewState.IdRef="CopyFile_6" Overwrite="False" Path="[var_pdffilepath]" />
                                        </ActivityAction>
                                      </Catch>
                                    </TryCatch.Catches>
                                  </TryCatch>
                                </If.Else>
                              </If>
                            </If.Else>
                          </If>
                        </Sequence>
                      </If.Else>
                    </If>
                    <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="2979,51" sap2010:WorkflowViewState.IdRef="CommentOut_3">
                      <ui:CommentOut.Body>
                        <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="1052,158" sap2010:WorkflowViewState.IdRef="Sequence_27">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <Sequence sap:VirtualizedContainerService.HintSize="200,66" sap2010:WorkflowViewState.IdRef="Sequence_8">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <If Condition="[var_fastatus.tolower.Contains(&quot;split - s9&quot;)]" DisplayName="If - If - When FA_Status = split-S9 then Stamp with comment also" sap:VirtualizedContainerService.HintSize="968,1102" sap2010:WorkflowViewState.IdRef="If_21">
                              <If.Then>
                                <If Condition="[var_PUBLICATON_CODE.Equals(&quot;106063&quot;) or var_PUBLICATON_CODE.Equals(&quot;105355&quot;) or var_PUBLICATON_CODE.Equals(&quot;101443&quot;)]" DisplayName="If " sap:VirtualizedContainerService.HintSize="723,954" sap2010:WorkflowViewState.IdRef="If_20">
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                  <If.Then>
                                    <ui:InvokeCode ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="VB.net Code to add Text Watermark to PDF Document&#xA;&#xA;Packages Used :  Syncfusion.Pdf.Net.Core and UiPath.System.Activities" Code="Try&#xA;Dim Destinationfolder As String = OutputPdfFilePath&#xA;Dim filename As String = InputPdfFilePath&#xA;Dim i As Integer = -1&#xA;'Dim Top as Integer = 100&#xA;Dim watermarkC As String =Watermarkclientcode&#xA;Dim watermarkP As String = Watermarkproductcode&#xA;Dim watermarkE As String = WatermarkEST&#xA;Dim watermarkM As String = WatermarkMediacode&#xA;Dim watermarkpub As String = Watermarkpubcode&#xA;Dim watermatkmos As String = Watermarkmos&#xA;Dim watermarkcomments9 As String = WatermarkCommentS9&#xA;&#xA;Dim watermarkcommentline As Integer = arg_comment_lines&#xA;Dim watermarkcommentarray( ) As String = WatermarkCommentS9array&#xA;ReDim Preserve watermarkcommentarray(watermarkcommentline-1)&#xA;&#xA;Dim watermark As String = watermarkC+watermarkP+watermarkE+watermarkM+watermarkpub+ watermarkcomments9&#xA;Dim emSize As Integer = 8&#xA;Dim document As PdfSharp.Pdf.PdfDocument =  PdfSharp.Pdf.IO.PdfReader.Open(filename)&#xA;count=document.PageCount&#xA;Dim font As PdfSharp.Drawing.XFont = New PdfSharp.Drawing.XFont(&quot;Times New Roman&quot;, emSize, PdfSharp.Drawing.XFontStyle.Bold)&#xA;If document.Version &lt; 14 Then document.Version = 14&#xA;Dim page As PdfSharp.Pdf.PdfPage = document.Pages(0)&#xA;'page.TrimMargins.Top=20&#xA;Dim gfx As PdfSharp.Drawing.XGraphics = PdfSharp.Drawing.XGraphics.FromPdfPage(page,PdfSharp.Drawing.XGraphicsPdfPageOptions.Prepend)&#xA;Dim size As PdfSharp.Drawing.XSize = gfx.MeasureString(watermark, font)&#xA;Dim format As PdfSharp.Drawing.XStringFormat = New PdfSharp.Drawing.XStringFormat()&#xA;format.Alignment=PdfSharp.Drawing.XStringAlignment.Near&#xA;format.LineAlignment=PdfSharp.Drawing.XLineAlignment.Near&#xA;Dim pen As PdfSharp.Drawing.XPen= New PdfSharp.Drawing.XPen(PdfSharp.Drawing.XColors.Tomato)&#xA;Dim brush As PdfSharp.Drawing.XBrush= New PdfSharp.Drawing.XSolidBrush(PdfSharp.Drawing.XColor.FromArgb(255,255,0,0))&#xA;'gfx.DrawRoundedRectangle(PdfSharp.Drawing.XPens.Tomato, 226, 826, 305, 22, 20, 23)&#xA;gfx.DrawString(watermarkC,font,brush,New PdfSharp.Drawing.XPoint(231,827),format)&#xA;gfx.DrawString(watermarkP,font,brush,New PdfSharp.Drawing.XPoint(266,827),format)&#xA;gfx.DrawString(watermarkE,font,brush,New PdfSharp.Drawing.XPoint(302,827),format)&#xA;gfx.DrawString(watermarkM,font,brush,New PdfSharp.Drawing.XPoint(340,827),format)&#xA;gfx.DrawString(watermarkpub,font,brush,New PdfSharp.Drawing.XPoint(410,827),format)&#xA;gfx.DrawString(Watermarkmos,font,brush,New PdfSharp.Drawing.XPoint(480,827),format)&#xA;'&#xA;If watermarkcommentline &lt; 3&#xA;&#x9;For Each comment As String In watermarkcommentarray&#xA;&#x9;i=i+1&#xA;&#x9;gfx.DrawString(comment,font,brush,New PdfSharp.Drawing.XPoint(231,827+(9*i)),format)&#xA;Next &#xA;Else&#xA;&#x9;gfx.DrawString(watermarkcommentarray(0),font,brush,New PdfSharp.Drawing.XPoint(231,836),format)&#xA;&#x9;gfx.DrawString(&quot;See Back Page&quot;,font,brush,New PdfSharp.Drawing.XPoint(231,845),format)&#xA;document.AddPage()&#xA;Dim lastpage As  PdfSharp.Pdf.PdfPage= document.Pages(count)&#xA;Dim emSize2 As Integer = 14&#xA;Dim font2 As PdfSharp.Drawing.XFont = New PdfSharp.Drawing.XFont(&quot;Times New Roman&quot;, emSize2, PdfSharp.Drawing.XFontStyle.Bold)&#xA;gfx  = PdfSharp.Drawing.XGraphics.FromPdfPage(lastpage,PdfSharp.Drawing.XGraphicsPdfPageOptions.Prepend)&#xA;gfx.DrawString(watermarkC,font,brush,New PdfSharp.Drawing.XPoint(150,3),format)&#xA;gfx.DrawString(watermarkP,font,brush,New PdfSharp.Drawing.XPoint(210,3),format)&#xA;gfx.DrawString(watermarkE,font,brush,New PdfSharp.Drawing.XPoint(245,3),format)&#xA;gfx.DrawString(watermarkM,font,brush,New PdfSharp.Drawing.XPoint(320,3),format)&#xA;gfx.DrawString(watermarkpub,font,brush,New PdfSharp.Drawing.XPoint(400,3),format)&#xA;gfx.DrawString(Watermarkmos,font,brush,New PdfSharp.Drawing.XPoint(480,3),format)&#xA;&#xA;For Each comment As String In watermarkcommentarray&#xA;&#x9;i=i+1&#xA;&#x9;gfx.DrawString(comment,font,brush,New PdfSharp.Drawing.XPoint(300,12+(10*i)),format)&#xA;Next &#xA;End If&#xA;'&#xA;&#xA;Dim fs As System.IO.FileStream = New FileStream(filename, FileMode.OpenOrCreate, FileAccess.ReadWrite)&#xA;document.Save(Destinationfolder)&#xA;Catch&#xA;&#x9;arg_failtostamp = True&#xA;&#x9;'Dim strFile As String = &quot;C:\Users\skore\Desktop\Stamping\Exception log file\ErrorLog_&quot; &amp; DateTime.Today.ToString(&quot;yyyy-MM-dd&quot;) &amp; &quot;.txt&quot;&#xA;&#x9;'Dim sw As StreamWriter&#xA;&#x9;'Dim fs As FileStream = Nothing&#xA;&#xA;'If (Not File.Exists(strFile)) Then&#xA; '   Try&#xA;      ' fs = File.Create(strFile)&#xA;       'sw = File.AppendText(strFile)&#xA;       'sw.WriteLine(&quot;Start Error Log for today&quot;)&#xA;&#xA;    'Catch ex As Exception&#xA;     '   MsgBox(&quot;Error Creating Log File&quot;)&#xA;    'End Try&#xA;'Else&#xA;    'sw = File.AppendText(strFile)&#xA;&#x9;'sw.WriteLine(Environment.NewLine)&#xA;    'sw.WriteLine(tempfaname &amp; &quot;;&quot; &amp; tempinvnum &amp; &quot;;&quot; &amp; tempamount &amp; &quot;;&quot; &amp; temppdfpath &amp; &quot;;&quot; &amp; DateTime.Now &amp; &quot;;&quot; &amp;&quot;Can not stamp the PDF&quot;)&#xA;&#xA;    'sw.Close()&#xA;'End If&#xA;End Try" DisplayName="Invoke code - Add Text Watermark to PDF" sap:VirtualizedContainerService.HintSize="200,153" sap2010:WorkflowViewState.IdRef="InvokeCode_12">
                                      <ui:InvokeCode.Arguments>
                                        <InArgument x:TypeArguments="x:String" x:Key="InputPdfFilePath">[var_pdffilepath]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="OutputPdfFilePath">[in_OutputPaidPdfFilePath+currentdate+"\For all\PAID\"+var_pdfname]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="Watermarkclientcode">["C: "+var_C]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="Watermarkproductcode">["P: "+var_P]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="WatermarkEST">["E: "+var_E]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="WatermarkMediacode">["M: "+var_MediaLookUp]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="Watermarkpubcode">["Pub_Code: "+var_PUBLICATON_CODE]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="Watermarkmos">["MOS: "+var_MOS]</InArgument>
                                        <InOutArgument x:TypeArguments="x:Boolean" x:Key="arg_failtostamp">[var_failtostamp]</InOutArgument>
                                        <InOutArgument x:TypeArguments="x:Int32" x:Key="count">[var_pagecount]</InOutArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="WatermarkCommentS9">["Comment: "+var_Comment_S9]</InArgument>
                                        <InArgument x:TypeArguments="s:String[]" x:Key="WatermarkCommentS9array">[arrCommentS9]</InArgument>
                                        <InArgument x:TypeArguments="x:Int32" x:Key="arg_comment_lines">[var_comment_line]</InArgument>
                                      </ui:InvokeCode.Arguments>
                                      <sap:WorkflowViewStateService.ViewState>
                                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                        </scg:Dictionary>
                                      </sap:WorkflowViewStateService.ViewState>
                                    </ui:InvokeCode>
                                  </If.Then>
                                  <If.Else>
                                    <Sequence sap:VirtualizedContainerService.HintSize="478,806" sap2010:WorkflowViewState.IdRef="Sequence_21">
                                      <sap:WorkflowViewStateService.ViewState>
                                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                        </scg:Dictionary>
                                      </sap:WorkflowViewStateService.ViewState>
                                      <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="436,144" sap2010:WorkflowViewState.IdRef="CommentOut_2">
                                        <ui:CommentOut.Body>
                                          <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="200,66" sap2010:WorkflowViewState.IdRef="Sequence_19">
                                            <sap:WorkflowViewStateService.ViewState>
                                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                              </scg:Dictionary>
                                            </sap:WorkflowViewStateService.ViewState>
                                            <ui:InvokeCode ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="VB.net Code to add Text Watermark to PDF Document&#xA;&#xA;Packages Used :  Syncfusion.Pdf.Net.Core and UiPath.System.Activities" Code="Try&#xA;Dim Destinationfolder As String = OutputPdfFilePath&#xA;Dim filename As String = InputPdfFilePath&#xA;'Dim Top as Integer = 100&#xA;Dim i As Integer&#xA;Dim watermarkC As String =Watermarkclientcode&#xA;Dim watermarkP As String = Watermarkproductcode&#xA;Dim watermarkE As String = WatermarkEST&#xA;Dim watermarkM As String = WatermarkMediacode&#xA;Dim watermarkpub As String = Watermarkpubcode&#xA;Dim watermatkmos As String = Watermarkmos&#xA;Dim watermarkcomment As String = WatermarkCommentS9&#xA;Dim watermarkcommentline As Integer = arg_comment_lines&#xA;Dim watermarkcommentarray(watermarkcommentline-1 ) As String&#xA;Dim watermark As String = watermarkC+watermarkP+watermarkE+watermarkM+watermarkpub + watermarkcomment&#xA;Dim emSize As Integer = 8&#xA;Dim document As PdfSharp.Pdf.PdfDocument =  PdfSharp.Pdf.IO.PdfReader.Open(filename)&#xA;count=document.PageCount&#xA;Dim font As PdfSharp.Drawing.XFont = New PdfSharp.Drawing.XFont(&quot;Times New Roman&quot;, emSize, PdfSharp.Drawing.XFontStyle.Bold)&#xA;If document.Version &lt; 14 Then document.Version = 14&#xA;Dim page As PdfSharp.Pdf.PdfPage = document.Pages(0)&#xA;'page.TrimMargins.Top=20&#xA;Dim gfx As PdfSharp.Drawing.XGraphics = PdfSharp.Drawing.XGraphics.FromPdfPage(page,PdfSharp.Drawing.XGraphicsPdfPageOptions.Prepend)&#xA;Dim size As PdfSharp.Drawing.XSize = gfx.MeasureString(watermark, font)&#xA;Dim format As PdfSharp.Drawing.XStringFormat = New PdfSharp.Drawing.XStringFormat()&#xA;format.Alignment=PdfSharp.Drawing.XStringAlignment.Near&#xA;format.LineAlignment=PdfSharp.Drawing.XLineAlignment.Near&#xA;Dim pen As PdfSharp.Drawing.XPen= New PdfSharp.Drawing.XPen(PdfSharp.Drawing.XColors.Tomato)&#xA;Dim brush As PdfSharp.Drawing.XBrush= New PdfSharp.Drawing.XSolidBrush(PdfSharp.Drawing.XColor.FromArgb(255,255,0,0))&#xA;'gfx.DrawRoundedRectangle(PdfSharp.Drawing.XPens.Tomato, 226, 2, 305, 22, 20, 23)&#xA;gfx.DrawString(watermarkC,font,brush,New PdfSharp.Drawing.XPoint(231,3),format)&#xA;gfx.DrawString(watermarkP,font,brush,New PdfSharp.Drawing.XPoint(266,3),format)&#xA;gfx.DrawString(watermarkE,font,brush,New PdfSharp.Drawing.XPoint(302,3),format)&#xA;gfx.DrawString(watermarkM,font,brush,New PdfSharp.Drawing.XPoint(340,3),format)&#xA;gfx.DrawString(watermarkpub,font,brush,New PdfSharp.Drawing.XPoint(410,3),format)&#xA;gfx.DrawString(Watermarkmos,font,brush,New PdfSharp.Drawing.XPoint(480,3),format)&#xA;For i = 0 To watermarkcommentline-1&#xA;&#x9;gfx.DrawString(watermarkcomment,font,brush,New PdfSharp.Drawing.XPoint(231,12+(9*i)),format)&#xA;Next i&#x9;&#xA;Dim fs As System.IO.FileStream = New FileStream(filename, FileMode.OpenOrCreate, FileAccess.ReadWrite)&#xA;document.Save(Destinationfolder)&#xA;Catch e As IO.IOException&#xA;&#x9;strException = e.ToString&#xA;&#x9;arg_failtostamp = True&#xA;&#x9;&#xA;&#x9;'Dim strFile As String = &quot;C:\Users\skore\Desktop\Stamping\Exception log file\ErrorLog_&quot; &amp; DateTime.Today.ToString(&quot;yyyy-MM-dd&quot;) &amp; &quot;.txt&quot;&#xA;&#x9;'Dim sw As StreamWriter&#xA;&#x9;'Dim fs As FileStream = Nothing&#xA;&#xA;'If (Not File.Exists(strFile)) Then&#xA; '   Try&#xA;      ' fs = File.Create(strFile)&#xA;       'sw = File.AppendText(strFile)&#xA;       'sw.WriteLine(&quot;Start Error Log for today&quot;)&#xA;&#xA;    'Catch ex As Exception&#xA;     '   MsgBox(&quot;Error Creating Log File&quot;)&#xA;    'End Try&#xA;'Else&#xA;    'sw = File.AppendText(strFile)&#xA;&#x9;'sw.WriteLine(Environment.NewLine)&#xA;    'sw.WriteLine(tempfaname &amp; &quot;;&quot; &amp; tempinvnum &amp; &quot;;&quot; &amp; tempamount &amp; &quot;;&quot; &amp; temppdfpath &amp; &quot;;&quot; &amp; DateTime.Now &amp; &quot;;&quot; &amp;&quot;Can not stamp the PDF&quot;)&#xA;&#xA;    'sw.Close()&#xA;'End If&#xA;End Try" DisplayName="Invoke code - Add Text Watermark to PDF" sap:VirtualizedContainerService.HintSize="334,236" sap2010:WorkflowViewState.IdRef="InvokeCode_13">
                                              <ui:InvokeCode.Arguments>
                                                <InArgument x:TypeArguments="x:String" x:Key="InputPdfFilePath">[var_pdffilepath]</InArgument>
                                                <InArgument x:TypeArguments="x:String" x:Key="OutputPdfFilePath">[in_OutputPaidPdfFilePath+currentdate+"\For all\PAID\"+var_pdfname]</InArgument>
                                                <InArgument x:TypeArguments="x:String" x:Key="Watermarkclientcode">["C: "+var_C]</InArgument>
                                                <InArgument x:TypeArguments="x:String" x:Key="Watermarkproductcode">["P: "+var_P]</InArgument>
                                                <InArgument x:TypeArguments="x:String" x:Key="WatermarkEST">["E: "+var_E]</InArgument>
                                                <InArgument x:TypeArguments="x:String" x:Key="WatermarkMediacode">["M: "+var_MediaLookUp]</InArgument>
                                                <InArgument x:TypeArguments="x:String" x:Key="Watermarkpubcode">["Pub_Code: "+var_PUBLICATON_CODE]</InArgument>
                                                <InArgument x:TypeArguments="x:String" x:Key="Watermarkmos">["MOS: "+var_MOS]</InArgument>
                                                <InOutArgument x:TypeArguments="x:Boolean" x:Key="arg_failtostamp">[var_failtostamp]</InOutArgument>
                                                <InOutArgument x:TypeArguments="x:Int32" x:Key="count">[var_pagecount]</InOutArgument>
                                                <InArgument x:TypeArguments="x:String" x:Key="WatermarkCommentS9">["Comment: "+var_Comment_S9]</InArgument>
                                                <InArgument x:TypeArguments="s:String[]" x:Key="WatermarkCommentS9array">[arrCommentS9]</InArgument>
                                                <InArgument x:TypeArguments="x:Int32" x:Key="arg_comment_lines">[var_comment_line]</InArgument>
                                                <OutArgument x:TypeArguments="x:String" x:Key="strException">[varException]</OutArgument>
                                              </ui:InvokeCode.Arguments>
                                              <sap:WorkflowViewStateService.ViewState>
                                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                                </scg:Dictionary>
                                              </sap:WorkflowViewStateService.ViewState>
                                            </ui:InvokeCode>
                                          </Sequence>
                                        </ui:CommentOut.Body>
                                      </ui:CommentOut>
                                      <Sequence sap:VirtualizedContainerService.HintSize="436,429" sap2010:WorkflowViewState.IdRef="Sequence_20">
                                        <sap:WorkflowViewStateService.ViewState>
                                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                          </scg:Dictionary>
                                        </sap:WorkflowViewStateService.ViewState>
                                        <ui:InvokeCode ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="VB.net Code to add Text Watermark to PDF Document&#xA;&#xA;Packages Used :  Syncfusion.Pdf.Net.Core and UiPath.System.Activities" Code="Try&#xA;Dim Destinationfolder As String = OutputPdfFilePath&#xA;Dim filename As String = InputPdfFilePath&#xA;'Dim Top as Integer = 100&#xA;Dim i As Integer = -1&#xA;Dim watermarkC As String =Watermarkclientcode&#xA;Dim watermarkP As String = Watermarkproductcode&#xA;Dim watermarkE As String = WatermarkEST&#xA;Dim watermarkM As String = WatermarkMediacode&#xA;Dim watermarkpub As String = Watermarkpubcode&#xA;Dim watermatkmos As String = Watermarkmos&#xA;Dim watermarkcomment As String = WatermarkCommentS9&#xA;Dim watermarkcommentline As Integer = arg_comment_lines&#xA;Dim watermarkcommentarray( ) As String = WatermarkCommentS9array&#xA;ReDim Preserve watermarkcommentarray(watermarkcommentline-1)&#xA;Dim watermark As String = watermarkC+watermarkP+watermarkE+watermarkM+watermarkpub + watermarkcomment&#xA;Dim emSize As Integer = 8&#xA;Dim document As PdfSharp.Pdf.PdfDocument =  PdfSharp.Pdf.IO.PdfReader.Open(filename)&#xA;count=document.PageCount&#xA;Dim font As PdfSharp.Drawing.XFont = New PdfSharp.Drawing.XFont(&quot;Times New Roman&quot;, emSize, PdfSharp.Drawing.XFontStyle.Bold)&#xA;If document.Version &lt; 14 Then document.Version = 14&#xA;Dim page As PdfSharp.Pdf.PdfPage = document.Pages(0)&#xA;&#xA;'page.TrimMargins.Top=20&#xA;Dim gfx As PdfSharp.Drawing.XGraphics = PdfSharp.Drawing.XGraphics.FromPdfPage(page,PdfSharp.Drawing.XGraphicsPdfPageOptions.Prepend)&#xA;Dim size As PdfSharp.Drawing.XSize = gfx.MeasureString(watermark, font)&#xA;Dim format As PdfSharp.Drawing.XStringFormat = New PdfSharp.Drawing.XStringFormat()&#xA;format.Alignment=PdfSharp.Drawing.XStringAlignment.Near&#xA;format.LineAlignment=PdfSharp.Drawing.XLineAlignment.Near&#xA;Dim pen As PdfSharp.Drawing.XPen= New PdfSharp.Drawing.XPen(PdfSharp.Drawing.XColors.Tomato)&#xA;Dim brush As PdfSharp.Drawing.XBrush= New PdfSharp.Drawing.XSolidBrush(PdfSharp.Drawing.XColor.FromArgb(255,255,0,0))&#xA;'gfx.DrawRoundedRectangle(PdfSharp.Drawing.XPens.Tomato, 226, 2, 305, 22, 20, 23)&#xA;gfx.DrawString(watermarkC,font,brush,New PdfSharp.Drawing.XPoint(231,3),format)&#xA;gfx.DrawString(watermarkP,font,brush,New PdfSharp.Drawing.XPoint(266,3),format)&#xA;gfx.DrawString(watermarkE,font,brush,New PdfSharp.Drawing.XPoint(302,3),format)&#xA;gfx.DrawString(watermarkM,font,brush,New PdfSharp.Drawing.XPoint(340,3),format)&#xA;gfx.DrawString(watermarkpub,font,brush,New PdfSharp.Drawing.XPoint(410,3),format)&#xA;gfx.DrawString(Watermarkmos,font,brush,New PdfSharp.Drawing.XPoint(480,3),format)&#xA;'&#xA;document.AddPage()&#xA;Dim lastpage As PdfSharp.Pdf.PdfPage = document.Pages(count)&#xA;Dim gfx As PdfSharp.Drawing.XGraphics = PdfSharp.Drawing.XGraphics.FromPdfPage(lastpage,PdfSharp.Drawing.XGraphicsPdfPageOptions.Prepend)&#xA;gfx.DrawString(watermarkcomment,font,brush,New PdfSharp.Drawing.XPoint(231,3),format)&#xA;'&#xA;For Each comment As String In watermarkcommentarray&#xA;&#x9;i=i+1&#xA;&#x9;gfx.DrawString(comment,font,brush,New PdfSharp.Drawing.XPoint(231,12+(9*i)),format)&#xA;Next &#x9;&#xA;Dim fs As System.IO.FileStream = New FileStream(filename, FileMode.OpenOrCreate, FileAccess.ReadWrite)&#xA;document.Save(Destinationfolder)&#xA;Catch e As IO.IOException&#xA;&#x9;strException = e.ToString&#xA;&#x9;arg_failtostamp = True&#xA;&#x9;&#xA;&#x9;'Dim strFile As String = &quot;C:\Users\skore\Desktop\Stamping\Exception log file\ErrorLog_&quot; &amp; DateTime.Today.ToString(&quot;yyyy-MM-dd&quot;) &amp; &quot;.txt&quot;&#xA;&#x9;'Dim sw As StreamWriter&#xA;&#x9;'Dim fs As FileStream = Nothing&#xA;&#xA;'If (Not File.Exists(strFile)) Then&#xA; '   Try&#xA;      ' fs = File.Create(strFile)&#xA;       'sw = File.AppendText(strFile)&#xA;       'sw.WriteLine(&quot;Start Error Log for today&quot;)&#xA;&#xA;    'Catch ex As Exception&#xA;     '   MsgBox(&quot;Error Creating Log File&quot;)&#xA;    'End Try&#xA;'Else&#xA;    'sw = File.AppendText(strFile)&#xA;&#x9;'sw.WriteLine(Environment.NewLine)&#xA;    'sw.WriteLine(tempfaname &amp; &quot;;&quot; &amp; tempinvnum &amp; &quot;;&quot; &amp; tempamount &amp; &quot;;&quot; &amp; temppdfpath &amp; &quot;;&quot; &amp; DateTime.Now &amp; &quot;;&quot; &amp;&quot;Can not stamp the PDF&quot;)&#xA;&#xA;    'sw.Close()&#xA;'End If&#xA;End Try" DisplayName="Invoke code - Add Text Watermark to PDF" sap:VirtualizedContainerService.HintSize="334,236" sap2010:WorkflowViewState.IdRef="InvokeCode_14">
                                          <ui:InvokeCode.Arguments>
                                            <InArgument x:TypeArguments="x:String" x:Key="InputPdfFilePath">[var_pdffilepath]</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="OutputPdfFilePath">[in_OutputPaidPdfFilePath+currentdate+"\For all\PAID\"+var_pdfname]</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="Watermarkclientcode">["C: "+var_C]</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="Watermarkproductcode">["P: "+var_P]</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="WatermarkEST">["E: "+var_E]</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="WatermarkMediacode">["M: "+var_MediaLookUp]</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="Watermarkpubcode">["Pub_Code: "+var_PUBLICATON_CODE]</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="Watermarkmos">["MOS: "+var_MOS]</InArgument>
                                            <InOutArgument x:TypeArguments="x:Boolean" x:Key="arg_failtostamp">[var_failtostamp]</InOutArgument>
                                            <InOutArgument x:TypeArguments="x:Int32" x:Key="count">[var_pagecount]</InOutArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="WatermarkCommentS9">["Comment: "+var_Comment_S9]</InArgument>
                                            <InArgument x:TypeArguments="s:String[]" x:Key="WatermarkCommentS9array">[arrCommentS9]</InArgument>
                                            <InArgument x:TypeArguments="x:Int32" x:Key="arg_comment_lines">[var_comment_line]</InArgument>
                                            <OutArgument x:TypeArguments="x:String" x:Key="strException">[varException]</OutArgument>
                                          </ui:InvokeCode.Arguments>
                                          <sap:WorkflowViewStateService.ViewState>
                                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                            </scg:Dictionary>
                                          </sap:WorkflowViewStateService.ViewState>
                                        </ui:InvokeCode>
                                        <WriteLine DisplayName="Write Line" sap:VirtualizedContainerService.HintSize="334,61" sap2010:WorkflowViewState.IdRef="WriteLine_2" Text="[varException]" />
                                      </Sequence>
                                      <WriteLine DisplayName="Write Line" sap:VirtualizedContainerService.HintSize="436,61" sap2010:WorkflowViewState.IdRef="WriteLine_3" Text="[varException]" />
                                    </Sequence>
                                  </If.Else>
                                </If>
                              </If.Then>
                              <If.Else>
                                <If Condition="[var_PUBLICATON_CODE.Equals(&quot;106063&quot;) or var_PUBLICATON_CODE.Equals(&quot;105355&quot;) or var_PUBLICATON_CODE.Equals(&quot;101443&quot;)]" sap:VirtualizedContainerService.HintSize="200,51" sap2010:WorkflowViewState.IdRef="If_9">
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                  <If.Then>
                                    <ui:InvokeCode ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="VB.net Code to add Text Watermark to PDF Document&#xA;&#xA;Packages Used :  Syncfusion.Pdf.Net.Core and UiPath.System.Activities" Code="Try&#xA;Dim Destinationfolder As String = OutputPdfFilePath&#xA;Dim filename As String = InputPdfFilePath&#xA;'Dim Top as Integer = 100&#xA;Dim watermarkC As String =Watermarkclientcode&#xA;Dim watermarkP As String = Watermarkproductcode&#xA;Dim watermarkE As String = WatermarkEST&#xA;Dim watermarkM As String = WatermarkMediacode&#xA;Dim watermarkpub As String = Watermarkpubcode&#xA;Dim watermatkmos As String = Watermarkmos&#xA;Dim watermark As String = watermarkC+watermarkP+watermarkE+watermarkM+watermarkpub&#xA;Dim emSize As Integer = 8&#xA;Dim document As PdfSharp.Pdf.PdfDocument =  PdfSharp.Pdf.IO.PdfReader.Open(filename)&#xA;count=document.PageCount&#xA;Dim font As PdfSharp.Drawing.XFont = New PdfSharp.Drawing.XFont(&quot;Times New Roman&quot;, emSize, PdfSharp.Drawing.XFontStyle.Bold)&#xA;If document.Version &lt; 14 Then document.Version = 14&#xA;Dim page As PdfSharp.Pdf.PdfPage = document.Pages(0)&#xA;'page.TrimMargins.Top=20&#xA;Dim gfx As PdfSharp.Drawing.XGraphics = PdfSharp.Drawing.XGraphics.FromPdfPage(page,PdfSharp.Drawing.XGraphicsPdfPageOptions.Prepend)&#xA;Dim size As PdfSharp.Drawing.XSize = gfx.MeasureString(watermark, font)&#xA;Dim format As PdfSharp.Drawing.XStringFormat = New PdfSharp.Drawing.XStringFormat()&#xA;format.Alignment=PdfSharp.Drawing.XStringAlignment.Near&#xA;format.LineAlignment=PdfSharp.Drawing.XLineAlignment.Near&#xA;Dim pen As PdfSharp.Drawing.XPen= New PdfSharp.Drawing.XPen(PdfSharp.Drawing.XColors.Tomato)&#xA;Dim brush As PdfSharp.Drawing.XBrush= New PdfSharp.Drawing.XSolidBrush(PdfSharp.Drawing.XColor.FromArgb(255,255,0,0))&#xA;gfx.DrawRoundedRectangle(PdfSharp.Drawing.XPens.Tomato, 226, 826, 305, 22, 20, 23)&#xA;gfx.DrawString(watermarkC,font,brush,New PdfSharp.Drawing.XPoint(231,827),format)&#xA;gfx.DrawString(watermarkP,font,brush,New PdfSharp.Drawing.XPoint(266,827),format)&#xA;gfx.DrawString(watermarkE,font,brush,New PdfSharp.Drawing.XPoint(302,827),format)&#xA;gfx.DrawString(watermarkM,font,brush,New PdfSharp.Drawing.XPoint(340,827),format)&#xA;gfx.DrawString(watermarkpub,font,brush,New PdfSharp.Drawing.XPoint(410,827),format)&#xA;gfx.DrawString(Watermarkmos,font,brush,New PdfSharp.Drawing.XPoint(480,827),format)&#xA;Dim fs As System.IO.FileStream = New FileStream(filename, FileMode.OpenOrCreate, FileAccess.ReadWrite)&#xA;document.Save(Destinationfolder)&#xA;Catch&#xA;&#x9;arg_failtostamp = True&#xA;&#x9;'Dim strFile As String = &quot;C:\Users\skore\Desktop\Stamping\Exception log file\ErrorLog_&quot; &amp; DateTime.Today.ToString(&quot;yyyy-MM-dd&quot;) &amp; &quot;.txt&quot;&#xA;&#x9;'Dim sw As StreamWriter&#xA;&#x9;'Dim fs As FileStream = Nothing&#xA;&#xA;'If (Not File.Exists(strFile)) Then&#xA; '   Try&#xA;      ' fs = File.Create(strFile)&#xA;       'sw = File.AppendText(strFile)&#xA;       'sw.WriteLine(&quot;Start Error Log for today&quot;)&#xA;&#xA;    'Catch ex As Exception&#xA;     '   MsgBox(&quot;Error Creating Log File&quot;)&#xA;    'End Try&#xA;'Else&#xA;    'sw = File.AppendText(strFile)&#xA;&#x9;'sw.WriteLine(Environment.NewLine)&#xA;    'sw.WriteLine(tempfaname &amp; &quot;;&quot; &amp; tempinvnum &amp; &quot;;&quot; &amp; tempamount &amp; &quot;;&quot; &amp; temppdfpath &amp; &quot;;&quot; &amp; DateTime.Now &amp; &quot;;&quot; &amp;&quot;Can not stamp the PDF&quot;)&#xA;&#xA;    'sw.Close()&#xA;'End If&#xA;End Try" DisplayName="Invoke code - Add Text Watermark to PDF" sap:VirtualizedContainerService.HintSize="200,153" sap2010:WorkflowViewState.IdRef="InvokeCode_8">
                                      <ui:InvokeCode.Arguments>
                                        <InArgument x:TypeArguments="x:String" x:Key="InputPdfFilePath">[var_pdffilepath]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="OutputPdfFilePath">[in_FordPaidpdffilepath+currentdate+"\for Ford\PAID\"+var_pdfname]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="Watermarkclientcode">["C: "+var_C]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="Watermarkproductcode">["P: "+var_P]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="WatermarkEST">["E: "+var_E]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="WatermarkMediacode">["M: "+var_MediaLookUp]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="Watermarkpubcode">["Pub_Code: "+var_PUBLICATON_CODE]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="Watermarkmos">["MOS: "+var_MOS]</InArgument>
                                        <InOutArgument x:TypeArguments="x:Boolean" x:Key="arg_failtostamp">[var_failtostamp]</InOutArgument>
                                        <InOutArgument x:TypeArguments="x:Int32" x:Key="count">[var_pagecount]</InOutArgument>
                                      </ui:InvokeCode.Arguments>
                                      <sap:WorkflowViewStateService.ViewState>
                                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                        </scg:Dictionary>
                                      </sap:WorkflowViewStateService.ViewState>
                                    </ui:InvokeCode>
                                  </If.Then>
                                  <If.Else>
                                    <ui:InvokeCode ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="VB.net Code to add Text Watermark to PDF Document&#xA;&#xA;Packages Used :  Syncfusion.Pdf.Net.Core and UiPath.System.Activities" Code="Try&#xA;Dim Destinationfolder As String = OutputPdfFilePath&#xA;Dim filename As String = InputPdfFilePath&#xA;'Dim Top as Integer = 100&#xA;Dim watermarkC As String =Watermarkclientcode&#xA;Dim watermarkP As String = Watermarkproductcode&#xA;Dim watermarkE As String = WatermarkEST&#xA;Dim watermarkM As String = WatermarkMediacode&#xA;Dim watermarkpub As String = Watermarkpubcode&#xA;Dim watermatkmos As String = Watermarkmos&#xA;Dim watermark As String = watermarkC+watermarkP+watermarkE+watermarkM+watermarkpub&#xA;Dim emSize As Integer = 8&#xA;Dim document As PdfSharp.Pdf.PdfDocument =  PdfSharp.Pdf.IO.PdfReader.Open(filename)&#xA;count=document.PageCount&#xA;Dim font As PdfSharp.Drawing.XFont = New PdfSharp.Drawing.XFont(&quot;Times New Roman&quot;, emSize, PdfSharp.Drawing.XFontStyle.Bold)&#xA;If document.Version &lt; 14 Then document.Version = 14&#xA;Dim page As PdfSharp.Pdf.PdfPage = document.Pages(0)&#xA;'page.TrimMargins.Top=20&#xA;Dim gfx As PdfSharp.Drawing.XGraphics = PdfSharp.Drawing.XGraphics.FromPdfPage(page,PdfSharp.Drawing.XGraphicsPdfPageOptions.Prepend)&#xA;Dim size As PdfSharp.Drawing.XSize = gfx.MeasureString(watermark, font)&#xA;Dim format As PdfSharp.Drawing.XStringFormat = New PdfSharp.Drawing.XStringFormat()&#xA;format.Alignment=PdfSharp.Drawing.XStringAlignment.Near&#xA;format.LineAlignment=PdfSharp.Drawing.XLineAlignment.Near&#xA;Dim pen As PdfSharp.Drawing.XPen= New PdfSharp.Drawing.XPen(PdfSharp.Drawing.XColors.Tomato)&#xA;Dim brush As PdfSharp.Drawing.XBrush= New PdfSharp.Drawing.XSolidBrush(PdfSharp.Drawing.XColor.FromArgb(255,255,0,0))&#xA;gfx.DrawRoundedRectangle(PdfSharp.Drawing.XPens.Tomato, 226, 2, 305, 22, 20, 23)&#xA;gfx.DrawString(watermarkC,font,brush,New PdfSharp.Drawing.XPoint(231,3),format)&#xA;gfx.DrawString(watermarkP,font,brush,New PdfSharp.Drawing.XPoint(266,3),format)&#xA;gfx.DrawString(watermarkE,font,brush,New PdfSharp.Drawing.XPoint(302,3),format)&#xA;gfx.DrawString(watermarkM,font,brush,New PdfSharp.Drawing.XPoint(340,3),format)&#xA;gfx.DrawString(watermarkpub,font,brush,New PdfSharp.Drawing.XPoint(410,3),format)&#xA;gfx.DrawString(Watermarkmos,font,brush,New PdfSharp.Drawing.XPoint(480,3),format)&#xA;Dim fs As System.IO.FileStream = New FileStream(filename, FileMode.OpenOrCreate, FileAccess.ReadWrite)&#xA;document.Save(Destinationfolder)&#xA;Catch&#xA;&#x9;arg_failtostamp = True&#xA;&#x9;'Dim strFile As String = &quot;C:\Users\skore\Desktop\Stamping\Exception log file\ErrorLog_&quot; &amp; DateTime.Today.ToString(&quot;yyyy-MM-dd&quot;) &amp; &quot;.txt&quot;&#xA;&#x9;'Dim sw As StreamWriter&#xA;&#x9;'Dim fs As FileStream = Nothing&#xA;&#xA;'If (Not File.Exists(strFile)) Then&#xA; '   Try&#xA;      ' fs = File.Create(strFile)&#xA;       'sw = File.AppendText(strFile)&#xA;       'sw.WriteLine(&quot;Start Error Log for today&quot;)&#xA;&#xA;    'Catch ex As Exception&#xA;     '   MsgBox(&quot;Error Creating Log File&quot;)&#xA;    'End Try&#xA;'Else&#xA;    'sw = File.AppendText(strFile)&#xA;&#x9;'sw.WriteLine(Environment.NewLine)&#xA;    'sw.WriteLine(tempfaname &amp; &quot;;&quot; &amp; tempinvnum &amp; &quot;;&quot; &amp; tempamount &amp; &quot;;&quot; &amp; temppdfpath &amp; &quot;;&quot; &amp; DateTime.Now &amp; &quot;;&quot; &amp;&quot;Can not stamp the PDF&quot;)&#xA;&#xA;    'sw.Close()&#xA;'End If&#xA;End Try" DisplayName="Invoke code - Add Text Watermark to PDF" sap:VirtualizedContainerService.HintSize="334,236" sap2010:WorkflowViewState.IdRef="InvokeCode_9">
                                      <ui:InvokeCode.Arguments>
                                        <InArgument x:TypeArguments="x:String" x:Key="InputPdfFilePath">[var_pdffilepath]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="OutputPdfFilePath">[in_FordPaidpdffilepath+currentdate+"\for Ford\PAID\"+var_pdfname]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="Watermarkclientcode">["C: "+var_C]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="Watermarkproductcode">["P: "+var_P]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="WatermarkEST">["E: "+var_E]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="WatermarkMediacode">["M: "+var_MediaLookUp]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="Watermarkpubcode">["Pub_Code: "+var_PUBLICATON_CODE]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="Watermarkmos">["MOS: "+var_MOS]</InArgument>
                                        <InOutArgument x:TypeArguments="x:Boolean" x:Key="arg_failtostamp">[var_failtostamp]</InOutArgument>
                                        <InOutArgument x:TypeArguments="x:Int32" x:Key="count">[var_pagecount]</InOutArgument>
                                      </ui:InvokeCode.Arguments>
                                      <sap:WorkflowViewStateService.ViewState>
                                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                        </scg:Dictionary>
                                      </sap:WorkflowViewStateService.ViewState>
                                    </ui:InvokeCode>
                                  </If.Else>
                                </If>
                              </If.Else>
                            </If>
                          </Sequence>
                        </Sequence>
                      </ui:CommentOut.Body>
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                    </ui:CommentOut>
                  </Sequence>
                </If.Else>
              </If>
            </Sequence>
          </If.Then>
          <If.Else>
            <If Condition="[var_fastatus.Contains(&quot;NR&quot;)]" sap:VirtualizedContainerService.HintSize="3392,1920" sap2010:WorkflowViewState.IdRef="If_2">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <If.Then>
                <Sequence sap:VirtualizedContainerService.HintSize="200,66" sap2010:WorkflowViewState.IdRef="Sequence_4">
                  <Sequence.Variables>
                    <Variable x:TypeArguments="x:Boolean" Name="boolallpendingdatefolderexist" />
                  </Sequence.Variables>
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:PathExists DisplayName="Path Exists" Exists="[boolallpendingdatefolderexist]" sap:VirtualizedContainerService.HintSize="579,89" sap2010:WorkflowViewState.IdRef="PathExists_3" Path="[in_OutputPendingPdfFilePath+currentdate+&quot;\For all\PENDING\&quot;]" PathType="Folder" />
                  <If Condition="[boolallpendingdatefolderexist]" sap:VirtualizedContainerService.HintSize="579,227" sap2010:WorkflowViewState.IdRef="If_15">
                    <If.Else>
                      <ui:CreateDirectory ContinueOnError="{x:Null}" DisplayName="Create Folder" sap:VirtualizedContainerService.HintSize="334,79" sap2010:WorkflowViewState.IdRef="CreateDirectory_3" Path="[in_OutputPendingPdfFilePath+currentdate+&quot;\For all\PENDING\&quot;]" />
                    </If.Else>
                  </If>
                  <If Condition="[var_isnra.Equals(&quot;1&quot;)]" sap:VirtualizedContainerService.HintSize="579,208" sap2010:WorkflowViewState.IdRef="If_5">
                    <If.Then>
                      <Assign sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_1">
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:String">[var_E]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:String">NRA</InArgument>
                        </Assign.Value>
                      </Assign>
                    </If.Then>
                    <If.Else>
                      <Assign sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_2">
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:String">[var_E]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:String">NR</InArgument>
                        </Assign.Value>
                      </Assign>
                    </If.Else>
                  </If>
                  <If Condition="[var_PUBLICATON_CODE.Equals(&quot;106063&quot;) or var_PUBLICATON_CODE.Equals(&quot;105355&quot;) or var_PUBLICATON_CODE.Equals(&quot;101443&quot;)]" sap:VirtualizedContainerService.HintSize="579,384" sap2010:WorkflowViewState.IdRef="If_3">
                    <If.Then>
                      <ui:InvokeCode ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="VB.net Code to add Text Watermark to PDF Document&#xA;&#xA;Packages Used :  Syncfusion.Pdf.Net.Core and UiPath.System.Activities" Code="Try&#xA;Dim Destinationfolder As String = OutputPdfFilePath&#xA;Dim filename As String = InputPdfFilePath&#xA;'Dim Top as Integer = 100&#xA;Dim watermarkC As String =Watermarkclientcode&#xA;Dim watermarkP As String = Watermarkproductcode&#xA;Dim watermarkE As String = WatermarkEST&#xA;Dim watermarkM As String = WatermarkMediacode&#xA;Dim watermarkpub As String = Watermarkpubcode&#xA;Dim watermatkmos As String = Watermarkmos&#xA;Dim watermark As String = watermarkC+watermarkP+watermarkE+watermarkM+watermarkpub&#xA;Dim emSize As Integer = 8&#xA;Dim document As PdfSharp.Pdf.PdfDocument =  PdfSharp.Pdf.IO.PdfReader.Open(filename)&#xA;count=document.PageCount&#xA;Dim font As PdfSharp.Drawing.XFont = New PdfSharp.Drawing.XFont(&quot;Times New Roman&quot;, emSize, PdfSharp.Drawing.XFontStyle.Bold)&#xA;If document.Version &lt; 14 Then document.Version = 14&#xA;Dim page As PdfSharp.Pdf.PdfPage = document.Pages(0)&#xA;'page.TrimMargins.Top=20&#xA;Dim gfx As PdfSharp.Drawing.XGraphics = PdfSharp.Drawing.XGraphics.FromPdfPage(page,PdfSharp.Drawing.XGraphicsPdfPageOptions.Prepend)&#xA;Dim size As PdfSharp.Drawing.XSize = gfx.MeasureString(watermark, font)&#xA;Dim format As PdfSharp.Drawing.XStringFormat = New PdfSharp.Drawing.XStringFormat()&#xA;format.Alignment=PdfSharp.Drawing.XStringAlignment.Near&#xA;format.LineAlignment=PdfSharp.Drawing.XLineAlignment.Near&#xA;Dim pen As PdfSharp.Drawing.XPen= New PdfSharp.Drawing.XPen(PdfSharp.Drawing.XColors.Tomato)&#xA;Dim brush As PdfSharp.Drawing.XBrush= New PdfSharp.Drawing.XSolidBrush(PdfSharp.Drawing.XColor.FromArgb(255,255,0,0))&#xA;gfx.DrawRoundedRectangle(PdfSharp.Drawing.XPens.Tomato, 226, 826, 305, 22, 20, 23)&#xA;gfx.DrawString(watermarkC,font,brush,New PdfSharp.Drawing.XPoint(231,827),format)&#xA;gfx.DrawString(watermarkP,font,brush,New PdfSharp.Drawing.XPoint(266,827),format)&#xA;gfx.DrawString(watermarkE,font,brush,New PdfSharp.Drawing.XPoint(302,827),format)&#xA;gfx.DrawString(watermarkM,font,brush,New PdfSharp.Drawing.XPoint(340,827),format)&#xA;gfx.DrawString(watermarkpub,font,brush,New PdfSharp.Drawing.XPoint(410,827),format)&#xA;gfx.DrawString(Watermarkmos,font,brush,New PdfSharp.Drawing.XPoint(480,827),format)&#xA;Dim fs As System.IO.FileStream = New FileStream(filename, FileMode.OpenOrCreate, FileAccess.ReadWrite)&#xA;document.Save(Destinationfolder)&#xA;Catch&#xA;&#x9;arg_failtostamp = True&#xA;&#x9;'Dim strFile As String = &quot;C:\Users\skore\Desktop\Stamping\Exception log file\ErrorLog_&quot; &amp; DateTime.Today.ToString(&quot;yyyy-MM-dd&quot;) &amp; &quot;.txt&quot;&#xA;&#x9;'Dim sw As StreamWriter&#xA;&#x9;'Dim fs As FileStream = Nothing&#xA;&#xA;'If (Not File.Exists(strFile)) Then&#xA; '   Try&#xA;      ' fs = File.Create(strFile)&#xA;       'sw = File.AppendText(strFile)&#xA;       'sw.WriteLine(&quot;Start Error Log for today&quot;)&#xA;&#xA;    'Catch ex As Exception&#xA;     '   MsgBox(&quot;Error Creating Log File&quot;)&#xA;    'End Try&#xA;'Else&#xA;    'sw = File.AppendText(strFile)&#xA;&#x9;'sw.WriteLine(Environment.NewLine)&#xA;    'sw.WriteLine(tempfaname &amp; &quot;;&quot; &amp; tempinvnum &amp; &quot;;&quot; &amp; tempamount &amp; &quot;;&quot; &amp; temppdfpath &amp; &quot;;&quot; &amp; DateTime.Now &amp; &quot;;&quot; &amp;&quot;Can not stamp the PDF&quot;)&#xA;&#xA;    'sw.Close()&#xA;'End If&#xA;End Try" DisplayName="Invoke code - Add Text Watermark to PDF" sap:VirtualizedContainerService.HintSize="200,153" sap2010:WorkflowViewState.IdRef="InvokeCode_2">
                        <ui:InvokeCode.Arguments>
                          <InArgument x:TypeArguments="x:String" x:Key="InputPdfFilePath">[var_pdffilepath]</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="OutputPdfFilePath">[in_OutputPendingPdfFilePath+currentdate+"\For all\PENDING\"+var_pdfname]</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="Watermarkclientcode">["C: "+var_C]</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="Watermarkproductcode" xml:space="preserve">P: </InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="WatermarkEST">["E: "+var_E]</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="WatermarkMediacode">["M: "+var_MediaLookUp]</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="Watermarkpubcode">["Pub Code: "+var_PUBLICATON_CODE]</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="Watermarkmos">["MOS: "+var_MOS]</InArgument>
                          <InOutArgument x:TypeArguments="x:Boolean" x:Key="arg_failtostamp">[var_failtostamp]</InOutArgument>
                          <InOutArgument x:TypeArguments="x:Int32" x:Key="count">[var_pagecount]</InOutArgument>
                        </ui:InvokeCode.Arguments>
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                      </ui:InvokeCode>
                    </If.Then>
                    <If.Else>
                      <ui:InvokeCode ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="VB.net Code to add Text Watermark to PDF Document&#xA;&#xA;Packages Used :  Syncfusion.Pdf.Net.Core and UiPath.System.Activities" Code="Try&#xA;Dim Destinationfolder As String = OutputPdfFilePath&#xA;Dim filename As String = InputPdfFilePath&#xA;'Dim Top as Integer = 100&#xA;Dim watermarkC As String =Watermarkclientcode&#xA;Dim watermarkP As String = Watermarkproductcode&#xA;Dim watermarkE As String = WatermarkEST&#xA;Dim watermarkM As String = WatermarkMediacode&#xA;Dim watermarkpub As String = Watermarkpubcode&#xA;Dim watermatkmos As String = Watermarkmos&#xA;Dim watermark As String = watermarkC+watermarkP+watermarkE+watermarkM+watermarkpub&#xA;Dim emSize As Integer = 8&#xA;Dim document As PdfSharp.Pdf.PdfDocument =  PdfSharp.Pdf.IO.PdfReader.Open(filename)&#xA;count=document.PageCount&#xA;Dim font As PdfSharp.Drawing.XFont = New PdfSharp.Drawing.XFont(&quot;Times New Roman&quot;, emSize, PdfSharp.Drawing.XFontStyle.Bold)&#xA;If document.Version &lt; 14 Then document.Version = 14&#xA;Dim page As PdfSharp.Pdf.PdfPage = document.Pages(0)&#xA;'page.TrimMargins.Top=20&#xA;Dim gfx As PdfSharp.Drawing.XGraphics = PdfSharp.Drawing.XGraphics.FromPdfPage(page,PdfSharp.Drawing.XGraphicsPdfPageOptions.Prepend)&#xA;Dim size As PdfSharp.Drawing.XSize = gfx.MeasureString(watermark, font)&#xA;Dim format As PdfSharp.Drawing.XStringFormat = New PdfSharp.Drawing.XStringFormat()&#xA;format.Alignment=PdfSharp.Drawing.XStringAlignment.Near&#xA;format.LineAlignment=PdfSharp.Drawing.XLineAlignment.Near&#xA;Dim pen As PdfSharp.Drawing.XPen= New PdfSharp.Drawing.XPen(PdfSharp.Drawing.XColors.Tomato)&#xA;Dim brush As PdfSharp.Drawing.XBrush= New PdfSharp.Drawing.XSolidBrush(PdfSharp.Drawing.XColor.FromArgb(255,255,0,0))&#xA;gfx.DrawRoundedRectangle(PdfSharp.Drawing.XPens.Tomato, 226, 2, 305, 22, 20, 23)&#xA;gfx.DrawString(watermarkC,font,brush,New PdfSharp.Drawing.XPoint(231,3),format)&#xA;gfx.DrawString(watermarkP,font,brush,New PdfSharp.Drawing.XPoint(266,3),format)&#xA;gfx.DrawString(watermarkE,font,brush,New PdfSharp.Drawing.XPoint(302,3),format)&#xA;gfx.DrawString(watermarkM,font,brush,New PdfSharp.Drawing.XPoint(340,3),format)&#xA;gfx.DrawString(watermarkpub,font,brush,New PdfSharp.Drawing.XPoint(410,3),format)&#xA;gfx.DrawString(Watermarkmos,font,brush,New PdfSharp.Drawing.XPoint(480,3),format)&#xA;Dim fs As System.IO.FileStream = New FileStream(filename, FileMode.OpenOrCreate, FileAccess.ReadWrite)&#xA;document.Save(Destinationfolder)&#xA;Catch&#xA;&#x9;arg_failtostamp = True&#xA;&#x9;'Dim strFile As String = &quot;C:\Users\skore\Desktop\Stamping\Exception log file\ErrorLog_&quot; &amp; DateTime.Today.ToString(&quot;yyyy-MM-dd&quot;) &amp; &quot;.txt&quot;&#xA;&#x9;'Dim sw As StreamWriter&#xA;&#x9;'Dim fs As FileStream = Nothing&#xA;&#xA;'If (Not File.Exists(strFile)) Then&#xA; '   Try&#xA;      ' fs = File.Create(strFile)&#xA;       'sw = File.AppendText(strFile)&#xA;       'sw.WriteLine(&quot;Start Error Log for today&quot;)&#xA;&#xA;    'Catch ex As Exception&#xA;     '   MsgBox(&quot;Error Creating Log File&quot;)&#xA;    'End Try&#xA;'Else&#xA;    'sw = File.AppendText(strFile)&#xA;&#x9;'sw.WriteLine(Environment.NewLine)&#xA;    'sw.WriteLine(tempfaname &amp; &quot;;&quot; &amp; tempinvnum &amp; &quot;;&quot; &amp; tempamount &amp; &quot;;&quot; &amp; temppdfpath &amp; &quot;;&quot; &amp; DateTime.Now &amp; &quot;;&quot; &amp;&quot;Can not stamp the PDF&quot;)&#xA;&#xA;    'sw.Close()&#xA;'End If&#xA;End Try" DisplayName="Invoke code - Add Text Watermark to PDF" sap:VirtualizedContainerService.HintSize="334,236" sap2010:WorkflowViewState.IdRef="InvokeCode_3">
                        <ui:InvokeCode.Arguments>
                          <InArgument x:TypeArguments="x:String" x:Key="InputPdfFilePath">[var_pdffilepath]</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="OutputPdfFilePath">[in_OutputPendingPdfFilePath+currentdate+"\For all\PENDING\"+var_pdfname]</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="Watermarkclientcode">["C: "+var_C]</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="Watermarkproductcode" xml:space="preserve">P: </InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="WatermarkEST">["E: "+var_E]</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="WatermarkMediacode">["M: "+var_MediaLookUp]</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="Watermarkpubcode">["Pub Code: "+var_PUBLICATON_CODE]</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="Watermarkmos">["MOS: "+var_MOS]</InArgument>
                          <InOutArgument x:TypeArguments="x:Boolean" x:Key="arg_failtostamp">[var_failtostamp]</InOutArgument>
                          <InOutArgument x:TypeArguments="x:Int32" x:Key="count">[var_pagecount]</InOutArgument>
                        </ui:InvokeCode.Arguments>
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                      </ui:InvokeCode>
                    </If.Else>
                  </If>
                </Sequence>
              </If.Then>
              <If.Else>
                <Sequence sap:VirtualizedContainerService.HintSize="3147,1772" sap2010:WorkflowViewState.IdRef="Sequence_6">
                  <Sequence.Variables>
                    <Variable x:TypeArguments="x:Boolean" Name="boolallpaiddatefolderexist" />
                  </Sequence.Variables>
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:PathExists DisplayName="Path Exists" Exists="[boolallpaiddatefolderexist]" sap:VirtualizedContainerService.HintSize="3105,89" sap2010:WorkflowViewState.IdRef="PathExists_4" Path="[in_OutputPaidPdfFilePath+currentdate+&quot;\For all\PAID\&quot;]" PathType="Folder" />
                  <If Condition="[boolallpaiddatefolderexist]" sap:VirtualizedContainerService.HintSize="3105,227" sap2010:WorkflowViewState.IdRef="If_16">
                    <If.Else>
                      <ui:CreateDirectory ContinueOnError="{x:Null}" DisplayName="Create Folder" sap:VirtualizedContainerService.HintSize="334,79" sap2010:WorkflowViewState.IdRef="CreateDirectory_4" Path="[in_OutputPaidPdfFilePath+currentdate+&quot;\For all\PAID\&quot;]" />
                    </If.Else>
                  </If>
                  <Sequence sap:VirtualizedContainerService.HintSize="3105,1284" sap2010:WorkflowViewState.IdRef="Sequence_5">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <If Condition="[var_Buy_Status.Equals(&quot;Yes&quot;)]" sap:VirtualizedContainerService.HintSize="3063,1192" sap2010:WorkflowViewState.IdRef="If_18">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <If.Then>
                        <If Condition="[var_PUBLICATON_CODE.Equals(&quot;106063&quot;) or var_PUBLICATON_CODE.Equals(&quot;105355&quot;) or var_PUBLICATON_CODE.Equals(&quot;101443&quot;)]" sap:VirtualizedContainerService.HintSize="1005,987" sap2010:WorkflowViewState.IdRef="If_19">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <If.Then>
                            <Sequence sap:VirtualizedContainerService.HintSize="480,472" sap2010:WorkflowViewState.IdRef="Sequence_30">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <TryCatch DisplayName="Try Catch" sap:VirtualizedContainerService.HintSize="438,380" sap2010:WorkflowViewState.IdRef="TryCatch_7">
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                                <TryCatch.Try>
                                  <ui:InvokeCode ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="VB.net Code to add Text Watermark to PDF Document&#xA;&#xA;Packages Used :  Syncfusion.Pdf.Net.Core and UiPath.System.Activities" Code="Try&#xA;Dim Destinationfolder As String = OutputPdfFilePath&#xA;Dim filename As String = InputPdfFilePath&#xA;'Dim Top as Integer = 100&#xA;Dim watermarkC As String =Watermarkclientcode&#xA;Dim watermarkP As String = Watermarkproductcode&#xA;Dim watermarkE As String = WatermarkEST&#xA;Dim watermarkM As String = WatermarkMediacode&#xA;Dim watermarkpub As String = Watermarkpubcode&#xA;Dim watermatkmos As String = Watermarkmos&#xA;Dim watermarkinvcomment As String = WatermarkInv_Comment&#xA;Dim watermark As String = watermarkC+watermarkP+watermarkE+watermarkM+watermarkpub&#xA;Dim emSize As Integer = 8&#xA;Dim document As PdfSharp.Pdf.PdfDocument =  PdfSharp.Pdf.IO.PdfReader.Open(filename)&#xA;count=document.PageCount&#xA;Dim font As PdfSharp.Drawing.XFont = New PdfSharp.Drawing.XFont(&quot;Times New Roman&quot;, emSize, PdfSharp.Drawing.XFontStyle.Bold)&#xA;If document.Version &lt; 14 Then document.Version = 14&#xA;Dim page As PdfSharp.Pdf.PdfPage = document.Pages(0)&#xA;'page.TrimMargins.Top=20&#xA;Dim gfx As PdfSharp.Drawing.XGraphics = PdfSharp.Drawing.XGraphics.FromPdfPage(page,PdfSharp.Drawing.XGraphicsPdfPageOptions.Prepend)&#xA;Dim size As PdfSharp.Drawing.XSize = gfx.MeasureString(watermark, font)&#xA;Dim format As PdfSharp.Drawing.XStringFormat = New PdfSharp.Drawing.XStringFormat()&#xA;format.Alignment=PdfSharp.Drawing.XStringAlignment.Near&#xA;format.LineAlignment=PdfSharp.Drawing.XLineAlignment.Near&#xA;Dim pen As PdfSharp.Drawing.XPen= New PdfSharp.Drawing.XPen(PdfSharp.Drawing.XColors.Tomato)&#xA;Dim brush As PdfSharp.Drawing.XBrush= New PdfSharp.Drawing.XSolidBrush(PdfSharp.Drawing.XColor.FromArgb(255,255,0,0))&#xA;'gfx.DrawRoundedRectangle(PdfSharp.Drawing.XPens.Tomato, 226, 826, 305, 22, 20, 23)&#xA;gfx.DrawString(watermarkC,font,brush,New PdfSharp.Drawing.XPoint(231,824),format)&#xA;gfx.DrawString(watermarkP,font,brush,New PdfSharp.Drawing.XPoint(266,824),format)&#xA;gfx.DrawString(watermarkE,font,brush,New PdfSharp.Drawing.XPoint(302,824),format)&#xA;gfx.DrawString(watermarkM,font,brush,New PdfSharp.Drawing.XPoint(340,824),format)&#xA;gfx.DrawString(watermarkpub,font,brush,New PdfSharp.Drawing.XPoint(410,824),format)&#xA;gfx.DrawString(Watermarkmos,font,brush,New PdfSharp.Drawing.XPoint(480,824),format)&#xA;gfx.DrawString(watermarkinvcomment,font,brush,New PdfSharp.Drawing.XPoint(231,833),format)&#xA;Dim fs As System.IO.FileStream = New FileStream(filename, FileMode.OpenOrCreate, FileAccess.ReadWrite)&#xA;document.Save(Destinationfolder)&#xA;Catch&#xA;&#x9;arg_failtostamp = True&#xA;&#x9;'Dim strFile As String = &quot;C:\Users\skore\Desktop\Stamping\Exception log file\ErrorLog_&quot; &amp; DateTime.Today.ToString(&quot;yyyy-MM-dd&quot;) &amp; &quot;.txt&quot;&#xA;&#x9;'Dim sw As StreamWriter&#xA;&#x9;'Dim fs As FileStream = Nothing&#xA;&#xA;'If (Not File.Exists(strFile)) Then&#xA; '   Try&#xA;      ' fs = File.Create(strFile)&#xA;       'sw = File.AppendText(strFile)&#xA;       'sw.WriteLine(&quot;Start Error Log for today&quot;)&#xA;&#xA;    'Catch ex As Exception&#xA;     '   MsgBox(&quot;Error Creating Log File&quot;)&#xA;    'End Try&#xA;'Else&#xA;    'sw = File.AppendText(strFile)&#xA;&#x9;'sw.WriteLine(Environment.NewLine)&#xA;    'sw.WriteLine(tempfaname &amp; &quot;;&quot; &amp; tempinvnum &amp; &quot;;&quot; &amp; tempamount &amp; &quot;;&quot; &amp; temppdfpath &amp; &quot;;&quot; &amp; DateTime.Now &amp; &quot;;&quot; &amp;&quot;Can not stamp the PDF&quot;)&#xA;&#xA;    'sw.Close()&#xA;'End If&#xA;End Try" DisplayName="Invoke code - Add Text Watermark to PDF" sap:VirtualizedContainerService.HintSize="200,153" sap2010:WorkflowViewState.IdRef="InvokeCode_10">
                                    <ui:InvokeCode.Arguments>
                                      <InArgument x:TypeArguments="x:String" x:Key="InputPdfFilePath">[var_pdffilepath]</InArgument>
                                      <InArgument x:TypeArguments="x:String" x:Key="OutputPdfFilePath">[in_OutputPaidPdfFilePath+currentdate+"\For all\PAID\"+var_pdfname]</InArgument>
                                      <InArgument x:TypeArguments="x:String" x:Key="Watermarkclientcode">["C: "+var_C]</InArgument>
                                      <InArgument x:TypeArguments="x:String" x:Key="Watermarkproductcode">["P: "+var_P]</InArgument>
                                      <InArgument x:TypeArguments="x:String" x:Key="WatermarkEST">["E: "+var_E]</InArgument>
                                      <InArgument x:TypeArguments="x:String" x:Key="WatermarkMediacode">["M: "+var_MediaLookUp]</InArgument>
                                      <InArgument x:TypeArguments="x:String" x:Key="Watermarkpubcode">["Pub_Code: "+var_PUBLICATON_CODE]</InArgument>
                                      <InArgument x:TypeArguments="x:String" x:Key="Watermarkmos">["MOS: "+var_MOS]</InArgument>
                                      <InOutArgument x:TypeArguments="x:Boolean" x:Key="arg_failtostamp">[var_failtostamp]</InOutArgument>
                                      <InOutArgument x:TypeArguments="x:Int32" x:Key="count">[var_pagecount]</InOutArgument>
                                      <InArgument x:TypeArguments="x:String" x:Key="WatermarkInv_Comment">[var_inv_comment]</InArgument>
                                    </ui:InvokeCode.Arguments>
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                        <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                  </ui:InvokeCode>
                                </TryCatch.Try>
                                <TryCatch.Catches>
                                  <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="404,21" sap2010:WorkflowViewState.IdRef="Catch`1_7">
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                    <ActivityAction x:TypeArguments="s:Exception">
                                      <ActivityAction.Argument>
                                        <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                                      </ActivityAction.Argument>
                                      <ui:CopyFile ContinueOnError="{x:Null}" Destination="[in_OutputPaidPdfFilePath+currentdate+&quot;\For all\PAID\&quot;+var_pdfname]" DisplayName="Copy File" sap:VirtualizedContainerService.HintSize="434,157" sap2010:WorkflowViewState.IdRef="CopyFile_7" Overwrite="False" Path="[var_pdffilepath]" />
                                    </ActivityAction>
                                  </Catch>
                                </TryCatch.Catches>
                              </TryCatch>
                            </Sequence>
                          </If.Then>
                          <If.Else>
                            <Sequence sap:VirtualizedContainerService.HintSize="480,839" sap2010:WorkflowViewState.IdRef="Sequence_17">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <WriteLine DisplayName="Write Line" sap:VirtualizedContainerService.HintSize="438,61" sap2010:WorkflowViewState.IdRef="WriteLine_1" Text="[var_inv_comment]" />
                              <TryCatch DisplayName="Try Catch" sap:VirtualizedContainerService.HintSize="438,646" sap2010:WorkflowViewState.IdRef="TryCatch_9">
                                <TryCatch.Try>
                                  <Sequence sap:VirtualizedContainerService.HintSize="376,419" sap2010:WorkflowViewState.IdRef="Sequence_34">
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                    <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="334,51" sap2010:WorkflowViewState.IdRef="CommentOut_6">
                                      <ui:CommentOut.Body>
                                        <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="376,328" sap2010:WorkflowViewState.IdRef="Sequence_33">
                                          <sap:WorkflowViewStateService.ViewState>
                                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                            </scg:Dictionary>
                                          </sap:WorkflowViewStateService.ViewState>
                                          <ui:InvokeCode ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="VB.net Code to add Text Watermark to PDF Document&#xA;&#xA;Packages Used :  Syncfusion.Pdf.Net.Core and UiPath.System.Activities" Code="Try&#xA;Dim Destinationfolder As String = OutputPdfFilePath&#xA;Dim filename As String = InputPdfFilePath&#xA;Dim y_cor As Double&#xA;'Dim Top as Integer = 100&#xA;Dim watermarkC As String =Watermarkclientcode&#xA;Dim watermarkP As String = Watermarkproductcode&#xA;Dim watermarkE As String = WatermarkEST&#xA;Dim watermarkM As String = WatermarkMediacode&#xA;Dim watermarkpub As String = Watermarkpubcode&#xA;Dim watermatkmos As String = Watermarkmos&#xA;Dim watermarkinvcomment As String  = Watermark_InvComment&#xA;Dim arrwatermarkc () As  String={Watermark_InvComment}&#xA;arrwatermarkc=Watermark_InvComment.Split(New [Char]() { CChar(&quot;;&quot;) })&#xA;Dim counter As Integer= 0&#xA;Dim watermark As String = watermarkC+watermarkP+watermarkE+watermarkM+watermarkpub&#xA;Dim emSize As Integer = 8&#xA;Dim document As PdfSharp.Pdf.PdfDocument =  PdfSharp.Pdf.IO.PdfReader.Open(filename)&#xA;count=document.PageCount&#xA;Dim font As PdfSharp.Drawing.XFont = New PdfSharp.Drawing.XFont(&quot;Times New Roman&quot;, emSize, PdfSharp.Drawing.XFontStyle.Bold)&#xA;If document.Version &lt; 14 Then document.Version = 14&#xA;Dim page As PdfSharp.Pdf.PdfPage = document.Pages(0)&#xA;'page.TrimMargins.Top=20&#xA;Dim gfx As PdfSharp.Drawing.XGraphics = PdfSharp.Drawing.XGraphics.FromPdfPage(page,PdfSharp.Drawing.XGraphicsPdfPageOptions.Prepend)&#xA;Dim size As PdfSharp.Drawing.XSize = gfx.MeasureString(watermark, font)&#xA;Dim format As PdfSharp.Drawing.XStringFormat = New PdfSharp.Drawing.XStringFormat()&#xA;format.Alignment=PdfSharp.Drawing.XStringAlignment.Near&#xA;format.LineAlignment=PdfSharp.Drawing.XLineAlignment.Near&#xA;Dim pen As PdfSharp.Drawing.XPen= New PdfSharp.Drawing.XPen(PdfSharp.Drawing.XColors.Tomato)&#xA;Dim brush As PdfSharp.Drawing.XBrush= New PdfSharp.Drawing.XSolidBrush(PdfSharp.Drawing.XColor.FromArgb(255,255,0,0))&#xA;'gfx.DrawRoundedRectangle(PdfSharp.Drawing.XPens.Tomato, 226, 2, 305, 22, 20, 23)&#xA;gfx.DrawString(watermarkC,font,brush,New PdfSharp.Drawing.XPoint(231,3),format)&#xA;gfx.DrawString(watermarkP,font,brush,New PdfSharp.Drawing.XPoint(266,3),format)&#xA;gfx.DrawString(watermarkE,font,brush,New PdfSharp.Drawing.XPoint(302,3),format)&#xA;gfx.DrawString(watermarkM,font,brush,New PdfSharp.Drawing.XPoint(340,3),format)&#xA;gfx.DrawString(watermarkpub,font,brush,New PdfSharp.Drawing.XPoint(410,3),format)&#xA;gfx.DrawString(Watermarkmos,font,brush,New PdfSharp.Drawing.XPoint(480,3),format)&#xA;If arrwatermarkc.Count&gt;0 Then&#xA;For Each item As String In arrwatermarkc&#xA;If (counter.Equals(0)) Then&#xA;y_cor = 12&#xA;gfx.DrawString(arrwatermarkc(counter),font,brush,New PdfSharp.Drawing.XPoint(261,y_cor),format)&#xA;Else&#xA;y_cor = (counter * 10)+9&#xA;gfx.DrawString(arrwatermarkc(counter),font,brush,New PdfSharp.Drawing.XPoint(261,y_cor),format)&#xA;End If&#xA;counter = counter+1&#xA;Next&#xA;End If&#xA;'gfx.DrawString(watermarkinvcomment,font,brush,New PdfSharp.Drawing.XPoint(231,14),format)&#xA;Dim fs As System.IO.FileStream = New FileStream(filename, FileMode.OpenOrCreate, FileAccess.ReadWrite)&#xA;document.Save(Destinationfolder)&#xA;Catch&#xA;&#x9;arg_failtostamp = True&#xA;&#x9;'Dim strFile As String = &quot;C:\Users\skore\Desktop\Stamping\Exception log file\ErrorLog_&quot; &amp; DateTime.Today.ToString(&quot;yyyy-MM-dd&quot;) &amp; &quot;.txt&quot;&#xA;&#x9;'Dim sw As StreamWriter&#xA;&#x9;'Dim fs As FileStream = Nothing&#xA;&#xA;'If (Not File.Exists(strFile)) Then&#xA; '   Try&#xA;      ' fs = File.Create(strFile)&#xA;       'sw = File.AppendText(strFile)&#xA;       'sw.WriteLine(&quot;Start Error Log for today&quot;)&#xA;&#xA;    'Catch ex As Exception&#xA;     '   MsgBox(&quot;Error Creating Log File&quot;)&#xA;    'End Try&#xA;'Else&#xA;    'sw = File.AppendText(strFile)&#xA;&#x9;'sw.WriteLine(Environment.NewLine)&#xA;    'sw.WriteLine(tempfaname &amp; &quot;;&quot; &amp; tempinvnum &amp; &quot;;&quot; &amp; tempamount &amp; &quot;;&quot; &amp; temppdfpath &amp; &quot;;&quot; &amp; DateTime.Now &amp; &quot;;&quot; &amp;&quot;Can not stamp the PDF&quot;)&#xA;&#xA;    'sw.Close()&#xA;'End If&#xA;End Try" DisplayName="Invoke code - Add Text Watermark to PDF" sap:VirtualizedContainerService.HintSize="334,236" sap2010:WorkflowViewState.IdRef="InvokeCode_11">
                                            <ui:InvokeCode.Arguments>
                                              <InArgument x:TypeArguments="x:String" x:Key="InputPdfFilePath">[var_pdffilepath]</InArgument>
                                              <InArgument x:TypeArguments="x:String" x:Key="OutputPdfFilePath">[in_OutputPaidPdfFilePath+currentdate+"\For all\PAID\"+var_pdfname]</InArgument>
                                              <InArgument x:TypeArguments="x:String" x:Key="Watermarkclientcode">["C: "+var_C]</InArgument>
                                              <InArgument x:TypeArguments="x:String" x:Key="Watermarkproductcode">["P: "+var_P]</InArgument>
                                              <InArgument x:TypeArguments="x:String" x:Key="WatermarkEST">["E: "+var_E]</InArgument>
                                              <InArgument x:TypeArguments="x:String" x:Key="WatermarkMediacode">["M: "+var_MediaLookUp]</InArgument>
                                              <InArgument x:TypeArguments="x:String" x:Key="Watermarkpubcode">["Pub_Code: "+var_PUBLICATON_CODE]</InArgument>
                                              <InArgument x:TypeArguments="x:String" x:Key="Watermarkmos">["MOS: "+var_MOS]</InArgument>
                                              <InOutArgument x:TypeArguments="x:Boolean" x:Key="arg_failtostamp">[var_failtostamp]</InOutArgument>
                                              <InOutArgument x:TypeArguments="x:Int32" x:Key="count">[var_pagecount]</InOutArgument>
                                              <InArgument x:TypeArguments="x:String" x:Key="Watermark_InvComment">[var_inv_comment]</InArgument>
                                            </ui:InvokeCode.Arguments>
                                            <sap:WorkflowViewStateService.ViewState>
                                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                              </scg:Dictionary>
                                            </sap:WorkflowViewStateService.ViewState>
                                          </ui:InvokeCode>
                                        </Sequence>
                                      </ui:CommentOut.Body>
                                      <sap:WorkflowViewStateService.ViewState>
                                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                        </scg:Dictionary>
                                      </sap:WorkflowViewStateService.ViewState>
                                    </ui:CommentOut>
                                    <ui:InvokeCode ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="VB.net Code to add Text Watermark to PDF Document&#xA;&#xA;Packages Used :  Syncfusion.Pdf.Net.Core and UiPath.System.Activities" Code="Try&#xA;Dim Destinationfolder As String = OutputPdfFilePath&#xA;Dim filename As String = InputPdfFilePath&#xA;Dim y_cor As Double&#xA;'Dim Top as Integer = 100&#xA;Dim watermarkC As String =Watermarkclientcode&#xA;Dim watermarkP As String = Watermarkproductcode&#xA;Dim watermarkE As String = WatermarkEST&#xA;Dim watermarkM As String = WatermarkMediacode&#xA;Dim watermarkpub As String = Watermarkpubcode&#xA;Dim watermatkmos As String = Watermarkmos&#xA;Dim watermarkinvcomment As String  = Watermark_InvComment&#xA;Dim arrwatermarkc () As  String={Watermark_InvComment}&#xA;arrwatermarkc=Watermark_InvComment.Split(New [Char]() { CChar(&quot;;&quot;) })&#xA;Dim counter As Integer= 0&#xA;Dim watermark As String = watermarkC+watermarkP+watermarkE+watermarkM+watermarkpub&#xA;Dim emSize As Integer = 8&#xA;Dim document As PdfSharp.Pdf.PdfDocument =  PdfSharp.Pdf.IO.PdfReader.Open(filename)&#xA;count=document.PageCount&#xA;Dim font As PdfSharp.Drawing.XFont = New PdfSharp.Drawing.XFont(&quot;Times New Roman&quot;, emSize, PdfSharp.Drawing.XFontStyle.Bold)&#xA;If document.Version &lt; 14 Then document.Version = 14&#xA;Dim page As PdfSharp.Pdf.PdfPage = document.Pages(0)&#xA;'page.TrimMargins.Top=20&#xA;Dim gfx As PdfSharp.Drawing.XGraphics = PdfSharp.Drawing.XGraphics.FromPdfPage(page,PdfSharp.Drawing.XGraphicsPdfPageOptions.Prepend)&#xA;Dim size As PdfSharp.Drawing.XSize = gfx.MeasureString(watermark, font)&#xA;Dim format As PdfSharp.Drawing.XStringFormat = New PdfSharp.Drawing.XStringFormat()&#xA;format.Alignment=PdfSharp.Drawing.XStringAlignment.Near&#xA;format.LineAlignment=PdfSharp.Drawing.XLineAlignment.Near&#xA;Dim pen As PdfSharp.Drawing.XPen= New PdfSharp.Drawing.XPen(PdfSharp.Drawing.XColors.Tomato)&#xA;Dim brush As PdfSharp.Drawing.XBrush= New PdfSharp.Drawing.XSolidBrush(PdfSharp.Drawing.XColor.FromArgb(255,255,0,0))&#xA;'gfx.DrawRoundedRectangle(PdfSharp.Drawing.XPens.Tomato, 226, 2, 305, 22, 20, 23)&#xA;gfx.DrawString(watermarkC,font,brush,New PdfSharp.Drawing.XPoint(231,3),format)&#xA;gfx.DrawString(watermarkP,font,brush,New PdfSharp.Drawing.XPoint(266,3),format)&#xA;gfx.DrawString(watermarkE,font,brush,New PdfSharp.Drawing.XPoint(302,3),format)&#xA;gfx.DrawString(watermarkM,font,brush,New PdfSharp.Drawing.XPoint(340,3),format)&#xA;gfx.DrawString(watermarkpub,font,brush,New PdfSharp.Drawing.XPoint(410,3),format)&#xA;gfx.DrawString(Watermarkmos,font,brush,New PdfSharp.Drawing.XPoint(480,3),format)&#xA;If arrwatermarkc.Count&gt;0 And arrwatermarkc.Count &lt; 4 Then&#xA;&#x9;For Each item As String In arrwatermarkc&#xA;&#x9;If (counter.Equals(0)) Then&#xA;&#x9;y_cor = 12&#xA;&#x9;gfx.DrawString(arrwatermarkc(counter),font,brush,New PdfSharp.Drawing.XPoint(241,y_cor),format)&#xA;&#x9;Else&#xA;&#x9;y_cor = (counter * 10)+9&#xA;&#x9;gfx.DrawString(arrwatermarkc(counter),font,brush,New PdfSharp.Drawing.XPoint(241,y_cor),format)&#xA;&#x9;End If&#xA;&#x9;counter = counter+1&#xA;&#x9;Next&#xA;Else&#xA;&#x9;gfx.DrawString(&quot;SEE BACK PAGE&quot;,font,brush,New PdfSharp.Drawing.XPoint(268,29),format)&#xA;&#x9;document.AddPage()&#xA;&#x9;Dim lastpage As  PdfSharp.Pdf.PdfPage= document.Pages(count)&#xA;&#x9;Dim emSize2 As Integer = 14&#xA;&#x9;Dim font2 As PdfSharp.Drawing.XFont = New PdfSharp.Drawing.XFont(&quot;Times New Roman&quot;, emSize2, PdfSharp.Drawing.XFontStyle.Bold)&#xA;&#x9;gfx  = PdfSharp.Drawing.XGraphics.FromPdfPage(lastpage,PdfSharp.Drawing.XGraphicsPdfPageOptions.Prepend)&#xA;&#x9;gfx.DrawString(watermarkC,font,brush,New PdfSharp.Drawing.XPoint(231,3),format)&#xA;&#x9;gfx.DrawString(watermarkP,font,brush,New PdfSharp.Drawing.XPoint(266,3),format)&#xA;&#x9;gfx.DrawString(watermarkE,font,brush,New PdfSharp.Drawing.XPoint(302,3),format)&#xA;&#x9;gfx.DrawString(watermarkM,font,brush,New PdfSharp.Drawing.XPoint(340,3),format)&#xA;&#x9;gfx.DrawString(watermarkpub,font,brush,New PdfSharp.Drawing.XPoint(410,3),format)&#xA;&#x9;gfx.DrawString(Watermarkmos,font,brush,New PdfSharp.Drawing.XPoint(480,3),format)&#xA;&#x9;For Each item As String In arrwatermarkc&#xA;&#x9;If (counter.Equals(0)) Then&#xA;&#x9;y_cor = 12&#xA;&#x9;gfx.DrawString(arrwatermarkc(counter),font,brush,New PdfSharp.Drawing.XPoint(261,y_cor),format)&#xA;&#x9;Else&#xA;&#x9;y_cor = (counter * 10)+9&#xA;&#x9;gfx.DrawString(arrwatermarkc(counter),font,brush,New PdfSharp.Drawing.XPoint(261,y_cor),format)&#xA;&#x9;End If&#xA;&#x9;counter = counter+1&#xA;&#x9;Next&#xA;End If&#xA;'gfx.DrawString(watermarkinvcomment,font,brush,New PdfSharp.Drawing.XPoint(231,14),format)&#xA;Dim fs As System.IO.FileStream = New FileStream(filename, FileMode.OpenOrCreate, FileAccess.ReadWrite)&#xA;document.Save(Destinationfolder)&#xA;Catch e as IO.IOException&#xA;&#x9;arg_failtostamp = True&#xA;&#x9;strException = e.ToString&#xA;&#x9;'Dim strFile As String = &quot;C:\Users\skore\Desktop\Stamping\Exception log file\ErrorLog_&quot; &amp; DateTime.Today.ToString(&quot;yyyy-MM-dd&quot;) &amp; &quot;.txt&quot;&#xA;&#x9;'Dim sw As StreamWriter&#xA;&#x9;'Dim fs As FileStream = Nothing&#xA;&#xA;'If (Not File.Exists(strFile)) Then&#xA; '   Try&#xA;      ' fs = File.Create(strFile)&#xA;       'sw = File.AppendText(strFile)&#xA;       'sw.WriteLine(&quot;Start Error Log for today&quot;)&#xA;&#xA;    'Catch ex As Exception&#xA;     '   MsgBox(&quot;Error Creating Log File&quot;)&#xA;    'End Try&#xA;'Else&#xA;    'sw = File.AppendText(strFile)&#xA;&#x9;'sw.WriteLine(Environment.NewLine)&#xA;    'sw.WriteLine(tempfaname &amp; &quot;;&quot; &amp; tempinvnum &amp; &quot;;&quot; &amp; tempamount &amp; &quot;;&quot; &amp; temppdfpath &amp; &quot;;&quot; &amp; DateTime.Now &amp; &quot;;&quot; &amp;&quot;Can not stamp the PDF&quot;)&#xA;&#xA;    'sw.Close()&#xA;'End If&#xA;End Try" DisplayName="Invoke code - Add Text Watermark to PDF" sap:VirtualizedContainerService.HintSize="334,236" sap2010:WorkflowViewState.IdRef="InvokeCode_24">
                                      <ui:InvokeCode.Arguments>
                                        <InArgument x:TypeArguments="x:String" x:Key="InputPdfFilePath">[var_pdffilepath]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="OutputPdfFilePath">[in_OutputPaidPdfFilePath+currentdate+"\For all\PAID\"+var_pdfname]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="Watermarkclientcode">["C: "+var_C]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="Watermarkproductcode">["P: "+var_P]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="WatermarkEST">["E: "+var_E]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="WatermarkMediacode">["M: "+var_MediaLookUp]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="Watermarkpubcode">["Pub_Code: "+var_PUBLICATON_CODE]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="Watermarkmos">["MOS: "+var_MOS]</InArgument>
                                        <InOutArgument x:TypeArguments="x:Boolean" x:Key="arg_failtostamp">[var_failtostamp]</InOutArgument>
                                        <InOutArgument x:TypeArguments="x:Int32" x:Key="count">[var_pagecount]</InOutArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="Watermark_InvComment">[var_inv_comment]</InArgument>
                                        <OutArgument x:TypeArguments="x:String" x:Key="strException">[varException]</OutArgument>
                                      </ui:InvokeCode.Arguments>
                                      <sap:WorkflowViewStateService.ViewState>
                                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                        </scg:Dictionary>
                                      </sap:WorkflowViewStateService.ViewState>
                                    </ui:InvokeCode>
                                  </Sequence>
                                </TryCatch.Try>
                                <TryCatch.Catches>
                                  <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="404,21" sap2010:WorkflowViewState.IdRef="Catch`1_8">
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                    <ActivityAction x:TypeArguments="s:Exception">
                                      <ActivityAction.Argument>
                                        <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                                      </ActivityAction.Argument>
                                      <ui:CopyFile ContinueOnError="{x:Null}" Destination="[in_OutputPaidPdfFilePath+currentdate+&quot;\For all\PAID\&quot;+var_pdfname]" DisplayName="Copy File" sap:VirtualizedContainerService.HintSize="434,157" sap2010:WorkflowViewState.IdRef="CopyFile_8" Overwrite="False" Path="[var_pdffilepath]" />
                                    </ActivityAction>
                                  </Catch>
                                </TryCatch.Catches>
                              </TryCatch>
                            </Sequence>
                          </If.Else>
                        </If>
                      </If.Then>
                      <If.Else>
                        <Sequence DisplayName="Sequence - If - When FA_Status = SPLIT-S9 then Stamp with comment also" sap:VirtualizedContainerService.HintSize="2013,1044" sap2010:WorkflowViewState.IdRef="Sequence_23">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <If Condition="[var_fastatus.tolower.Contains(&quot;split - s9&quot;) or var_fastatus.tolower.Contains(&quot;attach-s9&quot;) or var_fastatus.tolower.Contains(&quot;restamp-s9&quot;) or var_fastatus.tolower.Contains(&quot;append-s9&quot;) or var_fastatus.tolower.Contains(&quot;tag-segment&quot;)]" sap:VirtualizedContainerService.HintSize="1971,952" sap2010:WorkflowViewState.IdRef="If_23">
                            <If.Then>
                              <If Condition="[var_PUBLICATON_CODE.Equals(&quot;106063&quot;) or var_PUBLICATON_CODE.Equals(&quot;105355&quot;) or var_PUBLICATON_CODE.Equals(&quot;101443&quot;)]" DisplayName="If " sap:VirtualizedContainerService.HintSize="963,804" sap2010:WorkflowViewState.IdRef="If_22">
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                                <If.Then>
                                  <TryCatch DisplayName="Try Catch" sap:VirtualizedContainerService.HintSize="438,463" sap2010:WorkflowViewState.IdRef="TryCatch_10">
                                    <TryCatch.Try>
                                      <ui:InvokeCode ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="VB.net Code to add Text Watermark to PDF Document&#xA;&#xA;Packages Used :  Syncfusion.Pdf.Net.Core and UiPath.System.Activities" Code="Try&#xA;Dim Destinationfolder As String = OutputPdfFilePath&#xA;Dim filename As String = InputPdfFilePath&#xA;'Dim Top as Integer = 100&#xA;Dim i As Integer = -1&#xA;Dim watermarkC As String =Watermarkclientcode&#xA;Dim watermarkP As String = Watermarkproductcode&#xA;Dim watermarkE As String = WatermarkEST&#xA;Dim watermarkM As String = WatermarkMediacode&#xA;Dim watermarkpub As String = Watermarkpubcode&#xA;Dim watermatkmos As String = Watermarkmos&#xA;Dim watermarkcomment As String = WatermarkCommentS9&#xA;&#xA;Dim watermarkcommentline As Integer = arg_comment_lines&#xA;Dim watermarkcommentarray( ) As String = WatermarkCommentS9array&#xA;ReDim Preserve watermarkcommentarray(watermarkcommentline-1)&#xA;&#xA;Dim watermark As String = watermarkC+watermarkP+watermarkE+watermarkM+watermarkpub+ watermarkcomments9&#xA;Dim emSize As Integer = 8&#xA;Dim document As PdfSharp.Pdf.PdfDocument =  PdfSharp.Pdf.IO.PdfReader.Open(filename)&#xA;count=document.PageCount&#xA;Dim font As PdfSharp.Drawing.XFont = New PdfSharp.Drawing.XFont(&quot;Times New Roman&quot;, emSize, PdfSharp.Drawing.XFontStyle.Bold)&#xA;If document.Version &lt; 14 Then document.Version = 14&#xA;Dim page As PdfSharp.Pdf.PdfPage = document.Pages(0)&#xA;'page.TrimMargins.Top=20&#xA;Dim gfx As PdfSharp.Drawing.XGraphics = PdfSharp.Drawing.XGraphics.FromPdfPage(page,PdfSharp.Drawing.XGraphicsPdfPageOptions.Prepend)&#xA;Dim size As PdfSharp.Drawing.XSize = gfx.MeasureString(watermark, font)&#xA;Dim format As PdfSharp.Drawing.XStringFormat = New PdfSharp.Drawing.XStringFormat()&#xA;format.Alignment=PdfSharp.Drawing.XStringAlignment.Near&#xA;format.LineAlignment=PdfSharp.Drawing.XLineAlignment.Near&#xA;Dim pen As PdfSharp.Drawing.XPen= New PdfSharp.Drawing.XPen(PdfSharp.Drawing.XColors.Tomato)&#xA;Dim brush As PdfSharp.Drawing.XBrush= New PdfSharp.Drawing.XSolidBrush(PdfSharp.Drawing.XColor.FromArgb(255,255,0,0))&#xA;'gfx.DrawRoundedRectangle(PdfSharp.Drawing.XPens.Tomato, 226, 826, 305, 22, 20, 23)&#xA;gfx.DrawString(watermarkC,font,brush,New PdfSharp.Drawing.XPoint(231,827),format)&#xA;gfx.DrawString(watermarkP,font,brush,New PdfSharp.Drawing.XPoint(266,827),format)&#xA;gfx.DrawString(watermarkE,font,brush,New PdfSharp.Drawing.XPoint(302,827),format)&#xA;gfx.DrawString(watermarkM,font,brush,New PdfSharp.Drawing.XPoint(340,827),format)&#xA;gfx.DrawString(watermarkpub,font,brush,New PdfSharp.Drawing.XPoint(410,827),format)&#xA;gfx.DrawString(Watermarkmos,font,brush,New PdfSharp.Drawing.XPoint(480,827),format)&#xA;'&#xA;If watermarkcommentline &lt; 3&#xA;&#x9;For Each comment As String In watermarkcommentarray&#xA;&#x9;i=i+1&#xA;&#x9;gfx.DrawString(comment,font,brush,New PdfSharp.Drawing.XPoint(231,827+(9*i)),format)&#xA;Next &#xA;Else&#xA;&#x9;gfx.DrawString(watermarkcommentarray(0),font,brush,New PdfSharp.Drawing.XPoint(231,836),format)&#xA;&#x9;gfx.DrawString(&quot;See Back Page&quot;,font,brush,New PdfSharp.Drawing.XPoint(231,845),format)&#xA;document.AddPage()&#xA;Dim lastpage As  PdfSharp.Pdf.PdfPage= document.Pages(count)&#xA;Dim emSize2 As Integer = 14&#xA;Dim font2 As PdfSharp.Drawing.XFont = New PdfSharp.Drawing.XFont(&quot;Times New Roman&quot;, emSize2, PdfSharp.Drawing.XFontStyle.Bold)&#xA;gfx  = PdfSharp.Drawing.XGraphics.FromPdfPage(lastpage,PdfSharp.Drawing.XGraphicsPdfPageOptions.Prepend)&#xA;gfx.DrawString(watermarkC,font,brush,New PdfSharp.Drawing.XPoint(150,3),format)&#xA;gfx.DrawString(watermarkP,font,brush,New PdfSharp.Drawing.XPoint(210,3),format)&#xA;gfx.DrawString(watermarkE,font,brush,New PdfSharp.Drawing.XPoint(245,3),format)&#xA;gfx.DrawString(watermarkM,font,brush,New PdfSharp.Drawing.XPoint(320,3),format)&#xA;gfx.DrawString(watermarkpub,font,brush,New PdfSharp.Drawing.XPoint(400,3),format)&#xA;gfx.DrawString(Watermarkmos,font,brush,New PdfSharp.Drawing.XPoint(480,3),format)&#xA;&#xA;For Each comment As String In watermarkcommentarray&#xA;&#x9;i=i+1&#xA;&#x9;gfx.DrawString(comment,font,brush,New PdfSharp.Drawing.XPoint(300,12+(10*i)),format)&#xA;Next &#xA;End If&#xA;'&#xA;&#xA;Dim fs As System.IO.FileStream = New FileStream(filename, FileMode.OpenOrCreate, FileAccess.ReadWrite)&#xA;document.Save(Destinationfolder)&#xA;Catch&#xA;&#x9;arg_failtostamp = True&#xA;&#x9;'Dim strFile As String = &quot;C:\Users\skore\Desktop\Stamping\Exception log file\ErrorLog_&quot; &amp; DateTime.Today.ToString(&quot;yyyy-MM-dd&quot;) &amp; &quot;.txt&quot;&#xA;&#x9;'Dim sw As StreamWriter&#xA;&#x9;'Dim fs As FileStream = Nothing&#xA;&#xA;'If (Not File.Exists(strFile)) Then&#xA; '   Try&#xA;      ' fs = File.Create(strFile)&#xA;       'sw = File.AppendText(strFile)&#xA;       'sw.WriteLine(&quot;Start Error Log for today&quot;)&#xA;&#xA;    'Catch ex As Exception&#xA;     '   MsgBox(&quot;Error Creating Log File&quot;)&#xA;    'End Try&#xA;'Else&#xA;    'sw = File.AppendText(strFile)&#xA;&#x9;'sw.WriteLine(Environment.NewLine)&#xA;    'sw.WriteLine(tempfaname &amp; &quot;;&quot; &amp; tempinvnum &amp; &quot;;&quot; &amp; tempamount &amp; &quot;;&quot; &amp; temppdfpath &amp; &quot;;&quot; &amp; DateTime.Now &amp; &quot;;&quot; &amp;&quot;Can not stamp the PDF&quot;)&#xA;&#xA;    'sw.Close()&#xA;'End If&#xA;End Try" DisplayName="Invoke code - Add Text Watermark to PDF" sap:VirtualizedContainerService.HintSize="334,236" sap2010:WorkflowViewState.IdRef="InvokeCode_15">
                                        <ui:InvokeCode.Arguments>
                                          <InArgument x:TypeArguments="x:String" x:Key="InputPdfFilePath">[var_pdffilepath]</InArgument>
                                          <InArgument x:TypeArguments="x:String" x:Key="OutputPdfFilePath">[in_OutputPaidPdfFilePath+currentdate+"\For all\PAID\"+var_pdfname]</InArgument>
                                          <InArgument x:TypeArguments="x:String" x:Key="Watermarkclientcode">["C: "+var_C]</InArgument>
                                          <InArgument x:TypeArguments="x:String" x:Key="Watermarkproductcode">["P: "+var_P]</InArgument>
                                          <InArgument x:TypeArguments="x:String" x:Key="WatermarkEST">["E: "+var_E]</InArgument>
                                          <InArgument x:TypeArguments="x:String" x:Key="WatermarkMediacode">["M: "+var_MediaLookUp]</InArgument>
                                          <InArgument x:TypeArguments="x:String" x:Key="Watermarkpubcode">["Pub_Code: "+var_PUBLICATON_CODE]</InArgument>
                                          <InArgument x:TypeArguments="x:String" x:Key="Watermarkmos">["MOS: "+var_MOS]</InArgument>
                                          <InOutArgument x:TypeArguments="x:Boolean" x:Key="arg_failtostamp">[var_failtostamp]</InOutArgument>
                                          <InOutArgument x:TypeArguments="x:Int32" x:Key="count">[var_pagecount]</InOutArgument>
                                          <InArgument x:TypeArguments="x:String" x:Key="WatermarkCommentS9">["Comment: "+var_Comment_S9]</InArgument>
                                          <InArgument x:TypeArguments="s:String[]" x:Key="WatermarkCommentS9array  ">[arrCommentS9]</InArgument>
                                          <InArgument x:TypeArguments="x:Int32" x:Key="arg_comment_lines ">[var_comment_line]</InArgument>
                                        </ui:InvokeCode.Arguments>
                                        <sap:WorkflowViewStateService.ViewState>
                                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                          </scg:Dictionary>
                                        </sap:WorkflowViewStateService.ViewState>
                                      </ui:InvokeCode>
                                    </TryCatch.Try>
                                    <TryCatch.Catches>
                                      <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="404,21" sap2010:WorkflowViewState.IdRef="Catch`1_9">
                                        <sap:WorkflowViewStateService.ViewState>
                                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                          </scg:Dictionary>
                                        </sap:WorkflowViewStateService.ViewState>
                                        <ActivityAction x:TypeArguments="s:Exception">
                                          <ActivityAction.Argument>
                                            <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                                          </ActivityAction.Argument>
                                          <ui:CopyFile ContinueOnError="{x:Null}" Destination="[in_OutputPaidPdfFilePath+currentdate+&quot;\For all\PAID\&quot;+var_pdfname]" DisplayName="Copy File" sap:VirtualizedContainerService.HintSize="434,157" sap2010:WorkflowViewState.IdRef="CopyFile_9" Overwrite="False" Path="[var_pdffilepath]" />
                                        </ActivityAction>
                                      </Catch>
                                    </TryCatch.Catches>
                                  </TryCatch>
                                </If.Then>
                                <If.Else>
                                  <Sequence sap:VirtualizedContainerService.HintSize="480,656" sap2010:WorkflowViewState.IdRef="Sequence_22">
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                    <TryCatch DisplayName="Try Catch" sap:VirtualizedContainerService.HintSize="438,463" sap2010:WorkflowViewState.IdRef="TryCatch_11">
                                      <TryCatch.Try>
                                        <ui:InvokeCode ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="VB.net Code to add Text Watermark to PDF Document&#xA;&#xA;Packages Used :  Syncfusion.Pdf.Net.Core and UiPath.System.Activities" Code="Try&#xA;Dim Destinationfolder As String = OutputPdfFilePath&#xA;Dim filename As String = InputPdfFilePath&#xA;'Dim Top as Integer = 100&#xA;Dim i As Integer = -1&#xA;Dim watermarkC As String =Watermarkclientcode&#xA;Dim watermarkP As String = Watermarkproductcode&#xA;Dim watermarkE As String = WatermarkEST&#xA;Dim watermarkM As String = WatermarkMediacode&#xA;Dim watermarkpub As String = Watermarkpubcode&#xA;Dim watermatkmos As String = Watermarkmos&#xA;Dim watermarkcomment As String = WatermarkCommentS9&#xA;&#xA;Dim watermarkcommentline As Integer = arg_comment_lines&#xA;Dim watermarkcommentarray( ) As String = WatermarkCommentS9array&#xA;ReDim Preserve watermarkcommentarray(watermarkcommentline-1)&#xA;&#xA;Dim watermark As String = watermarkC+watermarkP+watermarkE+watermarkM+watermarkpub + watermarkcomment&#xA;Dim emSize As Integer = 8&#xA;Dim document As PdfSharp.Pdf.PdfDocument =  PdfSharp.Pdf.IO.PdfReader.Open(filename)&#xA;count=document.PageCount&#xA;Dim font As PdfSharp.Drawing.XFont = New PdfSharp.Drawing.XFont(&quot;Times New Roman&quot;, emSize, PdfSharp.Drawing.XFontStyle.Bold)&#xA;If document.Version &lt; 14 Then document.Version = 14&#xA;Dim page As PdfSharp.Pdf.PdfPage = document.Pages(0)&#xA;'page.TrimMargins.Top=20&#xA;Dim gfx As PdfSharp.Drawing.XGraphics = PdfSharp.Drawing.XGraphics.FromPdfPage(page,PdfSharp.Drawing.XGraphicsPdfPageOptions.Prepend)&#xA;Dim size As PdfSharp.Drawing.XSize = gfx.MeasureString(watermark, font)&#xA;Dim format As PdfSharp.Drawing.XStringFormat = New PdfSharp.Drawing.XStringFormat()&#xA;format.Alignment=PdfSharp.Drawing.XStringAlignment.Near&#xA;format.LineAlignment=PdfSharp.Drawing.XLineAlignment.Near&#xA;Dim pen As PdfSharp.Drawing.XPen= New PdfSharp.Drawing.XPen(PdfSharp.Drawing.XColors.Tomato)&#xA;Dim brush As PdfSharp.Drawing.XBrush= New PdfSharp.Drawing.XSolidBrush(PdfSharp.Drawing.XColor.FromArgb(255,255,0,0))&#xA;'gfx.DrawRoundedRectangle(PdfSharp.Drawing.XPens.Tomato, 226, 2, 305, 22, 20, 23)&#xA;gfx.DrawString(watermarkC,font,brush,New PdfSharp.Drawing.XPoint(231,3),format)&#xA;gfx.DrawString(watermarkP,font,brush,New PdfSharp.Drawing.XPoint(266,3),format)&#xA;gfx.DrawString(watermarkE,font,brush,New PdfSharp.Drawing.XPoint(302,3),format)&#xA;gfx.DrawString(watermarkM,font,brush,New PdfSharp.Drawing.XPoint(340,3),format)&#xA;gfx.DrawString(watermarkpub,font,brush,New PdfSharp.Drawing.XPoint(410,3),format)&#xA;gfx.DrawString(Watermarkmos,font,brush,New PdfSharp.Drawing.XPoint(480,3),format)&#xA;'&#xA;If watermarkcommentline &lt; 3&#xA;&#x9;For Each comment As String In watermarkcommentarray&#xA;&#x9;i=i+1&#xA;&#x9;gfx.DrawString(comment,font,brush,New PdfSharp.Drawing.XPoint(231,12+(9*i)),format)&#xA;Next &#xA;Else&#xA;&#x9;gfx.DrawString(watermarkcommentarray(0),font,brush,New PdfSharp.Drawing.XPoint(231,12),format)&#xA;&#x9;gfx.DrawString(&quot;See Back Page&quot;,font,brush,New PdfSharp.Drawing.XPoint(231,21),format)&#xA;document.AddPage()&#xA;Dim lastpage As  PdfSharp.Pdf.PdfPage= document.Pages(count)&#xA;Dim emSize2 As Integer = 14&#xA;Dim font2 As PdfSharp.Drawing.XFont = New PdfSharp.Drawing.XFont(&quot;Times New Roman&quot;, emSize2, PdfSharp.Drawing.XFontStyle.Bold)&#xA;gfx  = PdfSharp.Drawing.XGraphics.FromPdfPage(lastpage,PdfSharp.Drawing.XGraphicsPdfPageOptions.Prepend)&#xA;gfx.DrawString(watermarkC,font,brush,New PdfSharp.Drawing.XPoint(150,3),format)&#xA;gfx.DrawString(watermarkP,font,brush,New PdfSharp.Drawing.XPoint(210,3),format)&#xA;gfx.DrawString(watermarkE,font,brush,New PdfSharp.Drawing.XPoint(245,3),format)&#xA;gfx.DrawString(watermarkM,font,brush,New PdfSharp.Drawing.XPoint(320,3),format)&#xA;gfx.DrawString(watermarkpub,font,brush,New PdfSharp.Drawing.XPoint(400,3),format)&#xA;gfx.DrawString(Watermarkmos,font,brush,New PdfSharp.Drawing.XPoint(480,3),format)&#xA;&#xA;For Each comment As String In watermarkcommentarray&#xA;&#x9;i=i+1&#xA;&#x9;gfx.DrawString(comment,font,brush,New PdfSharp.Drawing.XPoint(300,12+(10*i)),format)&#xA;Next &#xA;End If&#xA;'&#xA;Dim fs As System.IO.FileStream = New FileStream(filename, FileMode.OpenOrCreate, FileAccess.ReadWrite)&#xA;document.Save(Destinationfolder)&#xA;Catch e As IO.IOException&#xA;&#x9;arg_failtostamp = True&#xA;&#x9;strException = e.ToString&#xA;&#xA;&#x9;'Dim strFile As String = &quot;C:\Users\skore\Desktop\Stamping\Exception log file\ErrorLog_&quot; &amp; DateTime.Today.ToString(&quot;yyyy-MM-dd&quot;) &amp; &quot;.txt&quot;&#xA;&#x9;'Dim sw As StreamWriter&#xA;&#x9;'Dim fs As FileStream = Nothing&#xA;&#xA;'If (Not File.Exists(strFile)) Then&#xA; '   Try&#xA;      ' fs = File.Create(strFile)&#xA;       'sw = File.AppendText(strFile)&#xA;       'sw.WriteLine(&quot;Start Error Log for today&quot;)&#xA;&#xA;    'Catch ex As Exception&#xA;     '   MsgBox(&quot;Error Creating Log File&quot;)&#xA;    'End Try&#xA;'Else&#xA;    'sw = File.AppendText(strFile)&#xA;&#x9;'sw.WriteLine(Environment.NewLine)&#xA;    'sw.WriteLine(tempfaname &amp; &quot;;&quot; &amp; tempinvnum &amp; &quot;;&quot; &amp; tempamount &amp; &quot;;&quot; &amp; temppdfpath &amp; &quot;;&quot; &amp; DateTime.Now &amp; &quot;;&quot; &amp;&quot;Can not stamp the PDF&quot;)&#xA;&#xA;    'sw.Close()&#xA;'End If&#xA;End Try" DisplayName="Invoke code - Add Text Watermark to PDF" sap:VirtualizedContainerService.HintSize="334,236" sap2010:WorkflowViewState.IdRef="InvokeCode_16">
                                          <ui:InvokeCode.Arguments>
                                            <InArgument x:TypeArguments="x:String" x:Key="InputPdfFilePath">[var_pdffilepath]</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="OutputPdfFilePath">[in_OutputPaidPdfFilePath+currentdate+"\For all\PAID\"+var_pdfname]</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="Watermarkclientcode">["C: "+var_C]</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="Watermarkproductcode">["P: "+var_P]</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="WatermarkEST">["E: "+var_E]</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="WatermarkMediacode">["M: "+var_MediaLookUp]</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="Watermarkpubcode">["Pub_Code: "+var_PUBLICATON_CODE]</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="Watermarkmos">["MOS: "+var_MOS]</InArgument>
                                            <InOutArgument x:TypeArguments="x:Boolean" x:Key="arg_failtostamp">[var_failtostamp]</InOutArgument>
                                            <InOutArgument x:TypeArguments="x:Int32" x:Key="count">[var_pagecount]</InOutArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="WatermarkCommentS9">["Comment: "+var_Comment_S9]</InArgument>
                                            <InArgument x:TypeArguments="s:String[]" x:Key="WatermarkCommentS9array">[arrCommentS9]</InArgument>
                                            <InArgument x:TypeArguments="x:Int32" x:Key="arg_comment_lines">[var_comment_line]</InArgument>
                                            <OutArgument x:TypeArguments="x:String" x:Key="strException">[varException]</OutArgument>
                                          </ui:InvokeCode.Arguments>
                                          <sap:WorkflowViewStateService.ViewState>
                                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                            </scg:Dictionary>
                                          </sap:WorkflowViewStateService.ViewState>
                                        </ui:InvokeCode>
                                      </TryCatch.Try>
                                      <TryCatch.Catches>
                                        <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="404,21" sap2010:WorkflowViewState.IdRef="Catch`1_10">
                                          <sap:WorkflowViewStateService.ViewState>
                                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                            </scg:Dictionary>
                                          </sap:WorkflowViewStateService.ViewState>
                                          <ActivityAction x:TypeArguments="s:Exception">
                                            <ActivityAction.Argument>
                                              <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                                            </ActivityAction.Argument>
                                            <ui:CopyFile ContinueOnError="{x:Null}" Destination="[in_OutputPaidPdfFilePath+currentdate+&quot;\For all\PAID\&quot;+var_pdfname]" DisplayName="Copy File" sap:VirtualizedContainerService.HintSize="434,157" sap2010:WorkflowViewState.IdRef="CopyFile_10" Overwrite="False" Path="[var_pdffilepath]" />
                                          </ActivityAction>
                                        </Catch>
                                      </TryCatch.Catches>
                                    </TryCatch>
                                    <WriteLine DisplayName="Write Line" sap:VirtualizedContainerService.HintSize="438,61" sap2010:WorkflowViewState.IdRef="WriteLine_4" Text="[varException]" />
                                  </Sequence>
                                </If.Else>
                              </If>
                            </If.Then>
                            <If.Else>
                              <If Condition="[var_PUBLICATON_CODE.Equals(&quot;106063&quot;) or var_PUBLICATON_CODE.Equals(&quot;105355&quot;) or var_PUBLICATON_CODE.Equals(&quot;101443&quot;)]" sap:VirtualizedContainerService.HintSize="963,804" sap2010:WorkflowViewState.IdRef="If_6">
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                                <If.Then>
                                  <TryCatch DisplayName="Try Catch" sap:VirtualizedContainerService.HintSize="438,463" sap2010:WorkflowViewState.IdRef="TryCatch_12">
                                    <TryCatch.Try>
                                      <ui:InvokeCode ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="VB.net Code to add Text Watermark to PDF Document&#xA;&#xA;Packages Used :  Syncfusion.Pdf.Net.Core and UiPath.System.Activities" Code="Try&#xA;Dim Destinationfolder As String = OutputPdfFilePath&#xA;Dim filename As String = InputPdfFilePath&#xA;'Dim Top as Integer = 100&#xA;Dim watermarkC As String =Watermarkclientcode&#xA;Dim watermarkP As String = Watermarkproductcode&#xA;Dim watermarkE As String = WatermarkEST&#xA;Dim watermarkM As String = WatermarkMediacode&#xA;Dim watermarkpub As String = Watermarkpubcode&#xA;Dim watermatkmos As String = Watermarkmos&#xA;Dim watermark As String = watermarkC+watermarkP+watermarkE+watermarkM+watermarkpub&#xA;Dim emSize As Integer = 8&#xA;Dim document As PdfSharp.Pdf.PdfDocument =  PdfSharp.Pdf.IO.PdfReader.Open(filename)&#xA;count=document.PageCount&#xA;Dim font As PdfSharp.Drawing.XFont = New PdfSharp.Drawing.XFont(&quot;Times New Roman&quot;, emSize, PdfSharp.Drawing.XFontStyle.Bold)&#xA;If document.Version &lt; 14 Then document.Version = 14&#xA;Dim page As PdfSharp.Pdf.PdfPage = document.Pages(0)&#xA;'page.TrimMargins.Top=20&#xA;Dim gfx As PdfSharp.Drawing.XGraphics = PdfSharp.Drawing.XGraphics.FromPdfPage(page,PdfSharp.Drawing.XGraphicsPdfPageOptions.Prepend)&#xA;Dim size As PdfSharp.Drawing.XSize = gfx.MeasureString(watermark, font)&#xA;Dim format As PdfSharp.Drawing.XStringFormat = New PdfSharp.Drawing.XStringFormat()&#xA;format.Alignment=PdfSharp.Drawing.XStringAlignment.Near&#xA;format.LineAlignment=PdfSharp.Drawing.XLineAlignment.Near&#xA;Dim pen As PdfSharp.Drawing.XPen= New PdfSharp.Drawing.XPen(PdfSharp.Drawing.XColors.Tomato)&#xA;Dim brush As PdfSharp.Drawing.XBrush= New PdfSharp.Drawing.XSolidBrush(PdfSharp.Drawing.XColor.FromArgb(255,255,0,0))&#xA;gfx.DrawRoundedRectangle(PdfSharp.Drawing.XPens.Tomato, 226, 826, 305, 22, 20, 23)&#xA;gfx.DrawString(watermarkC,font,brush,New PdfSharp.Drawing.XPoint(231,827),format)&#xA;gfx.DrawString(watermarkP,font,brush,New PdfSharp.Drawing.XPoint(266,827),format)&#xA;gfx.DrawString(watermarkE,font,brush,New PdfSharp.Drawing.XPoint(302,827),format)&#xA;gfx.DrawString(watermarkM,font,brush,New PdfSharp.Drawing.XPoint(340,827),format)&#xA;gfx.DrawString(watermarkpub,font,brush,New PdfSharp.Drawing.XPoint(410,827),format)&#xA;gfx.DrawString(Watermarkmos,font,brush,New PdfSharp.Drawing.XPoint(480,827),format)&#xA;Dim fs As System.IO.FileStream = New FileStream(filename, FileMode.OpenOrCreate, FileAccess.ReadWrite)&#xA;document.Save(Destinationfolder)&#xA;Catch&#xA;&#x9;arg_failtostamp = True&#xA;&#x9;'Dim strFile As String = &quot;C:\Users\skore\Desktop\Stamping\Exception log file\ErrorLog_&quot; &amp; DateTime.Today.ToString(&quot;yyyy-MM-dd&quot;) &amp; &quot;.txt&quot;&#xA;&#x9;'Dim sw As StreamWriter&#xA;&#x9;'Dim fs As FileStream = Nothing&#xA;&#xA;'If (Not File.Exists(strFile)) Then&#xA; '   Try&#xA;      ' fs = File.Create(strFile)&#xA;       'sw = File.AppendText(strFile)&#xA;       'sw.WriteLine(&quot;Start Error Log for today&quot;)&#xA;&#xA;    'Catch ex As Exception&#xA;     '   MsgBox(&quot;Error Creating Log File&quot;)&#xA;    'End Try&#xA;'Else&#xA;    'sw = File.AppendText(strFile)&#xA;&#x9;'sw.WriteLine(Environment.NewLine)&#xA;    'sw.WriteLine(tempfaname &amp; &quot;;&quot; &amp; tempinvnum &amp; &quot;;&quot; &amp; tempamount &amp; &quot;;&quot; &amp; temppdfpath &amp; &quot;;&quot; &amp; DateTime.Now &amp; &quot;;&quot; &amp;&quot;Can not stamp the PDF&quot;)&#xA;&#xA;    'sw.Close()&#xA;'End If&#xA;End Try" DisplayName="Invoke code - Add Text Watermark to PDF" sap:VirtualizedContainerService.HintSize="334,236" sap2010:WorkflowViewState.IdRef="InvokeCode_4">
                                        <ui:InvokeCode.Arguments>
                                          <InArgument x:TypeArguments="x:String" x:Key="InputPdfFilePath">[var_pdffilepath]</InArgument>
                                          <InArgument x:TypeArguments="x:String" x:Key="OutputPdfFilePath">[in_OutputPaidPdfFilePath+currentdate+"\For all\PAID\"+var_pdfname]</InArgument>
                                          <InArgument x:TypeArguments="x:String" x:Key="Watermarkclientcode">["C: "+var_C]</InArgument>
                                          <InArgument x:TypeArguments="x:String" x:Key="Watermarkproductcode">["P: "+var_P]</InArgument>
                                          <InArgument x:TypeArguments="x:String" x:Key="WatermarkEST">["E: "+var_E]</InArgument>
                                          <InArgument x:TypeArguments="x:String" x:Key="WatermarkMediacode">["M: "+var_MediaLookUp]</InArgument>
                                          <InArgument x:TypeArguments="x:String" x:Key="Watermarkpubcode">["Pub_Code: "+var_PUBLICATON_CODE]</InArgument>
                                          <InArgument x:TypeArguments="x:String" x:Key="Watermarkmos">["MOS: "+var_MOS]</InArgument>
                                          <InOutArgument x:TypeArguments="x:Boolean" x:Key="arg_failtostamp">[var_failtostamp]</InOutArgument>
                                          <InOutArgument x:TypeArguments="x:Int32" x:Key="count">[var_pagecount]</InOutArgument>
                                        </ui:InvokeCode.Arguments>
                                        <sap:WorkflowViewStateService.ViewState>
                                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                          </scg:Dictionary>
                                        </sap:WorkflowViewStateService.ViewState>
                                      </ui:InvokeCode>
                                    </TryCatch.Try>
                                    <TryCatch.Catches>
                                      <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="404,21" sap2010:WorkflowViewState.IdRef="Catch`1_11">
                                        <sap:WorkflowViewStateService.ViewState>
                                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                          </scg:Dictionary>
                                        </sap:WorkflowViewStateService.ViewState>
                                        <ActivityAction x:TypeArguments="s:Exception">
                                          <ActivityAction.Argument>
                                            <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                                          </ActivityAction.Argument>
                                          <ui:CopyFile ContinueOnError="{x:Null}" Destination="[in_OutputPaidPdfFilePath+currentdate+&quot;\For all\PAID\&quot;+var_pdfname]" DisplayName="Copy File" sap:VirtualizedContainerService.HintSize="434,157" sap2010:WorkflowViewState.IdRef="CopyFile_11" Overwrite="False" Path="[var_pdffilepath]" />
                                        </ActivityAction>
                                      </Catch>
                                    </TryCatch.Catches>
                                  </TryCatch>
                                </If.Then>
                                <If.Else>
                                  <Sequence sap:VirtualizedContainerService.HintSize="480,656" sap2010:WorkflowViewState.IdRef="Sequence_29">
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                    <TryCatch DisplayName="Try Catch" sap:VirtualizedContainerService.HintSize="438,463" sap2010:WorkflowViewState.IdRef="TryCatch_13">
                                      <TryCatch.Try>
                                        <ui:InvokeCode ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="VB.net Code to add Text Watermark to PDF Document&#xA;&#xA;Packages Used :  Syncfusion.Pdf.Net.Core and UiPath.System.Activities" Code="Try&#xA;Dim Destinationfolder As String = OutputPdfFilePath&#xA;Dim filename As String = InputPdfFilePath&#xA;'Dim Top as Integer = 100&#xA;Dim watermarkC As String =Watermarkclientcode&#xA;Dim watermarkP As String = Watermarkproductcode&#xA;Dim watermarkE As String = WatermarkEST&#xA;Dim watermarkM As String = WatermarkMediacode&#xA;Dim watermarkpub As String = Watermarkpubcode&#xA;Dim watermatkmos As String = Watermarkmos&#xA;Dim watermark As String = watermarkC+watermarkP+watermarkE+watermarkM+watermarkpub&#xA;Dim emSize As Integer = 8&#xA;Dim document As PdfSharp.Pdf.PdfDocument =  PdfSharp.Pdf.IO.PdfReader.Open(filename)&#xA;count=document.PageCount&#xA;Dim font As PdfSharp.Drawing.XFont = New PdfSharp.Drawing.XFont(&quot;Times New Roman&quot;, emSize, PdfSharp.Drawing.XFontStyle.Bold)&#xA;If document.Version &lt; 14 Then document.Version = 14&#xA;Dim page As PdfSharp.Pdf.PdfPage = document.Pages(0)&#xA;'page.TrimMargins.Top=20&#xA;Dim gfx As PdfSharp.Drawing.XGraphics = PdfSharp.Drawing.XGraphics.FromPdfPage(page,PdfSharp.Drawing.XGraphicsPdfPageOptions.Prepend)&#xA;Dim size As PdfSharp.Drawing.XSize = gfx.MeasureString(watermark, font)&#xA;Dim format As PdfSharp.Drawing.XStringFormat = New PdfSharp.Drawing.XStringFormat()&#xA;format.Alignment=PdfSharp.Drawing.XStringAlignment.Near&#xA;format.LineAlignment=PdfSharp.Drawing.XLineAlignment.Near&#xA;Dim pen As PdfSharp.Drawing.XPen= New PdfSharp.Drawing.XPen(PdfSharp.Drawing.XColors.Tomato)&#xA;Dim brush As PdfSharp.Drawing.XBrush= New PdfSharp.Drawing.XSolidBrush(PdfSharp.Drawing.XColor.FromArgb(255,255,0,0))&#xA;gfx.DrawRoundedRectangle(PdfSharp.Drawing.XPens.Tomato, 226, 2, 305, 22, 20, 23)&#xA;gfx.DrawString(watermarkC,font,brush,New PdfSharp.Drawing.XPoint(231,3),format)&#xA;gfx.DrawString(watermarkP,font,brush,New PdfSharp.Drawing.XPoint(266,3),format)&#xA;gfx.DrawString(watermarkE,font,brush,New PdfSharp.Drawing.XPoint(302,3),format)&#xA;gfx.DrawString(watermarkM,font,brush,New PdfSharp.Drawing.XPoint(340,3),format)&#xA;gfx.DrawString(watermarkpub,font,brush,New PdfSharp.Drawing.XPoint(410,3),format)&#xA;gfx.DrawString(Watermarkmos,font,brush,New PdfSharp.Drawing.XPoint(480,3),format)&#xA;Dim fs As System.IO.FileStream = New FileStream(filename, FileMode.OpenOrCreate, FileAccess.ReadWrite)&#xA;document.Save(Destinationfolder)&#xA;Catch  e As IO.IOException&#xA;&#x9;arg_failtostamp = True&#xA;&#x9;strException = e.ToString&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;'Dim strFile As String = &quot;C:\Users\skore\Desktop\Stamping\Exception log file\ErrorLog_&quot; &amp; DateTime.Today.ToString(&quot;yyyy-MM-dd&quot;) &amp; &quot;.txt&quot;&#xA;&#x9;'Dim sw As StreamWriter&#xA;&#x9;'Dim fs As FileStream = Nothing&#xA;&#xA;'If (Not File.Exists(strFile)) Then&#xA; '   Try&#xA;      ' fs = File.Create(strFile)&#xA;       'sw = File.AppendText(strFile)&#xA;       'sw.WriteLine(&quot;Start Error Log for today&quot;)&#xA;&#xA;    'Catch ex As Exception&#xA;     '   MsgBox(&quot;Error Creating Log File&quot;)&#xA;    'End Try&#xA;'Else&#xA;    'sw = File.AppendText(strFile)&#xA;&#x9;'sw.WriteLine(Environment.NewLine)&#xA;    'sw.WriteLine(tempfaname &amp; &quot;;&quot; &amp; tempinvnum &amp; &quot;;&quot; &amp; tempamount &amp; &quot;;&quot; &amp; temppdfpath &amp; &quot;;&quot; &amp; DateTime.Now &amp; &quot;;&quot; &amp;&quot;Can not stamp the PDF&quot;)&#xA;&#xA;    'sw.Close()&#xA;'End If&#xA;End Try" DisplayName="Invoke code - Add Text Watermark to PDF" sap:VirtualizedContainerService.HintSize="334,236" sap2010:WorkflowViewState.IdRef="InvokeCode_5">
                                          <ui:InvokeCode.Arguments>
                                            <InArgument x:TypeArguments="x:String" x:Key="InputPdfFilePath">[var_pdffilepath]</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="OutputPdfFilePath">[in_OutputPaidPdfFilePath+currentdate+"\For all\PAID\"+var_pdfname]</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="Watermarkclientcode">["C: "+var_C]</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="Watermarkproductcode">["P: "+var_P]</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="WatermarkEST">["E: "+var_E]</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="WatermarkMediacode">["M: "+var_MediaLookUp]</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="Watermarkpubcode">["Pub_Code: "+var_PUBLICATON_CODE]</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="Watermarkmos">["MOS: "+var_MOS]</InArgument>
                                            <InOutArgument x:TypeArguments="x:Boolean" x:Key="arg_failtostamp">[var_failtostamp]</InOutArgument>
                                            <InOutArgument x:TypeArguments="x:Int32" x:Key="count">[var_pagecount]</InOutArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="strException">[varException]</InArgument>
                                          </ui:InvokeCode.Arguments>
                                          <sap:WorkflowViewStateService.ViewState>
                                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                            </scg:Dictionary>
                                          </sap:WorkflowViewStateService.ViewState>
                                        </ui:InvokeCode>
                                      </TryCatch.Try>
                                      <TryCatch.Catches>
                                        <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="404,21" sap2010:WorkflowViewState.IdRef="Catch`1_12">
                                          <sap:WorkflowViewStateService.ViewState>
                                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                            </scg:Dictionary>
                                          </sap:WorkflowViewStateService.ViewState>
                                          <ActivityAction x:TypeArguments="s:Exception">
                                            <ActivityAction.Argument>
                                              <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                                            </ActivityAction.Argument>
                                            <ui:CopyFile ContinueOnError="{x:Null}" Destination="[in_OutputPaidPdfFilePath+currentdate+&quot;\For all\PAID\&quot;+var_pdfname]" DisplayName="Copy File" sap:VirtualizedContainerService.HintSize="434,157" sap2010:WorkflowViewState.IdRef="CopyFile_12" Overwrite="False" Path="[var_pdffilepath]" />
                                          </ActivityAction>
                                        </Catch>
                                      </TryCatch.Catches>
                                    </TryCatch>
                                    <WriteLine DisplayName="Write Line" sap:VirtualizedContainerService.HintSize="438,61" sap2010:WorkflowViewState.IdRef="WriteLine_8" Text="[varException]" />
                                  </Sequence>
                                </If.Else>
                              </If>
                            </If.Else>
                          </If>
                        </Sequence>
                      </If.Else>
                    </If>
                  </Sequence>
                </Sequence>
              </If.Else>
            </If>
          </If.Else>
        </If>
      </Sequence>
      <Sequence DisplayName="Set pdf page countequence" sap:VirtualizedContainerService.HintSize="6787,83" sap2010:WorkflowViewState.IdRef="Sequence_15">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </Sequence>
      <Sequence DisplayName="Send email to FA if process is not able to stamp any of the pdf" sap:VirtualizedContainerService.HintSize="6787,775" sap2010:WorkflowViewState.IdRef="Sequence_14">
        <Sequence.Variables>
          <Variable x:TypeArguments="x:String" Name="strpagecount" />
        </Sequence.Variables>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
        <If Condition="[var_failtostamp = True]" sap:VirtualizedContainerService.HintSize="1044,683" sap2010:WorkflowViewState.IdRef="If_12">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <If.Then>
            <Sequence sap:VirtualizedContainerService.HintSize="478,535" sap2010:WorkflowViewState.IdRef="Sequence_10">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <ui:ExecuteQuery ContinueOnError="{x:Null}" DataTable="{x:Null}" TimeoutMS="{x:Null}" CommandType="Text" DisplayName="Execute Query" ExistingDbConnection="[in_dbexistigconnnection]" sap:VirtualizedContainerService.HintSize="436,88" sap2010:WorkflowViewState.IdRef="ExecuteQuery_1" Sql="[&quot;delete from &quot; +in_tablename+ &quot; where invoice_date = '&quot; +var_PDF_Invoice_Date+&quot;' and invoice_num = '&quot;+var_Invoice_Num+&quot;' and media_type = '&quot;+var_MediaLookUp+&quot;' and client_code = '&quot;+var_C+&quot;' and pdf_MOS = '&quot;+var_MOS+&quot;' and publication_code = '&quot;+var_PUBLICATON_CODE+&quot;' &quot;]">
                <ui:ExecuteQuery.Parameters>
                  <scg:Dictionary x:TypeArguments="x:String, Argument" />
                </ui:ExecuteQuery.Parameters>
              </ui:ExecuteQuery>
              <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="436,315" sap2010:WorkflowViewState.IdRef="CommentOut_4">
                <ui:CommentOut.Body>
                  <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="376,237" sap2010:WorkflowViewState.IdRef="Sequence_28">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <ui:SendExchangeMail ApplicationId="{x:Null}" Bcc="{x:Null}" Cc="{x:Null}" DirectoryId="{x:Null}" From="{x:Null}" MailMessage="{x:Null}" Name="{x:Null}" SecurePassword="{x:Null}" Server="{x:Null}" TimeoutMS="{x:Null}" AuthenticationMode="UserNameAndPassword" Body="[&quot;This invoice &quot;+ var_Doc_Link +&quot; cannot be stamped. This cannot be automatically Tagged or Uploaded to mDocs/Square9.&quot; +Environment.NewLine+&quot;Please process it manually (Tag and Scan via StatusData).&quot;]" DisplayName="Send Exchange Mail Message" Domain="AD" EmailAutodiscover="nycgrm.invoicebot@groupm.com" ExchangeVersion="Exchange2007_SP1" sap:VirtualizedContainerService.HintSize="334,145" sap2010:WorkflowViewState.IdRef="SendExchangeMail_1" IsBodyHtml="False" IsDraft="False" Password="[in_SPPass]" SaveCopy="False" Subject="[var_Invoice_Num+&quot; Invoice can not be stamped&quot;]" To="skore@cybage.com" User="[in_SPUser]" />
                  </Sequence>
                </ui:CommentOut.Body>
              </ui:CommentOut>
            </Sequence>
          </If.Then>
          <If.Else>
            <If Condition="[var_pagecount&gt;0]" sap:VirtualizedContainerService.HintSize="521,528" sap2010:WorkflowViewState.IdRef="If_17">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <If.Then>
                <Sequence sap:VirtualizedContainerService.HintSize="376,380" sap2010:WorkflowViewState.IdRef="Sequence_16">
                  <Sequence.Variables>
                    <Variable x:TypeArguments="x:String" Name="updatequery" />
                  </Sequence.Variables>
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <Assign sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_6">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[strpagecount]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">[var_pagecount.ToString]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <Assign sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_7">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[updatequery]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">["update "+in_tablename+ " set pages = '"+strpagecount+"' where invoice_num = '"+var_Invoice_Num+"' and client_code = '"+var_C+"' and pdf_MOS = '"+var_MOS+"' and publication_code = '"+var_PUBLICATON_CODE+"'"]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ui:ExecuteQuery ContinueOnError="{x:Null}" DataTable="{x:Null}" TimeoutMS="{x:Null}" CommandType="Text" DisplayName="Execute Query" ExistingDbConnection="[in_dbexistigconnnection]" sap:VirtualizedContainerService.HintSize="334,88" sap2010:WorkflowViewState.IdRef="ExecuteQuery_2" Sql="[updatequery]">
                    <ui:ExecuteQuery.Parameters>
                      <scg:Dictionary x:TypeArguments="x:String, Argument" />
                    </ui:ExecuteQuery.Parameters>
                  </ui:ExecuteQuery>
                </Sequence>
              </If.Then>
            </If>
          </If.Else>
        </If>
      </Sequence>
    </Sequence>
  </Sequence>
</Activity>