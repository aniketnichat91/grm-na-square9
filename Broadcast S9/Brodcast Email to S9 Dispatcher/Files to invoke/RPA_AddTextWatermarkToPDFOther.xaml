<Activity mc:Ignorable="sap sap2010" x:Class="Main" this:Main.in_InputPdfFilePath="C:\Users\skore\Desktop\I-297925 - Moat Analytics - Mindshare US -  - February.pdf" this:Main.in_OutputPdfFilePath="C:\Users\skore\Desktop\DV\I-297925 - Moat Analytics - Mindshare US -  - February.pdf" this:Main.in_WatermarkText="CPE text is: **" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib" xmlns:this="clr-namespace:" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property sap2010:Annotation.AnnotationText="Input PDF file path which to be added with Watermark Text" Name="in_InputPdfFilePath" Type="InArgument(x:String)" />
    <x:Property sap2010:Annotation.AnnotationText="Output pdf file path which will contain watermark text" Name="in_OutputPdfFilePath" Type="InArgument(x:String)" />
    <x:Property sap2010:Annotation.AnnotationText="Watermark Text is to be added to PDF." Name="in_WatermarkText" Type="InArgument(x:String)" />
    <x:Property Name="in_watermarkC" Type="InArgument(x:String)" />
    <x:Property Name="in_watrmarkE" Type="InArgument(x:String)" />
    <x:Property Name="in_watermarkP" Type="InArgument(x:String)" />
    <x:Property Name="in_watermarkM" Type="InArgument(x:String)" />
    <x:Property Name="in_watermarkPub" Type="InArgument(x:String)" />
    <x:Property Name="in_watermarkmos" Type="InArgument(x:String)" />
    <x:Property Name="in_temppdfpath" Type="InArgument(x:String)" />
    <x:Property Name="in_tempfa" Type="InArgument(x:String)" />
    <x:Property Name="in_tempamount" Type="InArgument(x:String)" />
    <x:Property Name="in_tempinvnum" Type="InArgument(x:String)" />
  </x:Members>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>934,615</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>ActivityBuilder_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Activities.DynamicUpdate</x:String>
      <x:String>System.Runtime.Serialization</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="" DisplayName="RPA Add Text Watermark To PDF " sap:VirtualizedContainerService.HintSize="376,450" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:InvokeCode ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="VB.net Code to add Text Watermark to PDF Document&#xA;&#xA;Packages Used :  Syncfusion.Pdf.Net.Core and UiPath.System.Activities" Code="Try&#xD;&#xA;Dim Destinationfolder As String = OutputPdfFilePath&#xD;&#xA;Dim filename As String = InputPdfFilePath&#xD;&#xA;'Dim Top as Integer = 100&#xD;&#xA;Dim watermarkC As String =Watermarkclientcode&#xD;&#xA;Dim watermarkP As String = Watermarkproductcode&#xD;&#xA;Dim watermarkE As String = WatermarkEST&#xD;&#xA;Dim watermarkM As String = WatermarkMediacode&#xD;&#xA;Dim watermarkpub As String = Watermarkpubcode&#xD;&#xA;Dim watermatkmos As String = Watermarkmos&#xD;&#xA;Dim watermark As String = watermarkC+watermarkP+watermarkE+watermarkM+watermarkpub&#xD;&#xA;Dim emSize As Integer = 8&#xD;&#xA;Dim document As PdfSharp.Pdf.PdfDocument =  PdfSharp.Pdf.IO.PdfReader.Open(filename)&#xD;&#xA;Dim font As PdfSharp.Drawing.XFont = New PdfSharp.Drawing.XFont(&quot;Times New Roman&quot;, emSize, PdfSharp.Drawing.XFontStyle.Bold)&#xD;&#xA;If document.Version &lt; 14 Then document.Version = 14&#xD;&#xA;Dim page As PdfSharp.Pdf.PdfPage = document.Pages(0)&#xD;&#xA;'page.TrimMargins.Top=20&#xD;&#xA;Dim gfx As PdfSharp.Drawing.XGraphics = PdfSharp.Drawing.XGraphics.FromPdfPage(page,PdfSharp.Drawing.XGraphicsPdfPageOptions.Prepend)&#xD;&#xA;Dim size As PdfSharp.Drawing.XSize = gfx.MeasureString(watermark, font)&#xD;&#xA;Dim format As PdfSharp.Drawing.XStringFormat = New PdfSharp.Drawing.XStringFormat()&#xD;&#xA;format.Alignment=PdfSharp.Drawing.XStringAlignment.Near&#xD;&#xA;format.LineAlignment=PdfSharp.Drawing.XLineAlignment.Near&#xD;&#xA;Dim pen As PdfSharp.Drawing.XPen= New PdfSharp.Drawing.XPen(PdfSharp.Drawing.XColors.Tomato)&#xD;&#xA;Dim brush As PdfSharp.Drawing.XBrush= New PdfSharp.Drawing.XSolidBrush(PdfSharp.Drawing.XColor.FromArgb(255,255,0,0))&#xD;&#xA;gfx.DrawRoundedRectangle(PdfSharp.Drawing.XPens.Tomato, 2, 2, 138, 22, 20, 23)&#xD;&#xA;gfx.DrawString(watermarkC,font,brush,New PdfSharp.Drawing.XPoint(7,3),format)&#xD;&#xA;gfx.DrawString(watermarkP,font,brush,New PdfSharp.Drawing.XPoint(40,3),format)&#xD;&#xA;gfx.DrawString(watermarkE,font,brush,New PdfSharp.Drawing.XPoint(52,3),format)&#xD;&#xA;gfx.DrawString(watermarkM,font,brush,New PdfSharp.Drawing.XPoint(82,3),format)&#xD;&#xA;gfx.DrawString(watermarkpub,font,brush,New PdfSharp.Drawing.XPoint(7,13),format)&#xD;&#xA;gfx.DrawString(Watermarkmos,font,brush,New PdfSharp.Drawing.XPoint(77,13),format)&#xD;&#xA;gfx.DrawRoundedRectangle(PdfSharp.Drawing.XPens.Tomato, 256, 2, 138, 22, 20, 23)&#xD;&#xA;gfx.DrawString(watermarkC,font,brush,New PdfSharp.Drawing.XPoint(261,3),format)&#xD;&#xA;gfx.DrawString(watermarkP,font,brush,New PdfSharp.Drawing.XPoint(294,3),format)&#xD;&#xA;gfx.DrawString(watermarkE,font,brush,New PdfSharp.Drawing.XPoint(306,3),format)&#xD;&#xA;gfx.DrawString(watermarkM,font,brush,New PdfSharp.Drawing.XPoint(333,3),format)&#xD;&#xA;gfx.DrawString(watermarkpub,font,brush,New PdfSharp.Drawing.XPoint(261,13),format)&#xD;&#xA;gfx.DrawString(Watermarkmos,font,brush,New PdfSharp.Drawing.XPoint(330,13),format)&#xD;&#xA;gfx.DrawRoundedRectangle(PdfSharp.Drawing.XPens.Tomato, 480, 2, 138, 22, 20, 23)&#xD;&#xA;gfx.DrawString(watermarkC,font,brush,New PdfSharp.Drawing.XPoint(486,3),format)&#xD;&#xA;gfx.DrawString(watermarkP,font,brush,New PdfSharp.Drawing.XPoint(520,3),format)&#xD;&#xA;gfx.DrawString(watermarkE,font,brush,New PdfSharp.Drawing.XPoint(531,3),format)&#xD;&#xA;gfx.DrawString(watermarkM,font,brush,New PdfSharp.Drawing.XPoint(558,3),format)&#xD;&#xA;gfx.DrawString(watermarkpub,font,brush,New PdfSharp.Drawing.XPoint(486,13),format)&#xD;&#xA;gfx.DrawString(Watermarkmos,font,brush,New PdfSharp.Drawing.XPoint(555,13),format)&#xD;&#xA;Dim fs As System.IO.FileStream = New FileStream(filename, FileMode.OpenOrCreate, FileAccess.ReadWrite)&#xD;&#xA;document.Save(Destinationfolder)&#xD;&#xA;Catch&#xD;&#xA;&#x9;Dim strFile As String = &quot;C:\Users\skore\Desktop\Stamping\Exception log file\ErrorLog_&quot; &amp; DateTime.Today.ToString(&quot;yyyy-MM-dd&quot;) &amp; &quot;.txt&quot;&#xD;&#xA;&#x9;Dim sw As StreamWriter&#xD;&#xA;&#x9;Dim fs As FileStream = Nothing&#xD;&#xA;&#xD;&#xA;If (Not File.Exists(strFile)) Then&#xD;&#xA; '   Try&#xD;&#xA;       fs = File.Create(strFile)&#xD;&#xA;       sw = File.AppendText(strFile)&#xD;&#xA;       sw.WriteLine(&quot;Start Error Log for today&quot;)&#xD;&#xA;&#xD;&#xA;    'Catch ex As Exception&#xD;&#xA;     '   MsgBox(&quot;Error Creating Log File&quot;)&#xD;&#xA;    'End Try&#xD;&#xA;Else&#xD;&#xA;    sw = File.AppendText(strFile)&#xD;&#xA;&#x9;sw.WriteLine(Environment.NewLine)&#xD;&#xA;    sw.WriteLine(tempfaname &amp; &quot;;&quot; &amp; tempinvnum &amp; &quot;;&quot; &amp; tempamount &amp; &quot;;&quot; &amp; temppdfpath &amp; &quot;;&quot; &amp; DateTime.Now &amp; &quot;;&quot; &amp;&quot;Can not stamp the PDF&quot;)&#xD;&#xA;&#xD;&#xA;    sw.Close()&#xD;&#xA;End If&#xD;&#xA;End Try" DisplayName="Invoke code - Add Text Watermark to PDF" sap:VirtualizedContainerService.HintSize="334,236" sap2010:WorkflowViewState.IdRef="InvokeCode_1">
      <ui:InvokeCode.Arguments>
        <InArgument x:TypeArguments="x:String" x:Key="InputPdfFilePath">[in_InputPdfFilePath]</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="OutputPdfFilePath">[in_OutputPdfFilePath]</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="WatermarkText">[in_WatermarkText]</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="Watermarkclientcode">[in_watermarkC]</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="Watermarkproductcode">P:</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="WatermarkEST" xml:space="preserve">E: NR </InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="WatermarkMediacode">[in_watermarkM]</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="Watermarkpubcode">[in_watermarkPub]</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="Watermarkmos">[in_watermarkmos]</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="temppdfpath">[in_temppdfpath]</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="tempfaname">[in_tempfa]</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="tempamount">[in_tempamount]</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="tempinvnum">[in_tempinvnum]</InArgument>
      </ui:InvokeCode.Arguments>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:InvokeCode>
    <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="334,51" sap2010:WorkflowViewState.IdRef="CommentOut_1">
      <ui:CommentOut.Body>
        <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="376,256" sap2010:WorkflowViewState.IdRef="Sequence_2">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:InvokeCode ContinueOnError="{x:Null}" Code="Const watermark As String = &quot;your content&quot;&#xA;        Const emSize As Integer = 150&#xA;        Const filename As String = &quot;your pdf path&quot;&#xA;        Dim font As XFont = New XFont(&quot;Times New Roman&quot;, emSize, XFontStyle.BoldItalic)&#xA;        Dim document As PdfDocument = PdfReader.Open(filename)&#xA;        If document.Version &lt; 14 Then document.Version = 14&#xA;&#xA;        For idx As Integer = 0 To document.Pages.Count - 1&#xA;            Dim page As PdfPage = document.Pages(idx)&#xA;            Dim gfx = XGraphics.FromPdfPage(page, XGraphicsPdfPageOptions.Prepend)&#xA;            Dim size = gfx.MeasureString(watermark, font)&#xA;            Dim width = Convert.ToDouble(page.Width)&#xA;            Dim height = Convert.ToDouble(page.Height)&#xA;&#xA;            gfx.TranslateTransform(width / 2, height / 2)&#xA;            gfx.RotateTransform(-Math.Atan(height / width) * 180 / Math.PI)&#xA;            gfx.TranslateTransform(-width / 2, -height / 2)&#xA;            Dim format = New XStringFormat()&#xA;            format.Alignment = XStringAlignment.Near&#xA;            format.LineAlignment = XLineAlignment.Near&#xA;            Dim brush As XBrush = New XSolidBrush(XColor.FromArgb(128, 255, 0, 0))&#xA;            gfx.DrawString(watermark, font, brush, New XPoint((width - size.Width) / 2, (height - size.Height) / 2), format)&#xA;        Next&#xA;&#xA;        document.Save(filename)" DisplayName="Invoke code" sap:VirtualizedContainerService.HintSize="334,164" sap2010:WorkflowViewState.IdRef="InvokeCode_2">
            <ui:InvokeCode.Arguments>
              <scg:Dictionary x:TypeArguments="x:String, Argument" />
            </ui:InvokeCode.Arguments>
          </ui:InvokeCode>
        </Sequence>
      </ui:CommentOut.Body>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:CommentOut>
  </Sequence>
</Activity>